
BQ27427_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b4  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10044474  10044474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10044478  10044478  00005478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000040  1004447c  1004447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  2000011c  100444bc  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram_preamble 0000002c  20000004  20000004  00007004  2**2
                  ALLOC
  7 .bss.blueRAM  00000000  200000c0  200000c0  00000000  2**0
                  ALLOC
  8 .bss          0000005c  200000c0  200000c0  00007004  2**2
                  ALLOC
  9 .noinit       00000000  20000128  100444c8  00000000  2**0
                  ALLOC
 10 .ota_region_end 00000000  100444c8  100444c8  00006128  2**0
                  CONTENTS
 11 .heap         00000000  20000128  20000128  00006128  2**0
                  CONTENTS
 12 .stack        00000c00  2000f400  2000f400  00006400  2**0
                  ALLOC
 13 .rom_info     00000000  10000000  10000000  00006128  2**0
                  CONTENTS
 14 .ARM.attributes 00000028  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY
 15 .debug_info   000086fc  00000000  00000000  00006150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001a53  00000000  00000000  0000e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009a8  00000000  00000000  000102a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000749  00000000  00000000  00010c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017c60  00000000  00000000  00011391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000af9d  00000000  00000000  00028ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0009d81e  00000000  00000000  00033f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000d17ac  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002374  00000000  00000000  000d17f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000067  00000000  00000000  000d3b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <__udivsi3>:
100400c0:	2200      	movs	r2, #0
100400c2:	0843      	lsrs	r3, r0, #1
100400c4:	428b      	cmp	r3, r1
100400c6:	d374      	bcc.n	100401b2 <__udivsi3+0xf2>
100400c8:	0903      	lsrs	r3, r0, #4
100400ca:	428b      	cmp	r3, r1
100400cc:	d35f      	bcc.n	1004018e <__udivsi3+0xce>
100400ce:	0a03      	lsrs	r3, r0, #8
100400d0:	428b      	cmp	r3, r1
100400d2:	d344      	bcc.n	1004015e <__udivsi3+0x9e>
100400d4:	0b03      	lsrs	r3, r0, #12
100400d6:	428b      	cmp	r3, r1
100400d8:	d328      	bcc.n	1004012c <__udivsi3+0x6c>
100400da:	0c03      	lsrs	r3, r0, #16
100400dc:	428b      	cmp	r3, r1
100400de:	d30d      	bcc.n	100400fc <__udivsi3+0x3c>
100400e0:	22ff      	movs	r2, #255	@ 0xff
100400e2:	0209      	lsls	r1, r1, #8
100400e4:	ba12      	rev	r2, r2
100400e6:	0c03      	lsrs	r3, r0, #16
100400e8:	428b      	cmp	r3, r1
100400ea:	d302      	bcc.n	100400f2 <__udivsi3+0x32>
100400ec:	1212      	asrs	r2, r2, #8
100400ee:	0209      	lsls	r1, r1, #8
100400f0:	d065      	beq.n	100401be <__udivsi3+0xfe>
100400f2:	0b03      	lsrs	r3, r0, #12
100400f4:	428b      	cmp	r3, r1
100400f6:	d319      	bcc.n	1004012c <__udivsi3+0x6c>
100400f8:	e000      	b.n	100400fc <__udivsi3+0x3c>
100400fa:	0a09      	lsrs	r1, r1, #8
100400fc:	0bc3      	lsrs	r3, r0, #15
100400fe:	428b      	cmp	r3, r1
10040100:	d301      	bcc.n	10040106 <__udivsi3+0x46>
10040102:	03cb      	lsls	r3, r1, #15
10040104:	1ac0      	subs	r0, r0, r3
10040106:	4152      	adcs	r2, r2
10040108:	0b83      	lsrs	r3, r0, #14
1004010a:	428b      	cmp	r3, r1
1004010c:	d301      	bcc.n	10040112 <__udivsi3+0x52>
1004010e:	038b      	lsls	r3, r1, #14
10040110:	1ac0      	subs	r0, r0, r3
10040112:	4152      	adcs	r2, r2
10040114:	0b43      	lsrs	r3, r0, #13
10040116:	428b      	cmp	r3, r1
10040118:	d301      	bcc.n	1004011e <__udivsi3+0x5e>
1004011a:	034b      	lsls	r3, r1, #13
1004011c:	1ac0      	subs	r0, r0, r3
1004011e:	4152      	adcs	r2, r2
10040120:	0b03      	lsrs	r3, r0, #12
10040122:	428b      	cmp	r3, r1
10040124:	d301      	bcc.n	1004012a <__udivsi3+0x6a>
10040126:	030b      	lsls	r3, r1, #12
10040128:	1ac0      	subs	r0, r0, r3
1004012a:	4152      	adcs	r2, r2
1004012c:	0ac3      	lsrs	r3, r0, #11
1004012e:	428b      	cmp	r3, r1
10040130:	d301      	bcc.n	10040136 <__udivsi3+0x76>
10040132:	02cb      	lsls	r3, r1, #11
10040134:	1ac0      	subs	r0, r0, r3
10040136:	4152      	adcs	r2, r2
10040138:	0a83      	lsrs	r3, r0, #10
1004013a:	428b      	cmp	r3, r1
1004013c:	d301      	bcc.n	10040142 <__udivsi3+0x82>
1004013e:	028b      	lsls	r3, r1, #10
10040140:	1ac0      	subs	r0, r0, r3
10040142:	4152      	adcs	r2, r2
10040144:	0a43      	lsrs	r3, r0, #9
10040146:	428b      	cmp	r3, r1
10040148:	d301      	bcc.n	1004014e <__udivsi3+0x8e>
1004014a:	024b      	lsls	r3, r1, #9
1004014c:	1ac0      	subs	r0, r0, r3
1004014e:	4152      	adcs	r2, r2
10040150:	0a03      	lsrs	r3, r0, #8
10040152:	428b      	cmp	r3, r1
10040154:	d301      	bcc.n	1004015a <__udivsi3+0x9a>
10040156:	020b      	lsls	r3, r1, #8
10040158:	1ac0      	subs	r0, r0, r3
1004015a:	4152      	adcs	r2, r2
1004015c:	d2cd      	bcs.n	100400fa <__udivsi3+0x3a>
1004015e:	09c3      	lsrs	r3, r0, #7
10040160:	428b      	cmp	r3, r1
10040162:	d301      	bcc.n	10040168 <__udivsi3+0xa8>
10040164:	01cb      	lsls	r3, r1, #7
10040166:	1ac0      	subs	r0, r0, r3
10040168:	4152      	adcs	r2, r2
1004016a:	0983      	lsrs	r3, r0, #6
1004016c:	428b      	cmp	r3, r1
1004016e:	d301      	bcc.n	10040174 <__udivsi3+0xb4>
10040170:	018b      	lsls	r3, r1, #6
10040172:	1ac0      	subs	r0, r0, r3
10040174:	4152      	adcs	r2, r2
10040176:	0943      	lsrs	r3, r0, #5
10040178:	428b      	cmp	r3, r1
1004017a:	d301      	bcc.n	10040180 <__udivsi3+0xc0>
1004017c:	014b      	lsls	r3, r1, #5
1004017e:	1ac0      	subs	r0, r0, r3
10040180:	4152      	adcs	r2, r2
10040182:	0903      	lsrs	r3, r0, #4
10040184:	428b      	cmp	r3, r1
10040186:	d301      	bcc.n	1004018c <__udivsi3+0xcc>
10040188:	010b      	lsls	r3, r1, #4
1004018a:	1ac0      	subs	r0, r0, r3
1004018c:	4152      	adcs	r2, r2
1004018e:	08c3      	lsrs	r3, r0, #3
10040190:	428b      	cmp	r3, r1
10040192:	d301      	bcc.n	10040198 <__udivsi3+0xd8>
10040194:	00cb      	lsls	r3, r1, #3
10040196:	1ac0      	subs	r0, r0, r3
10040198:	4152      	adcs	r2, r2
1004019a:	0883      	lsrs	r3, r0, #2
1004019c:	428b      	cmp	r3, r1
1004019e:	d301      	bcc.n	100401a4 <__udivsi3+0xe4>
100401a0:	008b      	lsls	r3, r1, #2
100401a2:	1ac0      	subs	r0, r0, r3
100401a4:	4152      	adcs	r2, r2
100401a6:	0843      	lsrs	r3, r0, #1
100401a8:	428b      	cmp	r3, r1
100401aa:	d301      	bcc.n	100401b0 <__udivsi3+0xf0>
100401ac:	004b      	lsls	r3, r1, #1
100401ae:	1ac0      	subs	r0, r0, r3
100401b0:	4152      	adcs	r2, r2
100401b2:	1a41      	subs	r1, r0, r1
100401b4:	d200      	bcs.n	100401b8 <__udivsi3+0xf8>
100401b6:	4601      	mov	r1, r0
100401b8:	4152      	adcs	r2, r2
100401ba:	4610      	mov	r0, r2
100401bc:	4770      	bx	lr
100401be:	e7ff      	b.n	100401c0 <__udivsi3+0x100>
100401c0:	b501      	push	{r0, lr}
100401c2:	2000      	movs	r0, #0
100401c4:	f000 f806 	bl	100401d4 <__aeabi_idiv0>
100401c8:	bd02      	pop	{r1, pc}
100401ca:	46c0      	nop			@ (mov r8, r8)

100401cc <__aeabi_uidivmod>:
100401cc:	2900      	cmp	r1, #0
100401ce:	d0f7      	beq.n	100401c0 <__udivsi3+0x100>
100401d0:	e776      	b.n	100400c0 <__udivsi3>
100401d2:	4770      	bx	lr

100401d4 <__aeabi_idiv0>:
100401d4:	4770      	bx	lr
100401d6:	46c0      	nop			@ (mov r8, r8)

100401d8 <__aeabi_d2uiz>:
100401d8:	b570      	push	{r4, r5, r6, lr}
100401da:	2200      	movs	r2, #0
100401dc:	4b0c      	ldr	r3, [pc, #48]	@ (10040210 <__aeabi_d2uiz+0x38>)
100401de:	0004      	movs	r4, r0
100401e0:	000d      	movs	r5, r1
100401e2:	f000 ffd7 	bl	10041194 <__aeabi_dcmpge>
100401e6:	2800      	cmp	r0, #0
100401e8:	d104      	bne.n	100401f4 <__aeabi_d2uiz+0x1c>
100401ea:	0020      	movs	r0, r4
100401ec:	0029      	movs	r1, r5
100401ee:	f000 ff33 	bl	10041058 <__aeabi_d2iz>
100401f2:	bd70      	pop	{r4, r5, r6, pc}
100401f4:	4b06      	ldr	r3, [pc, #24]	@ (10040210 <__aeabi_d2uiz+0x38>)
100401f6:	2200      	movs	r2, #0
100401f8:	0020      	movs	r0, r4
100401fa:	0029      	movs	r1, r5
100401fc:	f000 fb22 	bl	10040844 <__aeabi_dsub>
10040200:	f000 ff2a 	bl	10041058 <__aeabi_d2iz>
10040204:	2380      	movs	r3, #128	@ 0x80
10040206:	061b      	lsls	r3, r3, #24
10040208:	469c      	mov	ip, r3
1004020a:	4460      	add	r0, ip
1004020c:	e7f1      	b.n	100401f2 <__aeabi_d2uiz+0x1a>
1004020e:	46c0      	nop			@ (mov r8, r8)
10040210:	41e00000 	.word	0x41e00000

10040214 <__aeabi_ddiv>:
10040214:	b5f0      	push	{r4, r5, r6, r7, lr}
10040216:	46de      	mov	lr, fp
10040218:	4645      	mov	r5, r8
1004021a:	4657      	mov	r7, sl
1004021c:	464e      	mov	r6, r9
1004021e:	b5e0      	push	{r5, r6, r7, lr}
10040220:	b087      	sub	sp, #28
10040222:	9200      	str	r2, [sp, #0]
10040224:	9301      	str	r3, [sp, #4]
10040226:	030b      	lsls	r3, r1, #12
10040228:	0b1b      	lsrs	r3, r3, #12
1004022a:	469b      	mov	fp, r3
1004022c:	0fca      	lsrs	r2, r1, #31
1004022e:	004b      	lsls	r3, r1, #1
10040230:	0004      	movs	r4, r0
10040232:	4680      	mov	r8, r0
10040234:	0d5b      	lsrs	r3, r3, #21
10040236:	9202      	str	r2, [sp, #8]
10040238:	d100      	bne.n	1004023c <__aeabi_ddiv+0x28>
1004023a:	e098      	b.n	1004036e <__aeabi_ddiv+0x15a>
1004023c:	4a7c      	ldr	r2, [pc, #496]	@ (10040430 <__aeabi_ddiv+0x21c>)
1004023e:	4293      	cmp	r3, r2
10040240:	d037      	beq.n	100402b2 <__aeabi_ddiv+0x9e>
10040242:	4659      	mov	r1, fp
10040244:	0f42      	lsrs	r2, r0, #29
10040246:	00c9      	lsls	r1, r1, #3
10040248:	430a      	orrs	r2, r1
1004024a:	2180      	movs	r1, #128	@ 0x80
1004024c:	0409      	lsls	r1, r1, #16
1004024e:	4311      	orrs	r1, r2
10040250:	00c2      	lsls	r2, r0, #3
10040252:	4690      	mov	r8, r2
10040254:	4a77      	ldr	r2, [pc, #476]	@ (10040434 <__aeabi_ddiv+0x220>)
10040256:	4689      	mov	r9, r1
10040258:	4692      	mov	sl, r2
1004025a:	449a      	add	sl, r3
1004025c:	2300      	movs	r3, #0
1004025e:	2400      	movs	r4, #0
10040260:	9303      	str	r3, [sp, #12]
10040262:	9e00      	ldr	r6, [sp, #0]
10040264:	9f01      	ldr	r7, [sp, #4]
10040266:	033b      	lsls	r3, r7, #12
10040268:	0b1b      	lsrs	r3, r3, #12
1004026a:	469b      	mov	fp, r3
1004026c:	007b      	lsls	r3, r7, #1
1004026e:	0030      	movs	r0, r6
10040270:	0d5b      	lsrs	r3, r3, #21
10040272:	0ffd      	lsrs	r5, r7, #31
10040274:	2b00      	cmp	r3, #0
10040276:	d059      	beq.n	1004032c <__aeabi_ddiv+0x118>
10040278:	4a6d      	ldr	r2, [pc, #436]	@ (10040430 <__aeabi_ddiv+0x21c>)
1004027a:	4293      	cmp	r3, r2
1004027c:	d048      	beq.n	10040310 <__aeabi_ddiv+0xfc>
1004027e:	4659      	mov	r1, fp
10040280:	0f72      	lsrs	r2, r6, #29
10040282:	00c9      	lsls	r1, r1, #3
10040284:	430a      	orrs	r2, r1
10040286:	2180      	movs	r1, #128	@ 0x80
10040288:	0409      	lsls	r1, r1, #16
1004028a:	4311      	orrs	r1, r2
1004028c:	468b      	mov	fp, r1
1004028e:	4969      	ldr	r1, [pc, #420]	@ (10040434 <__aeabi_ddiv+0x220>)
10040290:	00f2      	lsls	r2, r6, #3
10040292:	468c      	mov	ip, r1
10040294:	4651      	mov	r1, sl
10040296:	4463      	add	r3, ip
10040298:	1acb      	subs	r3, r1, r3
1004029a:	469a      	mov	sl, r3
1004029c:	2100      	movs	r1, #0
1004029e:	9e02      	ldr	r6, [sp, #8]
100402a0:	406e      	eors	r6, r5
100402a2:	b2f6      	uxtb	r6, r6
100402a4:	2c0f      	cmp	r4, #15
100402a6:	d900      	bls.n	100402aa <__aeabi_ddiv+0x96>
100402a8:	e0ce      	b.n	10040448 <__aeabi_ddiv+0x234>
100402aa:	4b63      	ldr	r3, [pc, #396]	@ (10040438 <__aeabi_ddiv+0x224>)
100402ac:	00a4      	lsls	r4, r4, #2
100402ae:	591b      	ldr	r3, [r3, r4]
100402b0:	469f      	mov	pc, r3
100402b2:	465a      	mov	r2, fp
100402b4:	4302      	orrs	r2, r0
100402b6:	4691      	mov	r9, r2
100402b8:	d000      	beq.n	100402bc <__aeabi_ddiv+0xa8>
100402ba:	e090      	b.n	100403de <__aeabi_ddiv+0x1ca>
100402bc:	469a      	mov	sl, r3
100402be:	2302      	movs	r3, #2
100402c0:	4690      	mov	r8, r2
100402c2:	2408      	movs	r4, #8
100402c4:	9303      	str	r3, [sp, #12]
100402c6:	e7cc      	b.n	10040262 <__aeabi_ddiv+0x4e>
100402c8:	46cb      	mov	fp, r9
100402ca:	4642      	mov	r2, r8
100402cc:	9d02      	ldr	r5, [sp, #8]
100402ce:	9903      	ldr	r1, [sp, #12]
100402d0:	2902      	cmp	r1, #2
100402d2:	d100      	bne.n	100402d6 <__aeabi_ddiv+0xc2>
100402d4:	e1de      	b.n	10040694 <__aeabi_ddiv+0x480>
100402d6:	2903      	cmp	r1, #3
100402d8:	d100      	bne.n	100402dc <__aeabi_ddiv+0xc8>
100402da:	e08d      	b.n	100403f8 <__aeabi_ddiv+0x1e4>
100402dc:	2901      	cmp	r1, #1
100402de:	d000      	beq.n	100402e2 <__aeabi_ddiv+0xce>
100402e0:	e179      	b.n	100405d6 <__aeabi_ddiv+0x3c2>
100402e2:	002e      	movs	r6, r5
100402e4:	2200      	movs	r2, #0
100402e6:	2300      	movs	r3, #0
100402e8:	2400      	movs	r4, #0
100402ea:	4690      	mov	r8, r2
100402ec:	051b      	lsls	r3, r3, #20
100402ee:	4323      	orrs	r3, r4
100402f0:	07f6      	lsls	r6, r6, #31
100402f2:	4333      	orrs	r3, r6
100402f4:	4640      	mov	r0, r8
100402f6:	0019      	movs	r1, r3
100402f8:	b007      	add	sp, #28
100402fa:	bcf0      	pop	{r4, r5, r6, r7}
100402fc:	46bb      	mov	fp, r7
100402fe:	46b2      	mov	sl, r6
10040300:	46a9      	mov	r9, r5
10040302:	46a0      	mov	r8, r4
10040304:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040306:	2200      	movs	r2, #0
10040308:	2400      	movs	r4, #0
1004030a:	4690      	mov	r8, r2
1004030c:	4b48      	ldr	r3, [pc, #288]	@ (10040430 <__aeabi_ddiv+0x21c>)
1004030e:	e7ed      	b.n	100402ec <__aeabi_ddiv+0xd8>
10040310:	465a      	mov	r2, fp
10040312:	9b00      	ldr	r3, [sp, #0]
10040314:	431a      	orrs	r2, r3
10040316:	4b49      	ldr	r3, [pc, #292]	@ (1004043c <__aeabi_ddiv+0x228>)
10040318:	469c      	mov	ip, r3
1004031a:	44e2      	add	sl, ip
1004031c:	2a00      	cmp	r2, #0
1004031e:	d159      	bne.n	100403d4 <__aeabi_ddiv+0x1c0>
10040320:	2302      	movs	r3, #2
10040322:	431c      	orrs	r4, r3
10040324:	2300      	movs	r3, #0
10040326:	2102      	movs	r1, #2
10040328:	469b      	mov	fp, r3
1004032a:	e7b8      	b.n	1004029e <__aeabi_ddiv+0x8a>
1004032c:	465a      	mov	r2, fp
1004032e:	9b00      	ldr	r3, [sp, #0]
10040330:	431a      	orrs	r2, r3
10040332:	d049      	beq.n	100403c8 <__aeabi_ddiv+0x1b4>
10040334:	465b      	mov	r3, fp
10040336:	2b00      	cmp	r3, #0
10040338:	d100      	bne.n	1004033c <__aeabi_ddiv+0x128>
1004033a:	e19c      	b.n	10040676 <__aeabi_ddiv+0x462>
1004033c:	4658      	mov	r0, fp
1004033e:	f000 ff33 	bl	100411a8 <__clzsi2>
10040342:	0002      	movs	r2, r0
10040344:	0003      	movs	r3, r0
10040346:	3a0b      	subs	r2, #11
10040348:	271d      	movs	r7, #29
1004034a:	9e00      	ldr	r6, [sp, #0]
1004034c:	1aba      	subs	r2, r7, r2
1004034e:	0019      	movs	r1, r3
10040350:	4658      	mov	r0, fp
10040352:	40d6      	lsrs	r6, r2
10040354:	3908      	subs	r1, #8
10040356:	4088      	lsls	r0, r1
10040358:	0032      	movs	r2, r6
1004035a:	4302      	orrs	r2, r0
1004035c:	4693      	mov	fp, r2
1004035e:	9a00      	ldr	r2, [sp, #0]
10040360:	408a      	lsls	r2, r1
10040362:	4937      	ldr	r1, [pc, #220]	@ (10040440 <__aeabi_ddiv+0x22c>)
10040364:	4453      	add	r3, sl
10040366:	468a      	mov	sl, r1
10040368:	2100      	movs	r1, #0
1004036a:	449a      	add	sl, r3
1004036c:	e797      	b.n	1004029e <__aeabi_ddiv+0x8a>
1004036e:	465b      	mov	r3, fp
10040370:	4303      	orrs	r3, r0
10040372:	4699      	mov	r9, r3
10040374:	d021      	beq.n	100403ba <__aeabi_ddiv+0x1a6>
10040376:	465b      	mov	r3, fp
10040378:	2b00      	cmp	r3, #0
1004037a:	d100      	bne.n	1004037e <__aeabi_ddiv+0x16a>
1004037c:	e169      	b.n	10040652 <__aeabi_ddiv+0x43e>
1004037e:	4658      	mov	r0, fp
10040380:	f000 ff12 	bl	100411a8 <__clzsi2>
10040384:	230b      	movs	r3, #11
10040386:	425b      	negs	r3, r3
10040388:	469c      	mov	ip, r3
1004038a:	0002      	movs	r2, r0
1004038c:	4484      	add	ip, r0
1004038e:	4666      	mov	r6, ip
10040390:	231d      	movs	r3, #29
10040392:	1b9b      	subs	r3, r3, r6
10040394:	0026      	movs	r6, r4
10040396:	0011      	movs	r1, r2
10040398:	4658      	mov	r0, fp
1004039a:	40de      	lsrs	r6, r3
1004039c:	3908      	subs	r1, #8
1004039e:	4088      	lsls	r0, r1
100403a0:	0033      	movs	r3, r6
100403a2:	4303      	orrs	r3, r0
100403a4:	4699      	mov	r9, r3
100403a6:	0023      	movs	r3, r4
100403a8:	408b      	lsls	r3, r1
100403aa:	4698      	mov	r8, r3
100403ac:	4b25      	ldr	r3, [pc, #148]	@ (10040444 <__aeabi_ddiv+0x230>)
100403ae:	2400      	movs	r4, #0
100403b0:	1a9b      	subs	r3, r3, r2
100403b2:	469a      	mov	sl, r3
100403b4:	2300      	movs	r3, #0
100403b6:	9303      	str	r3, [sp, #12]
100403b8:	e753      	b.n	10040262 <__aeabi_ddiv+0x4e>
100403ba:	2300      	movs	r3, #0
100403bc:	4698      	mov	r8, r3
100403be:	469a      	mov	sl, r3
100403c0:	3301      	adds	r3, #1
100403c2:	2404      	movs	r4, #4
100403c4:	9303      	str	r3, [sp, #12]
100403c6:	e74c      	b.n	10040262 <__aeabi_ddiv+0x4e>
100403c8:	2301      	movs	r3, #1
100403ca:	431c      	orrs	r4, r3
100403cc:	2300      	movs	r3, #0
100403ce:	2101      	movs	r1, #1
100403d0:	469b      	mov	fp, r3
100403d2:	e764      	b.n	1004029e <__aeabi_ddiv+0x8a>
100403d4:	2303      	movs	r3, #3
100403d6:	0032      	movs	r2, r6
100403d8:	2103      	movs	r1, #3
100403da:	431c      	orrs	r4, r3
100403dc:	e75f      	b.n	1004029e <__aeabi_ddiv+0x8a>
100403de:	469a      	mov	sl, r3
100403e0:	2303      	movs	r3, #3
100403e2:	46d9      	mov	r9, fp
100403e4:	240c      	movs	r4, #12
100403e6:	9303      	str	r3, [sp, #12]
100403e8:	e73b      	b.n	10040262 <__aeabi_ddiv+0x4e>
100403ea:	2300      	movs	r3, #0
100403ec:	2480      	movs	r4, #128	@ 0x80
100403ee:	4698      	mov	r8, r3
100403f0:	2600      	movs	r6, #0
100403f2:	4b0f      	ldr	r3, [pc, #60]	@ (10040430 <__aeabi_ddiv+0x21c>)
100403f4:	0324      	lsls	r4, r4, #12
100403f6:	e779      	b.n	100402ec <__aeabi_ddiv+0xd8>
100403f8:	2480      	movs	r4, #128	@ 0x80
100403fa:	465b      	mov	r3, fp
100403fc:	0324      	lsls	r4, r4, #12
100403fe:	431c      	orrs	r4, r3
10040400:	0324      	lsls	r4, r4, #12
10040402:	002e      	movs	r6, r5
10040404:	4690      	mov	r8, r2
10040406:	4b0a      	ldr	r3, [pc, #40]	@ (10040430 <__aeabi_ddiv+0x21c>)
10040408:	0b24      	lsrs	r4, r4, #12
1004040a:	e76f      	b.n	100402ec <__aeabi_ddiv+0xd8>
1004040c:	2480      	movs	r4, #128	@ 0x80
1004040e:	464b      	mov	r3, r9
10040410:	0324      	lsls	r4, r4, #12
10040412:	4223      	tst	r3, r4
10040414:	d002      	beq.n	1004041c <__aeabi_ddiv+0x208>
10040416:	465b      	mov	r3, fp
10040418:	4223      	tst	r3, r4
1004041a:	d0f0      	beq.n	100403fe <__aeabi_ddiv+0x1ea>
1004041c:	2480      	movs	r4, #128	@ 0x80
1004041e:	464b      	mov	r3, r9
10040420:	0324      	lsls	r4, r4, #12
10040422:	431c      	orrs	r4, r3
10040424:	0324      	lsls	r4, r4, #12
10040426:	9e02      	ldr	r6, [sp, #8]
10040428:	4b01      	ldr	r3, [pc, #4]	@ (10040430 <__aeabi_ddiv+0x21c>)
1004042a:	0b24      	lsrs	r4, r4, #12
1004042c:	e75e      	b.n	100402ec <__aeabi_ddiv+0xd8>
1004042e:	46c0      	nop			@ (mov r8, r8)
10040430:	000007ff 	.word	0x000007ff
10040434:	fffffc01 	.word	0xfffffc01
10040438:	1004447c 	.word	0x1004447c
1004043c:	fffff801 	.word	0xfffff801
10040440:	000003f3 	.word	0x000003f3
10040444:	fffffc0d 	.word	0xfffffc0d
10040448:	45cb      	cmp	fp, r9
1004044a:	d200      	bcs.n	1004044e <__aeabi_ddiv+0x23a>
1004044c:	e0f8      	b.n	10040640 <__aeabi_ddiv+0x42c>
1004044e:	d100      	bne.n	10040452 <__aeabi_ddiv+0x23e>
10040450:	e0f3      	b.n	1004063a <__aeabi_ddiv+0x426>
10040452:	2301      	movs	r3, #1
10040454:	425b      	negs	r3, r3
10040456:	469c      	mov	ip, r3
10040458:	4644      	mov	r4, r8
1004045a:	4648      	mov	r0, r9
1004045c:	2500      	movs	r5, #0
1004045e:	44e2      	add	sl, ip
10040460:	465b      	mov	r3, fp
10040462:	0e17      	lsrs	r7, r2, #24
10040464:	021b      	lsls	r3, r3, #8
10040466:	431f      	orrs	r7, r3
10040468:	0c19      	lsrs	r1, r3, #16
1004046a:	043b      	lsls	r3, r7, #16
1004046c:	0212      	lsls	r2, r2, #8
1004046e:	9700      	str	r7, [sp, #0]
10040470:	0c1f      	lsrs	r7, r3, #16
10040472:	4691      	mov	r9, r2
10040474:	9102      	str	r1, [sp, #8]
10040476:	9703      	str	r7, [sp, #12]
10040478:	f7ff fea8 	bl	100401cc <__aeabi_uidivmod>
1004047c:	0002      	movs	r2, r0
1004047e:	437a      	muls	r2, r7
10040480:	040b      	lsls	r3, r1, #16
10040482:	0c21      	lsrs	r1, r4, #16
10040484:	4680      	mov	r8, r0
10040486:	4319      	orrs	r1, r3
10040488:	428a      	cmp	r2, r1
1004048a:	d909      	bls.n	100404a0 <__aeabi_ddiv+0x28c>
1004048c:	9f00      	ldr	r7, [sp, #0]
1004048e:	2301      	movs	r3, #1
10040490:	46bc      	mov	ip, r7
10040492:	425b      	negs	r3, r3
10040494:	4461      	add	r1, ip
10040496:	469c      	mov	ip, r3
10040498:	44e0      	add	r8, ip
1004049a:	428f      	cmp	r7, r1
1004049c:	d800      	bhi.n	100404a0 <__aeabi_ddiv+0x28c>
1004049e:	e15c      	b.n	1004075a <__aeabi_ddiv+0x546>
100404a0:	1a88      	subs	r0, r1, r2
100404a2:	9902      	ldr	r1, [sp, #8]
100404a4:	f7ff fe92 	bl	100401cc <__aeabi_uidivmod>
100404a8:	9a03      	ldr	r2, [sp, #12]
100404aa:	0424      	lsls	r4, r4, #16
100404ac:	4342      	muls	r2, r0
100404ae:	0409      	lsls	r1, r1, #16
100404b0:	0c24      	lsrs	r4, r4, #16
100404b2:	0003      	movs	r3, r0
100404b4:	430c      	orrs	r4, r1
100404b6:	42a2      	cmp	r2, r4
100404b8:	d906      	bls.n	100404c8 <__aeabi_ddiv+0x2b4>
100404ba:	9900      	ldr	r1, [sp, #0]
100404bc:	3b01      	subs	r3, #1
100404be:	468c      	mov	ip, r1
100404c0:	4464      	add	r4, ip
100404c2:	42a1      	cmp	r1, r4
100404c4:	d800      	bhi.n	100404c8 <__aeabi_ddiv+0x2b4>
100404c6:	e142      	b.n	1004074e <__aeabi_ddiv+0x53a>
100404c8:	1aa0      	subs	r0, r4, r2
100404ca:	4642      	mov	r2, r8
100404cc:	0412      	lsls	r2, r2, #16
100404ce:	431a      	orrs	r2, r3
100404d0:	4693      	mov	fp, r2
100404d2:	464b      	mov	r3, r9
100404d4:	4659      	mov	r1, fp
100404d6:	0c1b      	lsrs	r3, r3, #16
100404d8:	001f      	movs	r7, r3
100404da:	9304      	str	r3, [sp, #16]
100404dc:	040b      	lsls	r3, r1, #16
100404de:	4649      	mov	r1, r9
100404e0:	0409      	lsls	r1, r1, #16
100404e2:	0c09      	lsrs	r1, r1, #16
100404e4:	000c      	movs	r4, r1
100404e6:	0c1b      	lsrs	r3, r3, #16
100404e8:	435c      	muls	r4, r3
100404ea:	0c12      	lsrs	r2, r2, #16
100404ec:	437b      	muls	r3, r7
100404ee:	4688      	mov	r8, r1
100404f0:	4351      	muls	r1, r2
100404f2:	437a      	muls	r2, r7
100404f4:	0c27      	lsrs	r7, r4, #16
100404f6:	46bc      	mov	ip, r7
100404f8:	185b      	adds	r3, r3, r1
100404fa:	4463      	add	r3, ip
100404fc:	4299      	cmp	r1, r3
100404fe:	d903      	bls.n	10040508 <__aeabi_ddiv+0x2f4>
10040500:	2180      	movs	r1, #128	@ 0x80
10040502:	0249      	lsls	r1, r1, #9
10040504:	468c      	mov	ip, r1
10040506:	4462      	add	r2, ip
10040508:	0c19      	lsrs	r1, r3, #16
1004050a:	0424      	lsls	r4, r4, #16
1004050c:	041b      	lsls	r3, r3, #16
1004050e:	0c24      	lsrs	r4, r4, #16
10040510:	188a      	adds	r2, r1, r2
10040512:	191c      	adds	r4, r3, r4
10040514:	4290      	cmp	r0, r2
10040516:	d302      	bcc.n	1004051e <__aeabi_ddiv+0x30a>
10040518:	d116      	bne.n	10040548 <__aeabi_ddiv+0x334>
1004051a:	42a5      	cmp	r5, r4
1004051c:	d214      	bcs.n	10040548 <__aeabi_ddiv+0x334>
1004051e:	465b      	mov	r3, fp
10040520:	9f00      	ldr	r7, [sp, #0]
10040522:	3b01      	subs	r3, #1
10040524:	444d      	add	r5, r9
10040526:	9305      	str	r3, [sp, #20]
10040528:	454d      	cmp	r5, r9
1004052a:	419b      	sbcs	r3, r3
1004052c:	46bc      	mov	ip, r7
1004052e:	425b      	negs	r3, r3
10040530:	4463      	add	r3, ip
10040532:	18c0      	adds	r0, r0, r3
10040534:	4287      	cmp	r7, r0
10040536:	d300      	bcc.n	1004053a <__aeabi_ddiv+0x326>
10040538:	e102      	b.n	10040740 <__aeabi_ddiv+0x52c>
1004053a:	4282      	cmp	r2, r0
1004053c:	d900      	bls.n	10040540 <__aeabi_ddiv+0x32c>
1004053e:	e129      	b.n	10040794 <__aeabi_ddiv+0x580>
10040540:	d100      	bne.n	10040544 <__aeabi_ddiv+0x330>
10040542:	e124      	b.n	1004078e <__aeabi_ddiv+0x57a>
10040544:	9b05      	ldr	r3, [sp, #20]
10040546:	469b      	mov	fp, r3
10040548:	1b2c      	subs	r4, r5, r4
1004054a:	42a5      	cmp	r5, r4
1004054c:	41ad      	sbcs	r5, r5
1004054e:	9b00      	ldr	r3, [sp, #0]
10040550:	1a80      	subs	r0, r0, r2
10040552:	426d      	negs	r5, r5
10040554:	1b40      	subs	r0, r0, r5
10040556:	4283      	cmp	r3, r0
10040558:	d100      	bne.n	1004055c <__aeabi_ddiv+0x348>
1004055a:	e10f      	b.n	1004077c <__aeabi_ddiv+0x568>
1004055c:	9902      	ldr	r1, [sp, #8]
1004055e:	f7ff fe35 	bl	100401cc <__aeabi_uidivmod>
10040562:	9a03      	ldr	r2, [sp, #12]
10040564:	040b      	lsls	r3, r1, #16
10040566:	4342      	muls	r2, r0
10040568:	0c21      	lsrs	r1, r4, #16
1004056a:	0005      	movs	r5, r0
1004056c:	4319      	orrs	r1, r3
1004056e:	428a      	cmp	r2, r1
10040570:	d900      	bls.n	10040574 <__aeabi_ddiv+0x360>
10040572:	e0cb      	b.n	1004070c <__aeabi_ddiv+0x4f8>
10040574:	1a88      	subs	r0, r1, r2
10040576:	9902      	ldr	r1, [sp, #8]
10040578:	f7ff fe28 	bl	100401cc <__aeabi_uidivmod>
1004057c:	9a03      	ldr	r2, [sp, #12]
1004057e:	0424      	lsls	r4, r4, #16
10040580:	4342      	muls	r2, r0
10040582:	0409      	lsls	r1, r1, #16
10040584:	0c24      	lsrs	r4, r4, #16
10040586:	0003      	movs	r3, r0
10040588:	430c      	orrs	r4, r1
1004058a:	42a2      	cmp	r2, r4
1004058c:	d900      	bls.n	10040590 <__aeabi_ddiv+0x37c>
1004058e:	e0ca      	b.n	10040726 <__aeabi_ddiv+0x512>
10040590:	4641      	mov	r1, r8
10040592:	1aa4      	subs	r4, r4, r2
10040594:	042a      	lsls	r2, r5, #16
10040596:	431a      	orrs	r2, r3
10040598:	9f04      	ldr	r7, [sp, #16]
1004059a:	0413      	lsls	r3, r2, #16
1004059c:	0c1b      	lsrs	r3, r3, #16
1004059e:	4359      	muls	r1, r3
100405a0:	4640      	mov	r0, r8
100405a2:	437b      	muls	r3, r7
100405a4:	469c      	mov	ip, r3
100405a6:	0c15      	lsrs	r5, r2, #16
100405a8:	4368      	muls	r0, r5
100405aa:	0c0b      	lsrs	r3, r1, #16
100405ac:	4484      	add	ip, r0
100405ae:	4463      	add	r3, ip
100405b0:	437d      	muls	r5, r7
100405b2:	4298      	cmp	r0, r3
100405b4:	d903      	bls.n	100405be <__aeabi_ddiv+0x3aa>
100405b6:	2080      	movs	r0, #128	@ 0x80
100405b8:	0240      	lsls	r0, r0, #9
100405ba:	4684      	mov	ip, r0
100405bc:	4465      	add	r5, ip
100405be:	0c18      	lsrs	r0, r3, #16
100405c0:	0409      	lsls	r1, r1, #16
100405c2:	041b      	lsls	r3, r3, #16
100405c4:	0c09      	lsrs	r1, r1, #16
100405c6:	1940      	adds	r0, r0, r5
100405c8:	185b      	adds	r3, r3, r1
100405ca:	4284      	cmp	r4, r0
100405cc:	d327      	bcc.n	1004061e <__aeabi_ddiv+0x40a>
100405ce:	d023      	beq.n	10040618 <__aeabi_ddiv+0x404>
100405d0:	2301      	movs	r3, #1
100405d2:	0035      	movs	r5, r6
100405d4:	431a      	orrs	r2, r3
100405d6:	4b94      	ldr	r3, [pc, #592]	@ (10040828 <__aeabi_ddiv+0x614>)
100405d8:	4453      	add	r3, sl
100405da:	2b00      	cmp	r3, #0
100405dc:	dd60      	ble.n	100406a0 <__aeabi_ddiv+0x48c>
100405de:	0751      	lsls	r1, r2, #29
100405e0:	d000      	beq.n	100405e4 <__aeabi_ddiv+0x3d0>
100405e2:	e086      	b.n	100406f2 <__aeabi_ddiv+0x4de>
100405e4:	002e      	movs	r6, r5
100405e6:	08d1      	lsrs	r1, r2, #3
100405e8:	465a      	mov	r2, fp
100405ea:	01d2      	lsls	r2, r2, #7
100405ec:	d506      	bpl.n	100405fc <__aeabi_ddiv+0x3e8>
100405ee:	465a      	mov	r2, fp
100405f0:	4b8e      	ldr	r3, [pc, #568]	@ (1004082c <__aeabi_ddiv+0x618>)
100405f2:	401a      	ands	r2, r3
100405f4:	2380      	movs	r3, #128	@ 0x80
100405f6:	4693      	mov	fp, r2
100405f8:	00db      	lsls	r3, r3, #3
100405fa:	4453      	add	r3, sl
100405fc:	4a8c      	ldr	r2, [pc, #560]	@ (10040830 <__aeabi_ddiv+0x61c>)
100405fe:	4293      	cmp	r3, r2
10040600:	dd00      	ble.n	10040604 <__aeabi_ddiv+0x3f0>
10040602:	e680      	b.n	10040306 <__aeabi_ddiv+0xf2>
10040604:	465a      	mov	r2, fp
10040606:	0752      	lsls	r2, r2, #29
10040608:	430a      	orrs	r2, r1
1004060a:	4690      	mov	r8, r2
1004060c:	465a      	mov	r2, fp
1004060e:	055b      	lsls	r3, r3, #21
10040610:	0254      	lsls	r4, r2, #9
10040612:	0b24      	lsrs	r4, r4, #12
10040614:	0d5b      	lsrs	r3, r3, #21
10040616:	e669      	b.n	100402ec <__aeabi_ddiv+0xd8>
10040618:	0035      	movs	r5, r6
1004061a:	2b00      	cmp	r3, #0
1004061c:	d0db      	beq.n	100405d6 <__aeabi_ddiv+0x3c2>
1004061e:	9d00      	ldr	r5, [sp, #0]
10040620:	1e51      	subs	r1, r2, #1
10040622:	46ac      	mov	ip, r5
10040624:	4464      	add	r4, ip
10040626:	42ac      	cmp	r4, r5
10040628:	d200      	bcs.n	1004062c <__aeabi_ddiv+0x418>
1004062a:	e09e      	b.n	1004076a <__aeabi_ddiv+0x556>
1004062c:	4284      	cmp	r4, r0
1004062e:	d200      	bcs.n	10040632 <__aeabi_ddiv+0x41e>
10040630:	e0e1      	b.n	100407f6 <__aeabi_ddiv+0x5e2>
10040632:	d100      	bne.n	10040636 <__aeabi_ddiv+0x422>
10040634:	e0ee      	b.n	10040814 <__aeabi_ddiv+0x600>
10040636:	000a      	movs	r2, r1
10040638:	e7ca      	b.n	100405d0 <__aeabi_ddiv+0x3bc>
1004063a:	4542      	cmp	r2, r8
1004063c:	d900      	bls.n	10040640 <__aeabi_ddiv+0x42c>
1004063e:	e708      	b.n	10040452 <__aeabi_ddiv+0x23e>
10040640:	464b      	mov	r3, r9
10040642:	07dc      	lsls	r4, r3, #31
10040644:	0858      	lsrs	r0, r3, #1
10040646:	4643      	mov	r3, r8
10040648:	085b      	lsrs	r3, r3, #1
1004064a:	431c      	orrs	r4, r3
1004064c:	4643      	mov	r3, r8
1004064e:	07dd      	lsls	r5, r3, #31
10040650:	e706      	b.n	10040460 <__aeabi_ddiv+0x24c>
10040652:	f000 fda9 	bl	100411a8 <__clzsi2>
10040656:	2315      	movs	r3, #21
10040658:	469c      	mov	ip, r3
1004065a:	4484      	add	ip, r0
1004065c:	0002      	movs	r2, r0
1004065e:	4663      	mov	r3, ip
10040660:	3220      	adds	r2, #32
10040662:	2b1c      	cmp	r3, #28
10040664:	dc00      	bgt.n	10040668 <__aeabi_ddiv+0x454>
10040666:	e692      	b.n	1004038e <__aeabi_ddiv+0x17a>
10040668:	0023      	movs	r3, r4
1004066a:	3808      	subs	r0, #8
1004066c:	4083      	lsls	r3, r0
1004066e:	4699      	mov	r9, r3
10040670:	2300      	movs	r3, #0
10040672:	4698      	mov	r8, r3
10040674:	e69a      	b.n	100403ac <__aeabi_ddiv+0x198>
10040676:	f000 fd97 	bl	100411a8 <__clzsi2>
1004067a:	0002      	movs	r2, r0
1004067c:	0003      	movs	r3, r0
1004067e:	3215      	adds	r2, #21
10040680:	3320      	adds	r3, #32
10040682:	2a1c      	cmp	r2, #28
10040684:	dc00      	bgt.n	10040688 <__aeabi_ddiv+0x474>
10040686:	e65f      	b.n	10040348 <__aeabi_ddiv+0x134>
10040688:	9900      	ldr	r1, [sp, #0]
1004068a:	3808      	subs	r0, #8
1004068c:	4081      	lsls	r1, r0
1004068e:	2200      	movs	r2, #0
10040690:	468b      	mov	fp, r1
10040692:	e666      	b.n	10040362 <__aeabi_ddiv+0x14e>
10040694:	2200      	movs	r2, #0
10040696:	002e      	movs	r6, r5
10040698:	2400      	movs	r4, #0
1004069a:	4690      	mov	r8, r2
1004069c:	4b65      	ldr	r3, [pc, #404]	@ (10040834 <__aeabi_ddiv+0x620>)
1004069e:	e625      	b.n	100402ec <__aeabi_ddiv+0xd8>
100406a0:	002e      	movs	r6, r5
100406a2:	2101      	movs	r1, #1
100406a4:	1ac9      	subs	r1, r1, r3
100406a6:	2938      	cmp	r1, #56	@ 0x38
100406a8:	dd00      	ble.n	100406ac <__aeabi_ddiv+0x498>
100406aa:	e61b      	b.n	100402e4 <__aeabi_ddiv+0xd0>
100406ac:	291f      	cmp	r1, #31
100406ae:	dc7e      	bgt.n	100407ae <__aeabi_ddiv+0x59a>
100406b0:	4861      	ldr	r0, [pc, #388]	@ (10040838 <__aeabi_ddiv+0x624>)
100406b2:	0014      	movs	r4, r2
100406b4:	4450      	add	r0, sl
100406b6:	465b      	mov	r3, fp
100406b8:	4082      	lsls	r2, r0
100406ba:	4083      	lsls	r3, r0
100406bc:	40cc      	lsrs	r4, r1
100406be:	1e50      	subs	r0, r2, #1
100406c0:	4182      	sbcs	r2, r0
100406c2:	4323      	orrs	r3, r4
100406c4:	431a      	orrs	r2, r3
100406c6:	465b      	mov	r3, fp
100406c8:	40cb      	lsrs	r3, r1
100406ca:	0751      	lsls	r1, r2, #29
100406cc:	d009      	beq.n	100406e2 <__aeabi_ddiv+0x4ce>
100406ce:	210f      	movs	r1, #15
100406d0:	4011      	ands	r1, r2
100406d2:	2904      	cmp	r1, #4
100406d4:	d005      	beq.n	100406e2 <__aeabi_ddiv+0x4ce>
100406d6:	1d11      	adds	r1, r2, #4
100406d8:	4291      	cmp	r1, r2
100406da:	4192      	sbcs	r2, r2
100406dc:	4252      	negs	r2, r2
100406de:	189b      	adds	r3, r3, r2
100406e0:	000a      	movs	r2, r1
100406e2:	0219      	lsls	r1, r3, #8
100406e4:	d400      	bmi.n	100406e8 <__aeabi_ddiv+0x4d4>
100406e6:	e09b      	b.n	10040820 <__aeabi_ddiv+0x60c>
100406e8:	2200      	movs	r2, #0
100406ea:	2301      	movs	r3, #1
100406ec:	2400      	movs	r4, #0
100406ee:	4690      	mov	r8, r2
100406f0:	e5fc      	b.n	100402ec <__aeabi_ddiv+0xd8>
100406f2:	210f      	movs	r1, #15
100406f4:	4011      	ands	r1, r2
100406f6:	2904      	cmp	r1, #4
100406f8:	d100      	bne.n	100406fc <__aeabi_ddiv+0x4e8>
100406fa:	e773      	b.n	100405e4 <__aeabi_ddiv+0x3d0>
100406fc:	1d11      	adds	r1, r2, #4
100406fe:	4291      	cmp	r1, r2
10040700:	4192      	sbcs	r2, r2
10040702:	4252      	negs	r2, r2
10040704:	002e      	movs	r6, r5
10040706:	08c9      	lsrs	r1, r1, #3
10040708:	4493      	add	fp, r2
1004070a:	e76d      	b.n	100405e8 <__aeabi_ddiv+0x3d4>
1004070c:	9b00      	ldr	r3, [sp, #0]
1004070e:	3d01      	subs	r5, #1
10040710:	469c      	mov	ip, r3
10040712:	4461      	add	r1, ip
10040714:	428b      	cmp	r3, r1
10040716:	d900      	bls.n	1004071a <__aeabi_ddiv+0x506>
10040718:	e72c      	b.n	10040574 <__aeabi_ddiv+0x360>
1004071a:	428a      	cmp	r2, r1
1004071c:	d800      	bhi.n	10040720 <__aeabi_ddiv+0x50c>
1004071e:	e729      	b.n	10040574 <__aeabi_ddiv+0x360>
10040720:	1e85      	subs	r5, r0, #2
10040722:	4461      	add	r1, ip
10040724:	e726      	b.n	10040574 <__aeabi_ddiv+0x360>
10040726:	9900      	ldr	r1, [sp, #0]
10040728:	3b01      	subs	r3, #1
1004072a:	468c      	mov	ip, r1
1004072c:	4464      	add	r4, ip
1004072e:	42a1      	cmp	r1, r4
10040730:	d900      	bls.n	10040734 <__aeabi_ddiv+0x520>
10040732:	e72d      	b.n	10040590 <__aeabi_ddiv+0x37c>
10040734:	42a2      	cmp	r2, r4
10040736:	d800      	bhi.n	1004073a <__aeabi_ddiv+0x526>
10040738:	e72a      	b.n	10040590 <__aeabi_ddiv+0x37c>
1004073a:	1e83      	subs	r3, r0, #2
1004073c:	4464      	add	r4, ip
1004073e:	e727      	b.n	10040590 <__aeabi_ddiv+0x37c>
10040740:	4287      	cmp	r7, r0
10040742:	d000      	beq.n	10040746 <__aeabi_ddiv+0x532>
10040744:	e6fe      	b.n	10040544 <__aeabi_ddiv+0x330>
10040746:	45a9      	cmp	r9, r5
10040748:	d900      	bls.n	1004074c <__aeabi_ddiv+0x538>
1004074a:	e6fb      	b.n	10040544 <__aeabi_ddiv+0x330>
1004074c:	e6f5      	b.n	1004053a <__aeabi_ddiv+0x326>
1004074e:	42a2      	cmp	r2, r4
10040750:	d800      	bhi.n	10040754 <__aeabi_ddiv+0x540>
10040752:	e6b9      	b.n	100404c8 <__aeabi_ddiv+0x2b4>
10040754:	1e83      	subs	r3, r0, #2
10040756:	4464      	add	r4, ip
10040758:	e6b6      	b.n	100404c8 <__aeabi_ddiv+0x2b4>
1004075a:	428a      	cmp	r2, r1
1004075c:	d800      	bhi.n	10040760 <__aeabi_ddiv+0x54c>
1004075e:	e69f      	b.n	100404a0 <__aeabi_ddiv+0x28c>
10040760:	46bc      	mov	ip, r7
10040762:	1e83      	subs	r3, r0, #2
10040764:	4698      	mov	r8, r3
10040766:	4461      	add	r1, ip
10040768:	e69a      	b.n	100404a0 <__aeabi_ddiv+0x28c>
1004076a:	000a      	movs	r2, r1
1004076c:	4284      	cmp	r4, r0
1004076e:	d000      	beq.n	10040772 <__aeabi_ddiv+0x55e>
10040770:	e72e      	b.n	100405d0 <__aeabi_ddiv+0x3bc>
10040772:	454b      	cmp	r3, r9
10040774:	d000      	beq.n	10040778 <__aeabi_ddiv+0x564>
10040776:	e72b      	b.n	100405d0 <__aeabi_ddiv+0x3bc>
10040778:	0035      	movs	r5, r6
1004077a:	e72c      	b.n	100405d6 <__aeabi_ddiv+0x3c2>
1004077c:	4b2a      	ldr	r3, [pc, #168]	@ (10040828 <__aeabi_ddiv+0x614>)
1004077e:	4a2f      	ldr	r2, [pc, #188]	@ (1004083c <__aeabi_ddiv+0x628>)
10040780:	4453      	add	r3, sl
10040782:	4592      	cmp	sl, r2
10040784:	db43      	blt.n	1004080e <__aeabi_ddiv+0x5fa>
10040786:	2201      	movs	r2, #1
10040788:	2100      	movs	r1, #0
1004078a:	4493      	add	fp, r2
1004078c:	e72c      	b.n	100405e8 <__aeabi_ddiv+0x3d4>
1004078e:	42ac      	cmp	r4, r5
10040790:	d800      	bhi.n	10040794 <__aeabi_ddiv+0x580>
10040792:	e6d7      	b.n	10040544 <__aeabi_ddiv+0x330>
10040794:	2302      	movs	r3, #2
10040796:	425b      	negs	r3, r3
10040798:	469c      	mov	ip, r3
1004079a:	9900      	ldr	r1, [sp, #0]
1004079c:	444d      	add	r5, r9
1004079e:	454d      	cmp	r5, r9
100407a0:	419b      	sbcs	r3, r3
100407a2:	44e3      	add	fp, ip
100407a4:	468c      	mov	ip, r1
100407a6:	425b      	negs	r3, r3
100407a8:	4463      	add	r3, ip
100407aa:	18c0      	adds	r0, r0, r3
100407ac:	e6cc      	b.n	10040548 <__aeabi_ddiv+0x334>
100407ae:	201f      	movs	r0, #31
100407b0:	4240      	negs	r0, r0
100407b2:	1ac3      	subs	r3, r0, r3
100407b4:	4658      	mov	r0, fp
100407b6:	40d8      	lsrs	r0, r3
100407b8:	2920      	cmp	r1, #32
100407ba:	d004      	beq.n	100407c6 <__aeabi_ddiv+0x5b2>
100407bc:	4659      	mov	r1, fp
100407be:	4b20      	ldr	r3, [pc, #128]	@ (10040840 <__aeabi_ddiv+0x62c>)
100407c0:	4453      	add	r3, sl
100407c2:	4099      	lsls	r1, r3
100407c4:	430a      	orrs	r2, r1
100407c6:	1e53      	subs	r3, r2, #1
100407c8:	419a      	sbcs	r2, r3
100407ca:	2307      	movs	r3, #7
100407cc:	0019      	movs	r1, r3
100407ce:	4302      	orrs	r2, r0
100407d0:	2400      	movs	r4, #0
100407d2:	4011      	ands	r1, r2
100407d4:	4213      	tst	r3, r2
100407d6:	d009      	beq.n	100407ec <__aeabi_ddiv+0x5d8>
100407d8:	3308      	adds	r3, #8
100407da:	4013      	ands	r3, r2
100407dc:	2b04      	cmp	r3, #4
100407de:	d01d      	beq.n	1004081c <__aeabi_ddiv+0x608>
100407e0:	1d13      	adds	r3, r2, #4
100407e2:	4293      	cmp	r3, r2
100407e4:	4189      	sbcs	r1, r1
100407e6:	001a      	movs	r2, r3
100407e8:	4249      	negs	r1, r1
100407ea:	0749      	lsls	r1, r1, #29
100407ec:	08d2      	lsrs	r2, r2, #3
100407ee:	430a      	orrs	r2, r1
100407f0:	4690      	mov	r8, r2
100407f2:	2300      	movs	r3, #0
100407f4:	e57a      	b.n	100402ec <__aeabi_ddiv+0xd8>
100407f6:	4649      	mov	r1, r9
100407f8:	9f00      	ldr	r7, [sp, #0]
100407fa:	004d      	lsls	r5, r1, #1
100407fc:	454d      	cmp	r5, r9
100407fe:	4189      	sbcs	r1, r1
10040800:	46bc      	mov	ip, r7
10040802:	4249      	negs	r1, r1
10040804:	4461      	add	r1, ip
10040806:	46a9      	mov	r9, r5
10040808:	3a02      	subs	r2, #2
1004080a:	1864      	adds	r4, r4, r1
1004080c:	e7ae      	b.n	1004076c <__aeabi_ddiv+0x558>
1004080e:	2201      	movs	r2, #1
10040810:	4252      	negs	r2, r2
10040812:	e746      	b.n	100406a2 <__aeabi_ddiv+0x48e>
10040814:	4599      	cmp	r9, r3
10040816:	d3ee      	bcc.n	100407f6 <__aeabi_ddiv+0x5e2>
10040818:	000a      	movs	r2, r1
1004081a:	e7aa      	b.n	10040772 <__aeabi_ddiv+0x55e>
1004081c:	2100      	movs	r1, #0
1004081e:	e7e5      	b.n	100407ec <__aeabi_ddiv+0x5d8>
10040820:	0759      	lsls	r1, r3, #29
10040822:	025b      	lsls	r3, r3, #9
10040824:	0b1c      	lsrs	r4, r3, #12
10040826:	e7e1      	b.n	100407ec <__aeabi_ddiv+0x5d8>
10040828:	000003ff 	.word	0x000003ff
1004082c:	feffffff 	.word	0xfeffffff
10040830:	000007fe 	.word	0x000007fe
10040834:	000007ff 	.word	0x000007ff
10040838:	0000041e 	.word	0x0000041e
1004083c:	fffffc02 	.word	0xfffffc02
10040840:	0000043e 	.word	0x0000043e

10040844 <__aeabi_dsub>:
10040844:	b5f0      	push	{r4, r5, r6, r7, lr}
10040846:	4657      	mov	r7, sl
10040848:	464e      	mov	r6, r9
1004084a:	4645      	mov	r5, r8
1004084c:	46de      	mov	lr, fp
1004084e:	b5e0      	push	{r5, r6, r7, lr}
10040850:	b083      	sub	sp, #12
10040852:	9000      	str	r0, [sp, #0]
10040854:	9101      	str	r1, [sp, #4]
10040856:	030c      	lsls	r4, r1, #12
10040858:	004d      	lsls	r5, r1, #1
1004085a:	0fce      	lsrs	r6, r1, #31
1004085c:	0a61      	lsrs	r1, r4, #9
1004085e:	9c00      	ldr	r4, [sp, #0]
10040860:	005f      	lsls	r7, r3, #1
10040862:	0f64      	lsrs	r4, r4, #29
10040864:	430c      	orrs	r4, r1
10040866:	9900      	ldr	r1, [sp, #0]
10040868:	9200      	str	r2, [sp, #0]
1004086a:	9301      	str	r3, [sp, #4]
1004086c:	00c8      	lsls	r0, r1, #3
1004086e:	0319      	lsls	r1, r3, #12
10040870:	0d7b      	lsrs	r3, r7, #21
10040872:	4699      	mov	r9, r3
10040874:	9b01      	ldr	r3, [sp, #4]
10040876:	4fcc      	ldr	r7, [pc, #816]	@ (10040ba8 <__aeabi_dsub+0x364>)
10040878:	0fdb      	lsrs	r3, r3, #31
1004087a:	469c      	mov	ip, r3
1004087c:	0a4b      	lsrs	r3, r1, #9
1004087e:	9900      	ldr	r1, [sp, #0]
10040880:	4680      	mov	r8, r0
10040882:	0f49      	lsrs	r1, r1, #29
10040884:	4319      	orrs	r1, r3
10040886:	9b00      	ldr	r3, [sp, #0]
10040888:	468b      	mov	fp, r1
1004088a:	00da      	lsls	r2, r3, #3
1004088c:	4692      	mov	sl, r2
1004088e:	0d6d      	lsrs	r5, r5, #21
10040890:	45b9      	cmp	r9, r7
10040892:	d100      	bne.n	10040896 <__aeabi_dsub+0x52>
10040894:	e0bf      	b.n	10040a16 <__aeabi_dsub+0x1d2>
10040896:	2301      	movs	r3, #1
10040898:	4661      	mov	r1, ip
1004089a:	4059      	eors	r1, r3
1004089c:	464b      	mov	r3, r9
1004089e:	468c      	mov	ip, r1
100408a0:	1aeb      	subs	r3, r5, r3
100408a2:	428e      	cmp	r6, r1
100408a4:	d075      	beq.n	10040992 <__aeabi_dsub+0x14e>
100408a6:	2b00      	cmp	r3, #0
100408a8:	dc00      	bgt.n	100408ac <__aeabi_dsub+0x68>
100408aa:	e2a3      	b.n	10040df4 <__aeabi_dsub+0x5b0>
100408ac:	4649      	mov	r1, r9
100408ae:	2900      	cmp	r1, #0
100408b0:	d100      	bne.n	100408b4 <__aeabi_dsub+0x70>
100408b2:	e0ce      	b.n	10040a52 <__aeabi_dsub+0x20e>
100408b4:	42bd      	cmp	r5, r7
100408b6:	d100      	bne.n	100408ba <__aeabi_dsub+0x76>
100408b8:	e200      	b.n	10040cbc <__aeabi_dsub+0x478>
100408ba:	2701      	movs	r7, #1
100408bc:	2b38      	cmp	r3, #56	@ 0x38
100408be:	dc19      	bgt.n	100408f4 <__aeabi_dsub+0xb0>
100408c0:	2780      	movs	r7, #128	@ 0x80
100408c2:	4659      	mov	r1, fp
100408c4:	043f      	lsls	r7, r7, #16
100408c6:	4339      	orrs	r1, r7
100408c8:	468b      	mov	fp, r1
100408ca:	2b1f      	cmp	r3, #31
100408cc:	dd00      	ble.n	100408d0 <__aeabi_dsub+0x8c>
100408ce:	e1fa      	b.n	10040cc6 <__aeabi_dsub+0x482>
100408d0:	2720      	movs	r7, #32
100408d2:	1af9      	subs	r1, r7, r3
100408d4:	468c      	mov	ip, r1
100408d6:	4659      	mov	r1, fp
100408d8:	4667      	mov	r7, ip
100408da:	40b9      	lsls	r1, r7
100408dc:	000f      	movs	r7, r1
100408de:	0011      	movs	r1, r2
100408e0:	40d9      	lsrs	r1, r3
100408e2:	430f      	orrs	r7, r1
100408e4:	4661      	mov	r1, ip
100408e6:	408a      	lsls	r2, r1
100408e8:	1e51      	subs	r1, r2, #1
100408ea:	418a      	sbcs	r2, r1
100408ec:	4659      	mov	r1, fp
100408ee:	40d9      	lsrs	r1, r3
100408f0:	4317      	orrs	r7, r2
100408f2:	1a64      	subs	r4, r4, r1
100408f4:	1bc7      	subs	r7, r0, r7
100408f6:	42b8      	cmp	r0, r7
100408f8:	4180      	sbcs	r0, r0
100408fa:	4240      	negs	r0, r0
100408fc:	1a24      	subs	r4, r4, r0
100408fe:	0223      	lsls	r3, r4, #8
10040900:	d400      	bmi.n	10040904 <__aeabi_dsub+0xc0>
10040902:	e140      	b.n	10040b86 <__aeabi_dsub+0x342>
10040904:	0264      	lsls	r4, r4, #9
10040906:	0a64      	lsrs	r4, r4, #9
10040908:	2c00      	cmp	r4, #0
1004090a:	d100      	bne.n	1004090e <__aeabi_dsub+0xca>
1004090c:	e154      	b.n	10040bb8 <__aeabi_dsub+0x374>
1004090e:	0020      	movs	r0, r4
10040910:	f000 fc4a 	bl	100411a8 <__clzsi2>
10040914:	0003      	movs	r3, r0
10040916:	3b08      	subs	r3, #8
10040918:	2120      	movs	r1, #32
1004091a:	0038      	movs	r0, r7
1004091c:	1aca      	subs	r2, r1, r3
1004091e:	40d0      	lsrs	r0, r2
10040920:	409c      	lsls	r4, r3
10040922:	0002      	movs	r2, r0
10040924:	409f      	lsls	r7, r3
10040926:	4322      	orrs	r2, r4
10040928:	429d      	cmp	r5, r3
1004092a:	dd00      	ble.n	1004092e <__aeabi_dsub+0xea>
1004092c:	e1a6      	b.n	10040c7c <__aeabi_dsub+0x438>
1004092e:	1b58      	subs	r0, r3, r5
10040930:	3001      	adds	r0, #1
10040932:	1a09      	subs	r1, r1, r0
10040934:	003c      	movs	r4, r7
10040936:	408f      	lsls	r7, r1
10040938:	40c4      	lsrs	r4, r0
1004093a:	1e7b      	subs	r3, r7, #1
1004093c:	419f      	sbcs	r7, r3
1004093e:	0013      	movs	r3, r2
10040940:	408b      	lsls	r3, r1
10040942:	4327      	orrs	r7, r4
10040944:	431f      	orrs	r7, r3
10040946:	40c2      	lsrs	r2, r0
10040948:	003b      	movs	r3, r7
1004094a:	0014      	movs	r4, r2
1004094c:	2500      	movs	r5, #0
1004094e:	4313      	orrs	r3, r2
10040950:	d100      	bne.n	10040954 <__aeabi_dsub+0x110>
10040952:	e1f7      	b.n	10040d44 <__aeabi_dsub+0x500>
10040954:	077b      	lsls	r3, r7, #29
10040956:	d100      	bne.n	1004095a <__aeabi_dsub+0x116>
10040958:	e377      	b.n	1004104a <__aeabi_dsub+0x806>
1004095a:	230f      	movs	r3, #15
1004095c:	0038      	movs	r0, r7
1004095e:	403b      	ands	r3, r7
10040960:	2b04      	cmp	r3, #4
10040962:	d004      	beq.n	1004096e <__aeabi_dsub+0x12a>
10040964:	1d38      	adds	r0, r7, #4
10040966:	42b8      	cmp	r0, r7
10040968:	41bf      	sbcs	r7, r7
1004096a:	427f      	negs	r7, r7
1004096c:	19e4      	adds	r4, r4, r7
1004096e:	0223      	lsls	r3, r4, #8
10040970:	d400      	bmi.n	10040974 <__aeabi_dsub+0x130>
10040972:	e368      	b.n	10041046 <__aeabi_dsub+0x802>
10040974:	4b8c      	ldr	r3, [pc, #560]	@ (10040ba8 <__aeabi_dsub+0x364>)
10040976:	3501      	adds	r5, #1
10040978:	429d      	cmp	r5, r3
1004097a:	d100      	bne.n	1004097e <__aeabi_dsub+0x13a>
1004097c:	e0f4      	b.n	10040b68 <__aeabi_dsub+0x324>
1004097e:	4b8b      	ldr	r3, [pc, #556]	@ (10040bac <__aeabi_dsub+0x368>)
10040980:	056d      	lsls	r5, r5, #21
10040982:	401c      	ands	r4, r3
10040984:	0d6d      	lsrs	r5, r5, #21
10040986:	0767      	lsls	r7, r4, #29
10040988:	08c0      	lsrs	r0, r0, #3
1004098a:	0264      	lsls	r4, r4, #9
1004098c:	4307      	orrs	r7, r0
1004098e:	0b24      	lsrs	r4, r4, #12
10040990:	e0ec      	b.n	10040b6c <__aeabi_dsub+0x328>
10040992:	2b00      	cmp	r3, #0
10040994:	dc00      	bgt.n	10040998 <__aeabi_dsub+0x154>
10040996:	e329      	b.n	10040fec <__aeabi_dsub+0x7a8>
10040998:	4649      	mov	r1, r9
1004099a:	2900      	cmp	r1, #0
1004099c:	d000      	beq.n	100409a0 <__aeabi_dsub+0x15c>
1004099e:	e0d6      	b.n	10040b4e <__aeabi_dsub+0x30a>
100409a0:	4659      	mov	r1, fp
100409a2:	4311      	orrs	r1, r2
100409a4:	d100      	bne.n	100409a8 <__aeabi_dsub+0x164>
100409a6:	e12e      	b.n	10040c06 <__aeabi_dsub+0x3c2>
100409a8:	1e59      	subs	r1, r3, #1
100409aa:	2b01      	cmp	r3, #1
100409ac:	d100      	bne.n	100409b0 <__aeabi_dsub+0x16c>
100409ae:	e1e6      	b.n	10040d7e <__aeabi_dsub+0x53a>
100409b0:	42bb      	cmp	r3, r7
100409b2:	d100      	bne.n	100409b6 <__aeabi_dsub+0x172>
100409b4:	e182      	b.n	10040cbc <__aeabi_dsub+0x478>
100409b6:	2701      	movs	r7, #1
100409b8:	000b      	movs	r3, r1
100409ba:	2938      	cmp	r1, #56	@ 0x38
100409bc:	dc14      	bgt.n	100409e8 <__aeabi_dsub+0x1a4>
100409be:	2b1f      	cmp	r3, #31
100409c0:	dd00      	ble.n	100409c4 <__aeabi_dsub+0x180>
100409c2:	e23c      	b.n	10040e3e <__aeabi_dsub+0x5fa>
100409c4:	2720      	movs	r7, #32
100409c6:	1af9      	subs	r1, r7, r3
100409c8:	468c      	mov	ip, r1
100409ca:	4659      	mov	r1, fp
100409cc:	4667      	mov	r7, ip
100409ce:	40b9      	lsls	r1, r7
100409d0:	000f      	movs	r7, r1
100409d2:	0011      	movs	r1, r2
100409d4:	40d9      	lsrs	r1, r3
100409d6:	430f      	orrs	r7, r1
100409d8:	4661      	mov	r1, ip
100409da:	408a      	lsls	r2, r1
100409dc:	1e51      	subs	r1, r2, #1
100409de:	418a      	sbcs	r2, r1
100409e0:	4659      	mov	r1, fp
100409e2:	40d9      	lsrs	r1, r3
100409e4:	4317      	orrs	r7, r2
100409e6:	1864      	adds	r4, r4, r1
100409e8:	183f      	adds	r7, r7, r0
100409ea:	4287      	cmp	r7, r0
100409ec:	4180      	sbcs	r0, r0
100409ee:	4240      	negs	r0, r0
100409f0:	1824      	adds	r4, r4, r0
100409f2:	0223      	lsls	r3, r4, #8
100409f4:	d400      	bmi.n	100409f8 <__aeabi_dsub+0x1b4>
100409f6:	e0c6      	b.n	10040b86 <__aeabi_dsub+0x342>
100409f8:	4b6b      	ldr	r3, [pc, #428]	@ (10040ba8 <__aeabi_dsub+0x364>)
100409fa:	3501      	adds	r5, #1
100409fc:	429d      	cmp	r5, r3
100409fe:	d100      	bne.n	10040a02 <__aeabi_dsub+0x1be>
10040a00:	e0b2      	b.n	10040b68 <__aeabi_dsub+0x324>
10040a02:	2101      	movs	r1, #1
10040a04:	4b69      	ldr	r3, [pc, #420]	@ (10040bac <__aeabi_dsub+0x368>)
10040a06:	087a      	lsrs	r2, r7, #1
10040a08:	401c      	ands	r4, r3
10040a0a:	4039      	ands	r1, r7
10040a0c:	430a      	orrs	r2, r1
10040a0e:	07e7      	lsls	r7, r4, #31
10040a10:	4317      	orrs	r7, r2
10040a12:	0864      	lsrs	r4, r4, #1
10040a14:	e79e      	b.n	10040954 <__aeabi_dsub+0x110>
10040a16:	4b66      	ldr	r3, [pc, #408]	@ (10040bb0 <__aeabi_dsub+0x36c>)
10040a18:	4311      	orrs	r1, r2
10040a1a:	468a      	mov	sl, r1
10040a1c:	18eb      	adds	r3, r5, r3
10040a1e:	2900      	cmp	r1, #0
10040a20:	d028      	beq.n	10040a74 <__aeabi_dsub+0x230>
10040a22:	4566      	cmp	r6, ip
10040a24:	d02c      	beq.n	10040a80 <__aeabi_dsub+0x23c>
10040a26:	2b00      	cmp	r3, #0
10040a28:	d05b      	beq.n	10040ae2 <__aeabi_dsub+0x29e>
10040a2a:	2d00      	cmp	r5, #0
10040a2c:	d100      	bne.n	10040a30 <__aeabi_dsub+0x1ec>
10040a2e:	e12c      	b.n	10040c8a <__aeabi_dsub+0x446>
10040a30:	465b      	mov	r3, fp
10040a32:	4666      	mov	r6, ip
10040a34:	075f      	lsls	r7, r3, #29
10040a36:	08d2      	lsrs	r2, r2, #3
10040a38:	4317      	orrs	r7, r2
10040a3a:	08dd      	lsrs	r5, r3, #3
10040a3c:	003b      	movs	r3, r7
10040a3e:	432b      	orrs	r3, r5
10040a40:	d100      	bne.n	10040a44 <__aeabi_dsub+0x200>
10040a42:	e0e2      	b.n	10040c0a <__aeabi_dsub+0x3c6>
10040a44:	2480      	movs	r4, #128	@ 0x80
10040a46:	0324      	lsls	r4, r4, #12
10040a48:	432c      	orrs	r4, r5
10040a4a:	0324      	lsls	r4, r4, #12
10040a4c:	4d56      	ldr	r5, [pc, #344]	@ (10040ba8 <__aeabi_dsub+0x364>)
10040a4e:	0b24      	lsrs	r4, r4, #12
10040a50:	e08c      	b.n	10040b6c <__aeabi_dsub+0x328>
10040a52:	4659      	mov	r1, fp
10040a54:	4311      	orrs	r1, r2
10040a56:	d100      	bne.n	10040a5a <__aeabi_dsub+0x216>
10040a58:	e0d5      	b.n	10040c06 <__aeabi_dsub+0x3c2>
10040a5a:	1e59      	subs	r1, r3, #1
10040a5c:	2b01      	cmp	r3, #1
10040a5e:	d100      	bne.n	10040a62 <__aeabi_dsub+0x21e>
10040a60:	e1b9      	b.n	10040dd6 <__aeabi_dsub+0x592>
10040a62:	42bb      	cmp	r3, r7
10040a64:	d100      	bne.n	10040a68 <__aeabi_dsub+0x224>
10040a66:	e1b1      	b.n	10040dcc <__aeabi_dsub+0x588>
10040a68:	2701      	movs	r7, #1
10040a6a:	000b      	movs	r3, r1
10040a6c:	2938      	cmp	r1, #56	@ 0x38
10040a6e:	dd00      	ble.n	10040a72 <__aeabi_dsub+0x22e>
10040a70:	e740      	b.n	100408f4 <__aeabi_dsub+0xb0>
10040a72:	e72a      	b.n	100408ca <__aeabi_dsub+0x86>
10040a74:	4661      	mov	r1, ip
10040a76:	2701      	movs	r7, #1
10040a78:	4079      	eors	r1, r7
10040a7a:	468c      	mov	ip, r1
10040a7c:	4566      	cmp	r6, ip
10040a7e:	d1d2      	bne.n	10040a26 <__aeabi_dsub+0x1e2>
10040a80:	2b00      	cmp	r3, #0
10040a82:	d100      	bne.n	10040a86 <__aeabi_dsub+0x242>
10040a84:	e0c5      	b.n	10040c12 <__aeabi_dsub+0x3ce>
10040a86:	2d00      	cmp	r5, #0
10040a88:	d000      	beq.n	10040a8c <__aeabi_dsub+0x248>
10040a8a:	e155      	b.n	10040d38 <__aeabi_dsub+0x4f4>
10040a8c:	464b      	mov	r3, r9
10040a8e:	0025      	movs	r5, r4
10040a90:	4305      	orrs	r5, r0
10040a92:	d100      	bne.n	10040a96 <__aeabi_dsub+0x252>
10040a94:	e212      	b.n	10040ebc <__aeabi_dsub+0x678>
10040a96:	1e59      	subs	r1, r3, #1
10040a98:	468c      	mov	ip, r1
10040a9a:	2b01      	cmp	r3, #1
10040a9c:	d100      	bne.n	10040aa0 <__aeabi_dsub+0x25c>
10040a9e:	e249      	b.n	10040f34 <__aeabi_dsub+0x6f0>
10040aa0:	4d41      	ldr	r5, [pc, #260]	@ (10040ba8 <__aeabi_dsub+0x364>)
10040aa2:	42ab      	cmp	r3, r5
10040aa4:	d100      	bne.n	10040aa8 <__aeabi_dsub+0x264>
10040aa6:	e28f      	b.n	10040fc8 <__aeabi_dsub+0x784>
10040aa8:	2701      	movs	r7, #1
10040aaa:	2938      	cmp	r1, #56	@ 0x38
10040aac:	dc11      	bgt.n	10040ad2 <__aeabi_dsub+0x28e>
10040aae:	4663      	mov	r3, ip
10040ab0:	2b1f      	cmp	r3, #31
10040ab2:	dd00      	ble.n	10040ab6 <__aeabi_dsub+0x272>
10040ab4:	e25b      	b.n	10040f6e <__aeabi_dsub+0x72a>
10040ab6:	4661      	mov	r1, ip
10040ab8:	2320      	movs	r3, #32
10040aba:	0027      	movs	r7, r4
10040abc:	1a5b      	subs	r3, r3, r1
10040abe:	0005      	movs	r5, r0
10040ac0:	4098      	lsls	r0, r3
10040ac2:	409f      	lsls	r7, r3
10040ac4:	40cd      	lsrs	r5, r1
10040ac6:	1e43      	subs	r3, r0, #1
10040ac8:	4198      	sbcs	r0, r3
10040aca:	40cc      	lsrs	r4, r1
10040acc:	432f      	orrs	r7, r5
10040ace:	4307      	orrs	r7, r0
10040ad0:	44a3      	add	fp, r4
10040ad2:	18bf      	adds	r7, r7, r2
10040ad4:	4297      	cmp	r7, r2
10040ad6:	4192      	sbcs	r2, r2
10040ad8:	4252      	negs	r2, r2
10040ada:	445a      	add	r2, fp
10040adc:	0014      	movs	r4, r2
10040ade:	464d      	mov	r5, r9
10040ae0:	e787      	b.n	100409f2 <__aeabi_dsub+0x1ae>
10040ae2:	4f34      	ldr	r7, [pc, #208]	@ (10040bb4 <__aeabi_dsub+0x370>)
10040ae4:	1c6b      	adds	r3, r5, #1
10040ae6:	423b      	tst	r3, r7
10040ae8:	d000      	beq.n	10040aec <__aeabi_dsub+0x2a8>
10040aea:	e0b6      	b.n	10040c5a <__aeabi_dsub+0x416>
10040aec:	4659      	mov	r1, fp
10040aee:	0023      	movs	r3, r4
10040af0:	4311      	orrs	r1, r2
10040af2:	000f      	movs	r7, r1
10040af4:	4303      	orrs	r3, r0
10040af6:	2d00      	cmp	r5, #0
10040af8:	d000      	beq.n	10040afc <__aeabi_dsub+0x2b8>
10040afa:	e126      	b.n	10040d4a <__aeabi_dsub+0x506>
10040afc:	2b00      	cmp	r3, #0
10040afe:	d100      	bne.n	10040b02 <__aeabi_dsub+0x2be>
10040b00:	e1c0      	b.n	10040e84 <__aeabi_dsub+0x640>
10040b02:	2900      	cmp	r1, #0
10040b04:	d100      	bne.n	10040b08 <__aeabi_dsub+0x2c4>
10040b06:	e0a1      	b.n	10040c4c <__aeabi_dsub+0x408>
10040b08:	1a83      	subs	r3, r0, r2
10040b0a:	4698      	mov	r8, r3
10040b0c:	465b      	mov	r3, fp
10040b0e:	4540      	cmp	r0, r8
10040b10:	41ad      	sbcs	r5, r5
10040b12:	1ae3      	subs	r3, r4, r3
10040b14:	426d      	negs	r5, r5
10040b16:	1b5b      	subs	r3, r3, r5
10040b18:	2580      	movs	r5, #128	@ 0x80
10040b1a:	042d      	lsls	r5, r5, #16
10040b1c:	422b      	tst	r3, r5
10040b1e:	d100      	bne.n	10040b22 <__aeabi_dsub+0x2de>
10040b20:	e14b      	b.n	10040dba <__aeabi_dsub+0x576>
10040b22:	465b      	mov	r3, fp
10040b24:	1a10      	subs	r0, r2, r0
10040b26:	4282      	cmp	r2, r0
10040b28:	4192      	sbcs	r2, r2
10040b2a:	1b1c      	subs	r4, r3, r4
10040b2c:	0007      	movs	r7, r0
10040b2e:	2601      	movs	r6, #1
10040b30:	4663      	mov	r3, ip
10040b32:	4252      	negs	r2, r2
10040b34:	1aa4      	subs	r4, r4, r2
10040b36:	4327      	orrs	r7, r4
10040b38:	401e      	ands	r6, r3
10040b3a:	2f00      	cmp	r7, #0
10040b3c:	d100      	bne.n	10040b40 <__aeabi_dsub+0x2fc>
10040b3e:	e142      	b.n	10040dc6 <__aeabi_dsub+0x582>
10040b40:	422c      	tst	r4, r5
10040b42:	d100      	bne.n	10040b46 <__aeabi_dsub+0x302>
10040b44:	e26d      	b.n	10041022 <__aeabi_dsub+0x7de>
10040b46:	4b19      	ldr	r3, [pc, #100]	@ (10040bac <__aeabi_dsub+0x368>)
10040b48:	2501      	movs	r5, #1
10040b4a:	401c      	ands	r4, r3
10040b4c:	e71b      	b.n	10040986 <__aeabi_dsub+0x142>
10040b4e:	42bd      	cmp	r5, r7
10040b50:	d100      	bne.n	10040b54 <__aeabi_dsub+0x310>
10040b52:	e13b      	b.n	10040dcc <__aeabi_dsub+0x588>
10040b54:	2701      	movs	r7, #1
10040b56:	2b38      	cmp	r3, #56	@ 0x38
10040b58:	dd00      	ble.n	10040b5c <__aeabi_dsub+0x318>
10040b5a:	e745      	b.n	100409e8 <__aeabi_dsub+0x1a4>
10040b5c:	2780      	movs	r7, #128	@ 0x80
10040b5e:	4659      	mov	r1, fp
10040b60:	043f      	lsls	r7, r7, #16
10040b62:	4339      	orrs	r1, r7
10040b64:	468b      	mov	fp, r1
10040b66:	e72a      	b.n	100409be <__aeabi_dsub+0x17a>
10040b68:	2400      	movs	r4, #0
10040b6a:	2700      	movs	r7, #0
10040b6c:	052d      	lsls	r5, r5, #20
10040b6e:	4325      	orrs	r5, r4
10040b70:	07f6      	lsls	r6, r6, #31
10040b72:	4335      	orrs	r5, r6
10040b74:	0038      	movs	r0, r7
10040b76:	0029      	movs	r1, r5
10040b78:	b003      	add	sp, #12
10040b7a:	bcf0      	pop	{r4, r5, r6, r7}
10040b7c:	46bb      	mov	fp, r7
10040b7e:	46b2      	mov	sl, r6
10040b80:	46a9      	mov	r9, r5
10040b82:	46a0      	mov	r8, r4
10040b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040b86:	077b      	lsls	r3, r7, #29
10040b88:	d004      	beq.n	10040b94 <__aeabi_dsub+0x350>
10040b8a:	230f      	movs	r3, #15
10040b8c:	403b      	ands	r3, r7
10040b8e:	2b04      	cmp	r3, #4
10040b90:	d000      	beq.n	10040b94 <__aeabi_dsub+0x350>
10040b92:	e6e7      	b.n	10040964 <__aeabi_dsub+0x120>
10040b94:	002b      	movs	r3, r5
10040b96:	08f8      	lsrs	r0, r7, #3
10040b98:	4a03      	ldr	r2, [pc, #12]	@ (10040ba8 <__aeabi_dsub+0x364>)
10040b9a:	0767      	lsls	r7, r4, #29
10040b9c:	4307      	orrs	r7, r0
10040b9e:	08e5      	lsrs	r5, r4, #3
10040ba0:	4293      	cmp	r3, r2
10040ba2:	d100      	bne.n	10040ba6 <__aeabi_dsub+0x362>
10040ba4:	e74a      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040ba6:	e0a5      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040ba8:	000007ff 	.word	0x000007ff
10040bac:	ff7fffff 	.word	0xff7fffff
10040bb0:	fffff801 	.word	0xfffff801
10040bb4:	000007fe 	.word	0x000007fe
10040bb8:	0038      	movs	r0, r7
10040bba:	f000 faf5 	bl	100411a8 <__clzsi2>
10040bbe:	0003      	movs	r3, r0
10040bc0:	3318      	adds	r3, #24
10040bc2:	2b1f      	cmp	r3, #31
10040bc4:	dc00      	bgt.n	10040bc8 <__aeabi_dsub+0x384>
10040bc6:	e6a7      	b.n	10040918 <__aeabi_dsub+0xd4>
10040bc8:	003a      	movs	r2, r7
10040bca:	3808      	subs	r0, #8
10040bcc:	4082      	lsls	r2, r0
10040bce:	429d      	cmp	r5, r3
10040bd0:	dd00      	ble.n	10040bd4 <__aeabi_dsub+0x390>
10040bd2:	e08a      	b.n	10040cea <__aeabi_dsub+0x4a6>
10040bd4:	1b5b      	subs	r3, r3, r5
10040bd6:	1c58      	adds	r0, r3, #1
10040bd8:	281f      	cmp	r0, #31
10040bda:	dc00      	bgt.n	10040bde <__aeabi_dsub+0x39a>
10040bdc:	e1d8      	b.n	10040f90 <__aeabi_dsub+0x74c>
10040bde:	0017      	movs	r7, r2
10040be0:	3b1f      	subs	r3, #31
10040be2:	40df      	lsrs	r7, r3
10040be4:	2820      	cmp	r0, #32
10040be6:	d005      	beq.n	10040bf4 <__aeabi_dsub+0x3b0>
10040be8:	2340      	movs	r3, #64	@ 0x40
10040bea:	1a1b      	subs	r3, r3, r0
10040bec:	409a      	lsls	r2, r3
10040bee:	1e53      	subs	r3, r2, #1
10040bf0:	419a      	sbcs	r2, r3
10040bf2:	4317      	orrs	r7, r2
10040bf4:	2500      	movs	r5, #0
10040bf6:	2f00      	cmp	r7, #0
10040bf8:	d100      	bne.n	10040bfc <__aeabi_dsub+0x3b8>
10040bfa:	e0e5      	b.n	10040dc8 <__aeabi_dsub+0x584>
10040bfc:	077b      	lsls	r3, r7, #29
10040bfe:	d000      	beq.n	10040c02 <__aeabi_dsub+0x3be>
10040c00:	e6ab      	b.n	1004095a <__aeabi_dsub+0x116>
10040c02:	002c      	movs	r4, r5
10040c04:	e7c6      	b.n	10040b94 <__aeabi_dsub+0x350>
10040c06:	08c0      	lsrs	r0, r0, #3
10040c08:	e7c6      	b.n	10040b98 <__aeabi_dsub+0x354>
10040c0a:	2700      	movs	r7, #0
10040c0c:	2400      	movs	r4, #0
10040c0e:	4dd1      	ldr	r5, [pc, #836]	@ (10040f54 <__aeabi_dsub+0x710>)
10040c10:	e7ac      	b.n	10040b6c <__aeabi_dsub+0x328>
10040c12:	4fd1      	ldr	r7, [pc, #836]	@ (10040f58 <__aeabi_dsub+0x714>)
10040c14:	1c6b      	adds	r3, r5, #1
10040c16:	423b      	tst	r3, r7
10040c18:	d171      	bne.n	10040cfe <__aeabi_dsub+0x4ba>
10040c1a:	0023      	movs	r3, r4
10040c1c:	4303      	orrs	r3, r0
10040c1e:	2d00      	cmp	r5, #0
10040c20:	d000      	beq.n	10040c24 <__aeabi_dsub+0x3e0>
10040c22:	e14e      	b.n	10040ec2 <__aeabi_dsub+0x67e>
10040c24:	4657      	mov	r7, sl
10040c26:	2b00      	cmp	r3, #0
10040c28:	d100      	bne.n	10040c2c <__aeabi_dsub+0x3e8>
10040c2a:	e1b5      	b.n	10040f98 <__aeabi_dsub+0x754>
10040c2c:	2f00      	cmp	r7, #0
10040c2e:	d00d      	beq.n	10040c4c <__aeabi_dsub+0x408>
10040c30:	1883      	adds	r3, r0, r2
10040c32:	4283      	cmp	r3, r0
10040c34:	4180      	sbcs	r0, r0
10040c36:	445c      	add	r4, fp
10040c38:	4240      	negs	r0, r0
10040c3a:	1824      	adds	r4, r4, r0
10040c3c:	0222      	lsls	r2, r4, #8
10040c3e:	d500      	bpl.n	10040c42 <__aeabi_dsub+0x3fe>
10040c40:	e1c8      	b.n	10040fd4 <__aeabi_dsub+0x790>
10040c42:	001f      	movs	r7, r3
10040c44:	4698      	mov	r8, r3
10040c46:	4327      	orrs	r7, r4
10040c48:	d100      	bne.n	10040c4c <__aeabi_dsub+0x408>
10040c4a:	e0bc      	b.n	10040dc6 <__aeabi_dsub+0x582>
10040c4c:	4643      	mov	r3, r8
10040c4e:	0767      	lsls	r7, r4, #29
10040c50:	08db      	lsrs	r3, r3, #3
10040c52:	431f      	orrs	r7, r3
10040c54:	08e5      	lsrs	r5, r4, #3
10040c56:	2300      	movs	r3, #0
10040c58:	e04c      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040c5a:	1a83      	subs	r3, r0, r2
10040c5c:	4698      	mov	r8, r3
10040c5e:	465b      	mov	r3, fp
10040c60:	4540      	cmp	r0, r8
10040c62:	41bf      	sbcs	r7, r7
10040c64:	1ae3      	subs	r3, r4, r3
10040c66:	427f      	negs	r7, r7
10040c68:	1bdb      	subs	r3, r3, r7
10040c6a:	021f      	lsls	r7, r3, #8
10040c6c:	d47c      	bmi.n	10040d68 <__aeabi_dsub+0x524>
10040c6e:	4647      	mov	r7, r8
10040c70:	431f      	orrs	r7, r3
10040c72:	d100      	bne.n	10040c76 <__aeabi_dsub+0x432>
10040c74:	e0a6      	b.n	10040dc4 <__aeabi_dsub+0x580>
10040c76:	001c      	movs	r4, r3
10040c78:	4647      	mov	r7, r8
10040c7a:	e645      	b.n	10040908 <__aeabi_dsub+0xc4>
10040c7c:	4cb7      	ldr	r4, [pc, #732]	@ (10040f5c <__aeabi_dsub+0x718>)
10040c7e:	1aed      	subs	r5, r5, r3
10040c80:	4014      	ands	r4, r2
10040c82:	077b      	lsls	r3, r7, #29
10040c84:	d000      	beq.n	10040c88 <__aeabi_dsub+0x444>
10040c86:	e780      	b.n	10040b8a <__aeabi_dsub+0x346>
10040c88:	e784      	b.n	10040b94 <__aeabi_dsub+0x350>
10040c8a:	464b      	mov	r3, r9
10040c8c:	0025      	movs	r5, r4
10040c8e:	4305      	orrs	r5, r0
10040c90:	d066      	beq.n	10040d60 <__aeabi_dsub+0x51c>
10040c92:	1e5f      	subs	r7, r3, #1
10040c94:	2b01      	cmp	r3, #1
10040c96:	d100      	bne.n	10040c9a <__aeabi_dsub+0x456>
10040c98:	e0fc      	b.n	10040e94 <__aeabi_dsub+0x650>
10040c9a:	4dae      	ldr	r5, [pc, #696]	@ (10040f54 <__aeabi_dsub+0x710>)
10040c9c:	42ab      	cmp	r3, r5
10040c9e:	d100      	bne.n	10040ca2 <__aeabi_dsub+0x45e>
10040ca0:	e15e      	b.n	10040f60 <__aeabi_dsub+0x71c>
10040ca2:	4666      	mov	r6, ip
10040ca4:	2f38      	cmp	r7, #56	@ 0x38
10040ca6:	dc00      	bgt.n	10040caa <__aeabi_dsub+0x466>
10040ca8:	e0b4      	b.n	10040e14 <__aeabi_dsub+0x5d0>
10040caa:	2001      	movs	r0, #1
10040cac:	1a17      	subs	r7, r2, r0
10040cae:	42ba      	cmp	r2, r7
10040cb0:	4192      	sbcs	r2, r2
10040cb2:	465b      	mov	r3, fp
10040cb4:	4252      	negs	r2, r2
10040cb6:	464d      	mov	r5, r9
10040cb8:	1a9c      	subs	r4, r3, r2
10040cba:	e620      	b.n	100408fe <__aeabi_dsub+0xba>
10040cbc:	0767      	lsls	r7, r4, #29
10040cbe:	08c0      	lsrs	r0, r0, #3
10040cc0:	4307      	orrs	r7, r0
10040cc2:	08e5      	lsrs	r5, r4, #3
10040cc4:	e6ba      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040cc6:	001f      	movs	r7, r3
10040cc8:	4659      	mov	r1, fp
10040cca:	3f20      	subs	r7, #32
10040ccc:	40f9      	lsrs	r1, r7
10040cce:	000f      	movs	r7, r1
10040cd0:	2b20      	cmp	r3, #32
10040cd2:	d005      	beq.n	10040ce0 <__aeabi_dsub+0x49c>
10040cd4:	2140      	movs	r1, #64	@ 0x40
10040cd6:	1acb      	subs	r3, r1, r3
10040cd8:	4659      	mov	r1, fp
10040cda:	4099      	lsls	r1, r3
10040cdc:	430a      	orrs	r2, r1
10040cde:	4692      	mov	sl, r2
10040ce0:	4653      	mov	r3, sl
10040ce2:	1e5a      	subs	r2, r3, #1
10040ce4:	4193      	sbcs	r3, r2
10040ce6:	431f      	orrs	r7, r3
10040ce8:	e604      	b.n	100408f4 <__aeabi_dsub+0xb0>
10040cea:	1aeb      	subs	r3, r5, r3
10040cec:	4d9b      	ldr	r5, [pc, #620]	@ (10040f5c <__aeabi_dsub+0x718>)
10040cee:	4015      	ands	r5, r2
10040cf0:	076f      	lsls	r7, r5, #29
10040cf2:	08ed      	lsrs	r5, r5, #3
10040cf4:	032c      	lsls	r4, r5, #12
10040cf6:	055d      	lsls	r5, r3, #21
10040cf8:	0b24      	lsrs	r4, r4, #12
10040cfa:	0d6d      	lsrs	r5, r5, #21
10040cfc:	e736      	b.n	10040b6c <__aeabi_dsub+0x328>
10040cfe:	4d95      	ldr	r5, [pc, #596]	@ (10040f54 <__aeabi_dsub+0x710>)
10040d00:	42ab      	cmp	r3, r5
10040d02:	d100      	bne.n	10040d06 <__aeabi_dsub+0x4c2>
10040d04:	e0d6      	b.n	10040eb4 <__aeabi_dsub+0x670>
10040d06:	1882      	adds	r2, r0, r2
10040d08:	0021      	movs	r1, r4
10040d0a:	4282      	cmp	r2, r0
10040d0c:	4180      	sbcs	r0, r0
10040d0e:	4459      	add	r1, fp
10040d10:	4240      	negs	r0, r0
10040d12:	1808      	adds	r0, r1, r0
10040d14:	07c7      	lsls	r7, r0, #31
10040d16:	0852      	lsrs	r2, r2, #1
10040d18:	4317      	orrs	r7, r2
10040d1a:	0844      	lsrs	r4, r0, #1
10040d1c:	0752      	lsls	r2, r2, #29
10040d1e:	d400      	bmi.n	10040d22 <__aeabi_dsub+0x4de>
10040d20:	e185      	b.n	1004102e <__aeabi_dsub+0x7ea>
10040d22:	220f      	movs	r2, #15
10040d24:	001d      	movs	r5, r3
10040d26:	403a      	ands	r2, r7
10040d28:	2a04      	cmp	r2, #4
10040d2a:	d000      	beq.n	10040d2e <__aeabi_dsub+0x4ea>
10040d2c:	e61a      	b.n	10040964 <__aeabi_dsub+0x120>
10040d2e:	08ff      	lsrs	r7, r7, #3
10040d30:	0764      	lsls	r4, r4, #29
10040d32:	4327      	orrs	r7, r4
10040d34:	0905      	lsrs	r5, r0, #4
10040d36:	e7dd      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040d38:	465b      	mov	r3, fp
10040d3a:	08d2      	lsrs	r2, r2, #3
10040d3c:	075f      	lsls	r7, r3, #29
10040d3e:	4317      	orrs	r7, r2
10040d40:	08dd      	lsrs	r5, r3, #3
10040d42:	e67b      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040d44:	2700      	movs	r7, #0
10040d46:	2400      	movs	r4, #0
10040d48:	e710      	b.n	10040b6c <__aeabi_dsub+0x328>
10040d4a:	2b00      	cmp	r3, #0
10040d4c:	d000      	beq.n	10040d50 <__aeabi_dsub+0x50c>
10040d4e:	e0d6      	b.n	10040efe <__aeabi_dsub+0x6ba>
10040d50:	2900      	cmp	r1, #0
10040d52:	d000      	beq.n	10040d56 <__aeabi_dsub+0x512>
10040d54:	e12f      	b.n	10040fb6 <__aeabi_dsub+0x772>
10040d56:	2480      	movs	r4, #128	@ 0x80
10040d58:	2600      	movs	r6, #0
10040d5a:	4d7e      	ldr	r5, [pc, #504]	@ (10040f54 <__aeabi_dsub+0x710>)
10040d5c:	0324      	lsls	r4, r4, #12
10040d5e:	e705      	b.n	10040b6c <__aeabi_dsub+0x328>
10040d60:	4666      	mov	r6, ip
10040d62:	465c      	mov	r4, fp
10040d64:	08d0      	lsrs	r0, r2, #3
10040d66:	e717      	b.n	10040b98 <__aeabi_dsub+0x354>
10040d68:	465b      	mov	r3, fp
10040d6a:	1a17      	subs	r7, r2, r0
10040d6c:	42ba      	cmp	r2, r7
10040d6e:	4192      	sbcs	r2, r2
10040d70:	1b1c      	subs	r4, r3, r4
10040d72:	2601      	movs	r6, #1
10040d74:	4663      	mov	r3, ip
10040d76:	4252      	negs	r2, r2
10040d78:	1aa4      	subs	r4, r4, r2
10040d7a:	401e      	ands	r6, r3
10040d7c:	e5c4      	b.n	10040908 <__aeabi_dsub+0xc4>
10040d7e:	1883      	adds	r3, r0, r2
10040d80:	4283      	cmp	r3, r0
10040d82:	4180      	sbcs	r0, r0
10040d84:	445c      	add	r4, fp
10040d86:	4240      	negs	r0, r0
10040d88:	1825      	adds	r5, r4, r0
10040d8a:	022a      	lsls	r2, r5, #8
10040d8c:	d400      	bmi.n	10040d90 <__aeabi_dsub+0x54c>
10040d8e:	e0da      	b.n	10040f46 <__aeabi_dsub+0x702>
10040d90:	4a72      	ldr	r2, [pc, #456]	@ (10040f5c <__aeabi_dsub+0x718>)
10040d92:	085b      	lsrs	r3, r3, #1
10040d94:	4015      	ands	r5, r2
10040d96:	07ea      	lsls	r2, r5, #31
10040d98:	431a      	orrs	r2, r3
10040d9a:	0869      	lsrs	r1, r5, #1
10040d9c:	075b      	lsls	r3, r3, #29
10040d9e:	d400      	bmi.n	10040da2 <__aeabi_dsub+0x55e>
10040da0:	e14a      	b.n	10041038 <__aeabi_dsub+0x7f4>
10040da2:	230f      	movs	r3, #15
10040da4:	4013      	ands	r3, r2
10040da6:	2b04      	cmp	r3, #4
10040da8:	d100      	bne.n	10040dac <__aeabi_dsub+0x568>
10040daa:	e0fc      	b.n	10040fa6 <__aeabi_dsub+0x762>
10040dac:	1d17      	adds	r7, r2, #4
10040dae:	4297      	cmp	r7, r2
10040db0:	41a4      	sbcs	r4, r4
10040db2:	4264      	negs	r4, r4
10040db4:	2502      	movs	r5, #2
10040db6:	1864      	adds	r4, r4, r1
10040db8:	e6ec      	b.n	10040b94 <__aeabi_dsub+0x350>
10040dba:	4647      	mov	r7, r8
10040dbc:	001c      	movs	r4, r3
10040dbe:	431f      	orrs	r7, r3
10040dc0:	d000      	beq.n	10040dc4 <__aeabi_dsub+0x580>
10040dc2:	e743      	b.n	10040c4c <__aeabi_dsub+0x408>
10040dc4:	2600      	movs	r6, #0
10040dc6:	2500      	movs	r5, #0
10040dc8:	2400      	movs	r4, #0
10040dca:	e6cf      	b.n	10040b6c <__aeabi_dsub+0x328>
10040dcc:	08c0      	lsrs	r0, r0, #3
10040dce:	0767      	lsls	r7, r4, #29
10040dd0:	4307      	orrs	r7, r0
10040dd2:	08e5      	lsrs	r5, r4, #3
10040dd4:	e632      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040dd6:	1a87      	subs	r7, r0, r2
10040dd8:	465b      	mov	r3, fp
10040dda:	42b8      	cmp	r0, r7
10040ddc:	4180      	sbcs	r0, r0
10040dde:	1ae4      	subs	r4, r4, r3
10040de0:	4240      	negs	r0, r0
10040de2:	1a24      	subs	r4, r4, r0
10040de4:	0223      	lsls	r3, r4, #8
10040de6:	d428      	bmi.n	10040e3a <__aeabi_dsub+0x5f6>
10040de8:	0763      	lsls	r3, r4, #29
10040dea:	08ff      	lsrs	r7, r7, #3
10040dec:	431f      	orrs	r7, r3
10040dee:	08e5      	lsrs	r5, r4, #3
10040df0:	2301      	movs	r3, #1
10040df2:	e77f      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040df4:	2b00      	cmp	r3, #0
10040df6:	d100      	bne.n	10040dfa <__aeabi_dsub+0x5b6>
10040df8:	e673      	b.n	10040ae2 <__aeabi_dsub+0x29e>
10040dfa:	464b      	mov	r3, r9
10040dfc:	1b5f      	subs	r7, r3, r5
10040dfe:	003b      	movs	r3, r7
10040e00:	2d00      	cmp	r5, #0
10040e02:	d100      	bne.n	10040e06 <__aeabi_dsub+0x5c2>
10040e04:	e742      	b.n	10040c8c <__aeabi_dsub+0x448>
10040e06:	2f38      	cmp	r7, #56	@ 0x38
10040e08:	dd00      	ble.n	10040e0c <__aeabi_dsub+0x5c8>
10040e0a:	e0ec      	b.n	10040fe6 <__aeabi_dsub+0x7a2>
10040e0c:	2380      	movs	r3, #128	@ 0x80
10040e0e:	000e      	movs	r6, r1
10040e10:	041b      	lsls	r3, r3, #16
10040e12:	431c      	orrs	r4, r3
10040e14:	2f1f      	cmp	r7, #31
10040e16:	dc25      	bgt.n	10040e64 <__aeabi_dsub+0x620>
10040e18:	2520      	movs	r5, #32
10040e1a:	0023      	movs	r3, r4
10040e1c:	1bed      	subs	r5, r5, r7
10040e1e:	0001      	movs	r1, r0
10040e20:	40a8      	lsls	r0, r5
10040e22:	40ab      	lsls	r3, r5
10040e24:	40f9      	lsrs	r1, r7
10040e26:	1e45      	subs	r5, r0, #1
10040e28:	41a8      	sbcs	r0, r5
10040e2a:	430b      	orrs	r3, r1
10040e2c:	40fc      	lsrs	r4, r7
10040e2e:	4318      	orrs	r0, r3
10040e30:	465b      	mov	r3, fp
10040e32:	1b1b      	subs	r3, r3, r4
10040e34:	469b      	mov	fp, r3
10040e36:	e739      	b.n	10040cac <__aeabi_dsub+0x468>
10040e38:	4666      	mov	r6, ip
10040e3a:	2501      	movs	r5, #1
10040e3c:	e562      	b.n	10040904 <__aeabi_dsub+0xc0>
10040e3e:	001f      	movs	r7, r3
10040e40:	4659      	mov	r1, fp
10040e42:	3f20      	subs	r7, #32
10040e44:	40f9      	lsrs	r1, r7
10040e46:	468c      	mov	ip, r1
10040e48:	2b20      	cmp	r3, #32
10040e4a:	d005      	beq.n	10040e58 <__aeabi_dsub+0x614>
10040e4c:	2740      	movs	r7, #64	@ 0x40
10040e4e:	4659      	mov	r1, fp
10040e50:	1afb      	subs	r3, r7, r3
10040e52:	4099      	lsls	r1, r3
10040e54:	430a      	orrs	r2, r1
10040e56:	4692      	mov	sl, r2
10040e58:	4657      	mov	r7, sl
10040e5a:	1e7b      	subs	r3, r7, #1
10040e5c:	419f      	sbcs	r7, r3
10040e5e:	4663      	mov	r3, ip
10040e60:	431f      	orrs	r7, r3
10040e62:	e5c1      	b.n	100409e8 <__aeabi_dsub+0x1a4>
10040e64:	003b      	movs	r3, r7
10040e66:	0025      	movs	r5, r4
10040e68:	3b20      	subs	r3, #32
10040e6a:	40dd      	lsrs	r5, r3
10040e6c:	2f20      	cmp	r7, #32
10040e6e:	d004      	beq.n	10040e7a <__aeabi_dsub+0x636>
10040e70:	2340      	movs	r3, #64	@ 0x40
10040e72:	1bdb      	subs	r3, r3, r7
10040e74:	409c      	lsls	r4, r3
10040e76:	4320      	orrs	r0, r4
10040e78:	4680      	mov	r8, r0
10040e7a:	4640      	mov	r0, r8
10040e7c:	1e43      	subs	r3, r0, #1
10040e7e:	4198      	sbcs	r0, r3
10040e80:	4328      	orrs	r0, r5
10040e82:	e713      	b.n	10040cac <__aeabi_dsub+0x468>
10040e84:	2900      	cmp	r1, #0
10040e86:	d09d      	beq.n	10040dc4 <__aeabi_dsub+0x580>
10040e88:	2601      	movs	r6, #1
10040e8a:	4663      	mov	r3, ip
10040e8c:	465c      	mov	r4, fp
10040e8e:	4690      	mov	r8, r2
10040e90:	401e      	ands	r6, r3
10040e92:	e6db      	b.n	10040c4c <__aeabi_dsub+0x408>
10040e94:	1a17      	subs	r7, r2, r0
10040e96:	465b      	mov	r3, fp
10040e98:	42ba      	cmp	r2, r7
10040e9a:	4192      	sbcs	r2, r2
10040e9c:	1b1c      	subs	r4, r3, r4
10040e9e:	4252      	negs	r2, r2
10040ea0:	1aa4      	subs	r4, r4, r2
10040ea2:	0223      	lsls	r3, r4, #8
10040ea4:	d4c8      	bmi.n	10040e38 <__aeabi_dsub+0x5f4>
10040ea6:	0763      	lsls	r3, r4, #29
10040ea8:	08ff      	lsrs	r7, r7, #3
10040eaa:	431f      	orrs	r7, r3
10040eac:	4666      	mov	r6, ip
10040eae:	2301      	movs	r3, #1
10040eb0:	08e5      	lsrs	r5, r4, #3
10040eb2:	e71f      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040eb4:	001d      	movs	r5, r3
10040eb6:	2400      	movs	r4, #0
10040eb8:	2700      	movs	r7, #0
10040eba:	e657      	b.n	10040b6c <__aeabi_dsub+0x328>
10040ebc:	465c      	mov	r4, fp
10040ebe:	08d0      	lsrs	r0, r2, #3
10040ec0:	e66a      	b.n	10040b98 <__aeabi_dsub+0x354>
10040ec2:	2b00      	cmp	r3, #0
10040ec4:	d100      	bne.n	10040ec8 <__aeabi_dsub+0x684>
10040ec6:	e737      	b.n	10040d38 <__aeabi_dsub+0x4f4>
10040ec8:	4653      	mov	r3, sl
10040eca:	08c0      	lsrs	r0, r0, #3
10040ecc:	0767      	lsls	r7, r4, #29
10040ece:	4307      	orrs	r7, r0
10040ed0:	08e5      	lsrs	r5, r4, #3
10040ed2:	2b00      	cmp	r3, #0
10040ed4:	d100      	bne.n	10040ed8 <__aeabi_dsub+0x694>
10040ed6:	e5b1      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040ed8:	2380      	movs	r3, #128	@ 0x80
10040eda:	031b      	lsls	r3, r3, #12
10040edc:	421d      	tst	r5, r3
10040ede:	d008      	beq.n	10040ef2 <__aeabi_dsub+0x6ae>
10040ee0:	4659      	mov	r1, fp
10040ee2:	08c8      	lsrs	r0, r1, #3
10040ee4:	4218      	tst	r0, r3
10040ee6:	d104      	bne.n	10040ef2 <__aeabi_dsub+0x6ae>
10040ee8:	08d2      	lsrs	r2, r2, #3
10040eea:	0749      	lsls	r1, r1, #29
10040eec:	430a      	orrs	r2, r1
10040eee:	0017      	movs	r7, r2
10040ef0:	0005      	movs	r5, r0
10040ef2:	0f7b      	lsrs	r3, r7, #29
10040ef4:	00ff      	lsls	r7, r7, #3
10040ef6:	08ff      	lsrs	r7, r7, #3
10040ef8:	075b      	lsls	r3, r3, #29
10040efa:	431f      	orrs	r7, r3
10040efc:	e59e      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040efe:	08c0      	lsrs	r0, r0, #3
10040f00:	0763      	lsls	r3, r4, #29
10040f02:	4318      	orrs	r0, r3
10040f04:	08e5      	lsrs	r5, r4, #3
10040f06:	2900      	cmp	r1, #0
10040f08:	d053      	beq.n	10040fb2 <__aeabi_dsub+0x76e>
10040f0a:	2380      	movs	r3, #128	@ 0x80
10040f0c:	031b      	lsls	r3, r3, #12
10040f0e:	421d      	tst	r5, r3
10040f10:	d00a      	beq.n	10040f28 <__aeabi_dsub+0x6e4>
10040f12:	4659      	mov	r1, fp
10040f14:	08cc      	lsrs	r4, r1, #3
10040f16:	421c      	tst	r4, r3
10040f18:	d106      	bne.n	10040f28 <__aeabi_dsub+0x6e4>
10040f1a:	2601      	movs	r6, #1
10040f1c:	4663      	mov	r3, ip
10040f1e:	0025      	movs	r5, r4
10040f20:	08d0      	lsrs	r0, r2, #3
10040f22:	0749      	lsls	r1, r1, #29
10040f24:	4308      	orrs	r0, r1
10040f26:	401e      	ands	r6, r3
10040f28:	0f47      	lsrs	r7, r0, #29
10040f2a:	00c0      	lsls	r0, r0, #3
10040f2c:	08c0      	lsrs	r0, r0, #3
10040f2e:	077f      	lsls	r7, r7, #29
10040f30:	4307      	orrs	r7, r0
10040f32:	e583      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040f34:	1883      	adds	r3, r0, r2
10040f36:	4293      	cmp	r3, r2
10040f38:	4192      	sbcs	r2, r2
10040f3a:	445c      	add	r4, fp
10040f3c:	4252      	negs	r2, r2
10040f3e:	18a5      	adds	r5, r4, r2
10040f40:	022a      	lsls	r2, r5, #8
10040f42:	d500      	bpl.n	10040f46 <__aeabi_dsub+0x702>
10040f44:	e724      	b.n	10040d90 <__aeabi_dsub+0x54c>
10040f46:	076f      	lsls	r7, r5, #29
10040f48:	08db      	lsrs	r3, r3, #3
10040f4a:	431f      	orrs	r7, r3
10040f4c:	08ed      	lsrs	r5, r5, #3
10040f4e:	2301      	movs	r3, #1
10040f50:	e6d0      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040f52:	46c0      	nop			@ (mov r8, r8)
10040f54:	000007ff 	.word	0x000007ff
10040f58:	000007fe 	.word	0x000007fe
10040f5c:	ff7fffff 	.word	0xff7fffff
10040f60:	465b      	mov	r3, fp
10040f62:	08d2      	lsrs	r2, r2, #3
10040f64:	075f      	lsls	r7, r3, #29
10040f66:	4666      	mov	r6, ip
10040f68:	4317      	orrs	r7, r2
10040f6a:	08dd      	lsrs	r5, r3, #3
10040f6c:	e566      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040f6e:	0025      	movs	r5, r4
10040f70:	3b20      	subs	r3, #32
10040f72:	40dd      	lsrs	r5, r3
10040f74:	4663      	mov	r3, ip
10040f76:	2b20      	cmp	r3, #32
10040f78:	d005      	beq.n	10040f86 <__aeabi_dsub+0x742>
10040f7a:	2340      	movs	r3, #64	@ 0x40
10040f7c:	4661      	mov	r1, ip
10040f7e:	1a5b      	subs	r3, r3, r1
10040f80:	409c      	lsls	r4, r3
10040f82:	4320      	orrs	r0, r4
10040f84:	4680      	mov	r8, r0
10040f86:	4647      	mov	r7, r8
10040f88:	1e7b      	subs	r3, r7, #1
10040f8a:	419f      	sbcs	r7, r3
10040f8c:	432f      	orrs	r7, r5
10040f8e:	e5a0      	b.n	10040ad2 <__aeabi_dsub+0x28e>
10040f90:	2120      	movs	r1, #32
10040f92:	2700      	movs	r7, #0
10040f94:	1a09      	subs	r1, r1, r0
10040f96:	e4d2      	b.n	1004093e <__aeabi_dsub+0xfa>
10040f98:	2f00      	cmp	r7, #0
10040f9a:	d100      	bne.n	10040f9e <__aeabi_dsub+0x75a>
10040f9c:	e713      	b.n	10040dc6 <__aeabi_dsub+0x582>
10040f9e:	465c      	mov	r4, fp
10040fa0:	0017      	movs	r7, r2
10040fa2:	2500      	movs	r5, #0
10040fa4:	e5f6      	b.n	10040b94 <__aeabi_dsub+0x350>
10040fa6:	08d7      	lsrs	r7, r2, #3
10040fa8:	0749      	lsls	r1, r1, #29
10040faa:	2302      	movs	r3, #2
10040fac:	430f      	orrs	r7, r1
10040fae:	092d      	lsrs	r5, r5, #4
10040fb0:	e6a0      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10040fb2:	0007      	movs	r7, r0
10040fb4:	e542      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040fb6:	465b      	mov	r3, fp
10040fb8:	2601      	movs	r6, #1
10040fba:	075f      	lsls	r7, r3, #29
10040fbc:	08dd      	lsrs	r5, r3, #3
10040fbe:	4663      	mov	r3, ip
10040fc0:	08d2      	lsrs	r2, r2, #3
10040fc2:	4317      	orrs	r7, r2
10040fc4:	401e      	ands	r6, r3
10040fc6:	e539      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040fc8:	465b      	mov	r3, fp
10040fca:	08d2      	lsrs	r2, r2, #3
10040fcc:	075f      	lsls	r7, r3, #29
10040fce:	4317      	orrs	r7, r2
10040fd0:	08dd      	lsrs	r5, r3, #3
10040fd2:	e533      	b.n	10040a3c <__aeabi_dsub+0x1f8>
10040fd4:	4a1e      	ldr	r2, [pc, #120]	@ (10041050 <__aeabi_dsub+0x80c>)
10040fd6:	08db      	lsrs	r3, r3, #3
10040fd8:	4022      	ands	r2, r4
10040fda:	0757      	lsls	r7, r2, #29
10040fdc:	0252      	lsls	r2, r2, #9
10040fde:	2501      	movs	r5, #1
10040fe0:	431f      	orrs	r7, r3
10040fe2:	0b14      	lsrs	r4, r2, #12
10040fe4:	e5c2      	b.n	10040b6c <__aeabi_dsub+0x328>
10040fe6:	000e      	movs	r6, r1
10040fe8:	2001      	movs	r0, #1
10040fea:	e65f      	b.n	10040cac <__aeabi_dsub+0x468>
10040fec:	2b00      	cmp	r3, #0
10040fee:	d00d      	beq.n	1004100c <__aeabi_dsub+0x7c8>
10040ff0:	464b      	mov	r3, r9
10040ff2:	1b5b      	subs	r3, r3, r5
10040ff4:	469c      	mov	ip, r3
10040ff6:	2d00      	cmp	r5, #0
10040ff8:	d100      	bne.n	10040ffc <__aeabi_dsub+0x7b8>
10040ffa:	e548      	b.n	10040a8e <__aeabi_dsub+0x24a>
10040ffc:	2701      	movs	r7, #1
10040ffe:	2b38      	cmp	r3, #56	@ 0x38
10041000:	dd00      	ble.n	10041004 <__aeabi_dsub+0x7c0>
10041002:	e566      	b.n	10040ad2 <__aeabi_dsub+0x28e>
10041004:	2380      	movs	r3, #128	@ 0x80
10041006:	041b      	lsls	r3, r3, #16
10041008:	431c      	orrs	r4, r3
1004100a:	e550      	b.n	10040aae <__aeabi_dsub+0x26a>
1004100c:	1c6b      	adds	r3, r5, #1
1004100e:	4d11      	ldr	r5, [pc, #68]	@ (10041054 <__aeabi_dsub+0x810>)
10041010:	422b      	tst	r3, r5
10041012:	d000      	beq.n	10041016 <__aeabi_dsub+0x7d2>
10041014:	e673      	b.n	10040cfe <__aeabi_dsub+0x4ba>
10041016:	4659      	mov	r1, fp
10041018:	0023      	movs	r3, r4
1004101a:	4311      	orrs	r1, r2
1004101c:	468a      	mov	sl, r1
1004101e:	4303      	orrs	r3, r0
10041020:	e600      	b.n	10040c24 <__aeabi_dsub+0x3e0>
10041022:	0767      	lsls	r7, r4, #29
10041024:	08c0      	lsrs	r0, r0, #3
10041026:	2300      	movs	r3, #0
10041028:	4307      	orrs	r7, r0
1004102a:	08e5      	lsrs	r5, r4, #3
1004102c:	e662      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
1004102e:	0764      	lsls	r4, r4, #29
10041030:	08ff      	lsrs	r7, r7, #3
10041032:	4327      	orrs	r7, r4
10041034:	0905      	lsrs	r5, r0, #4
10041036:	e65d      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10041038:	08d2      	lsrs	r2, r2, #3
1004103a:	0749      	lsls	r1, r1, #29
1004103c:	4311      	orrs	r1, r2
1004103e:	000f      	movs	r7, r1
10041040:	2302      	movs	r3, #2
10041042:	092d      	lsrs	r5, r5, #4
10041044:	e656      	b.n	10040cf4 <__aeabi_dsub+0x4b0>
10041046:	0007      	movs	r7, r0
10041048:	e5a4      	b.n	10040b94 <__aeabi_dsub+0x350>
1004104a:	0038      	movs	r0, r7
1004104c:	e48f      	b.n	1004096e <__aeabi_dsub+0x12a>
1004104e:	46c0      	nop			@ (mov r8, r8)
10041050:	ff7fffff 	.word	0xff7fffff
10041054:	000007fe 	.word	0x000007fe

10041058 <__aeabi_d2iz>:
10041058:	000b      	movs	r3, r1
1004105a:	0002      	movs	r2, r0
1004105c:	b570      	push	{r4, r5, r6, lr}
1004105e:	4d16      	ldr	r5, [pc, #88]	@ (100410b8 <__aeabi_d2iz+0x60>)
10041060:	030c      	lsls	r4, r1, #12
10041062:	b082      	sub	sp, #8
10041064:	0049      	lsls	r1, r1, #1
10041066:	2000      	movs	r0, #0
10041068:	9200      	str	r2, [sp, #0]
1004106a:	9301      	str	r3, [sp, #4]
1004106c:	0b24      	lsrs	r4, r4, #12
1004106e:	0d49      	lsrs	r1, r1, #21
10041070:	0fde      	lsrs	r6, r3, #31
10041072:	42a9      	cmp	r1, r5
10041074:	dd04      	ble.n	10041080 <__aeabi_d2iz+0x28>
10041076:	4811      	ldr	r0, [pc, #68]	@ (100410bc <__aeabi_d2iz+0x64>)
10041078:	4281      	cmp	r1, r0
1004107a:	dd03      	ble.n	10041084 <__aeabi_d2iz+0x2c>
1004107c:	4b10      	ldr	r3, [pc, #64]	@ (100410c0 <__aeabi_d2iz+0x68>)
1004107e:	18f0      	adds	r0, r6, r3
10041080:	b002      	add	sp, #8
10041082:	bd70      	pop	{r4, r5, r6, pc}
10041084:	2080      	movs	r0, #128	@ 0x80
10041086:	0340      	lsls	r0, r0, #13
10041088:	4320      	orrs	r0, r4
1004108a:	4c0e      	ldr	r4, [pc, #56]	@ (100410c4 <__aeabi_d2iz+0x6c>)
1004108c:	1a64      	subs	r4, r4, r1
1004108e:	2c1f      	cmp	r4, #31
10041090:	dd08      	ble.n	100410a4 <__aeabi_d2iz+0x4c>
10041092:	4b0d      	ldr	r3, [pc, #52]	@ (100410c8 <__aeabi_d2iz+0x70>)
10041094:	1a5b      	subs	r3, r3, r1
10041096:	40d8      	lsrs	r0, r3
10041098:	0003      	movs	r3, r0
1004109a:	4258      	negs	r0, r3
1004109c:	2e00      	cmp	r6, #0
1004109e:	d1ef      	bne.n	10041080 <__aeabi_d2iz+0x28>
100410a0:	0018      	movs	r0, r3
100410a2:	e7ed      	b.n	10041080 <__aeabi_d2iz+0x28>
100410a4:	4b09      	ldr	r3, [pc, #36]	@ (100410cc <__aeabi_d2iz+0x74>)
100410a6:	9a00      	ldr	r2, [sp, #0]
100410a8:	469c      	mov	ip, r3
100410aa:	0003      	movs	r3, r0
100410ac:	4461      	add	r1, ip
100410ae:	408b      	lsls	r3, r1
100410b0:	40e2      	lsrs	r2, r4
100410b2:	4313      	orrs	r3, r2
100410b4:	e7f1      	b.n	1004109a <__aeabi_d2iz+0x42>
100410b6:	46c0      	nop			@ (mov r8, r8)
100410b8:	000003fe 	.word	0x000003fe
100410bc:	0000041d 	.word	0x0000041d
100410c0:	7fffffff 	.word	0x7fffffff
100410c4:	00000433 	.word	0x00000433
100410c8:	00000413 	.word	0x00000413
100410cc:	fffffbed 	.word	0xfffffbed

100410d0 <__aeabi_i2d>:
100410d0:	b570      	push	{r4, r5, r6, lr}
100410d2:	2800      	cmp	r0, #0
100410d4:	d016      	beq.n	10041104 <__aeabi_i2d+0x34>
100410d6:	17c3      	asrs	r3, r0, #31
100410d8:	18c5      	adds	r5, r0, r3
100410da:	405d      	eors	r5, r3
100410dc:	0fc4      	lsrs	r4, r0, #31
100410de:	0028      	movs	r0, r5
100410e0:	f000 f862 	bl	100411a8 <__clzsi2>
100410e4:	4b10      	ldr	r3, [pc, #64]	@ (10041128 <__aeabi_i2d+0x58>)
100410e6:	1a1b      	subs	r3, r3, r0
100410e8:	055b      	lsls	r3, r3, #21
100410ea:	0d5b      	lsrs	r3, r3, #21
100410ec:	280a      	cmp	r0, #10
100410ee:	dc14      	bgt.n	1004111a <__aeabi_i2d+0x4a>
100410f0:	0002      	movs	r2, r0
100410f2:	002e      	movs	r6, r5
100410f4:	3215      	adds	r2, #21
100410f6:	4096      	lsls	r6, r2
100410f8:	220b      	movs	r2, #11
100410fa:	1a12      	subs	r2, r2, r0
100410fc:	40d5      	lsrs	r5, r2
100410fe:	032d      	lsls	r5, r5, #12
10041100:	0b2d      	lsrs	r5, r5, #12
10041102:	e003      	b.n	1004110c <__aeabi_i2d+0x3c>
10041104:	2400      	movs	r4, #0
10041106:	2300      	movs	r3, #0
10041108:	2500      	movs	r5, #0
1004110a:	2600      	movs	r6, #0
1004110c:	051b      	lsls	r3, r3, #20
1004110e:	432b      	orrs	r3, r5
10041110:	07e4      	lsls	r4, r4, #31
10041112:	4323      	orrs	r3, r4
10041114:	0030      	movs	r0, r6
10041116:	0019      	movs	r1, r3
10041118:	bd70      	pop	{r4, r5, r6, pc}
1004111a:	380b      	subs	r0, #11
1004111c:	4085      	lsls	r5, r0
1004111e:	032d      	lsls	r5, r5, #12
10041120:	2600      	movs	r6, #0
10041122:	0b2d      	lsrs	r5, r5, #12
10041124:	e7f2      	b.n	1004110c <__aeabi_i2d+0x3c>
10041126:	46c0      	nop			@ (mov r8, r8)
10041128:	0000041e 	.word	0x0000041e

1004112c <__aeabi_cdrcmple>:
1004112c:	4684      	mov	ip, r0
1004112e:	0010      	movs	r0, r2
10041130:	4662      	mov	r2, ip
10041132:	468c      	mov	ip, r1
10041134:	0019      	movs	r1, r3
10041136:	4663      	mov	r3, ip
10041138:	e000      	b.n	1004113c <__aeabi_cdcmpeq>
1004113a:	46c0      	nop			@ (mov r8, r8)

1004113c <__aeabi_cdcmpeq>:
1004113c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004113e:	f000 f905 	bl	1004134c <__ledf2>
10041142:	2800      	cmp	r0, #0
10041144:	d401      	bmi.n	1004114a <__aeabi_cdcmpeq+0xe>
10041146:	2100      	movs	r1, #0
10041148:	42c8      	cmn	r0, r1
1004114a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1004114c <__aeabi_dcmpeq>:
1004114c:	b510      	push	{r4, lr}
1004114e:	f000 f849 	bl	100411e4 <__eqdf2>
10041152:	4240      	negs	r0, r0
10041154:	3001      	adds	r0, #1
10041156:	bd10      	pop	{r4, pc}

10041158 <__aeabi_dcmplt>:
10041158:	b510      	push	{r4, lr}
1004115a:	f000 f8f7 	bl	1004134c <__ledf2>
1004115e:	2800      	cmp	r0, #0
10041160:	db01      	blt.n	10041166 <__aeabi_dcmplt+0xe>
10041162:	2000      	movs	r0, #0
10041164:	bd10      	pop	{r4, pc}
10041166:	2001      	movs	r0, #1
10041168:	bd10      	pop	{r4, pc}
1004116a:	46c0      	nop			@ (mov r8, r8)

1004116c <__aeabi_dcmple>:
1004116c:	b510      	push	{r4, lr}
1004116e:	f000 f8ed 	bl	1004134c <__ledf2>
10041172:	2800      	cmp	r0, #0
10041174:	dd01      	ble.n	1004117a <__aeabi_dcmple+0xe>
10041176:	2000      	movs	r0, #0
10041178:	bd10      	pop	{r4, pc}
1004117a:	2001      	movs	r0, #1
1004117c:	bd10      	pop	{r4, pc}
1004117e:	46c0      	nop			@ (mov r8, r8)

10041180 <__aeabi_dcmpgt>:
10041180:	b510      	push	{r4, lr}
10041182:	f000 f873 	bl	1004126c <__gedf2>
10041186:	2800      	cmp	r0, #0
10041188:	dc01      	bgt.n	1004118e <__aeabi_dcmpgt+0xe>
1004118a:	2000      	movs	r0, #0
1004118c:	bd10      	pop	{r4, pc}
1004118e:	2001      	movs	r0, #1
10041190:	bd10      	pop	{r4, pc}
10041192:	46c0      	nop			@ (mov r8, r8)

10041194 <__aeabi_dcmpge>:
10041194:	b510      	push	{r4, lr}
10041196:	f000 f869 	bl	1004126c <__gedf2>
1004119a:	2800      	cmp	r0, #0
1004119c:	da01      	bge.n	100411a2 <__aeabi_dcmpge+0xe>
1004119e:	2000      	movs	r0, #0
100411a0:	bd10      	pop	{r4, pc}
100411a2:	2001      	movs	r0, #1
100411a4:	bd10      	pop	{r4, pc}
100411a6:	46c0      	nop			@ (mov r8, r8)

100411a8 <__clzsi2>:
100411a8:	211c      	movs	r1, #28
100411aa:	2301      	movs	r3, #1
100411ac:	041b      	lsls	r3, r3, #16
100411ae:	4298      	cmp	r0, r3
100411b0:	d301      	bcc.n	100411b6 <__clzsi2+0xe>
100411b2:	0c00      	lsrs	r0, r0, #16
100411b4:	3910      	subs	r1, #16
100411b6:	0a1b      	lsrs	r3, r3, #8
100411b8:	4298      	cmp	r0, r3
100411ba:	d301      	bcc.n	100411c0 <__clzsi2+0x18>
100411bc:	0a00      	lsrs	r0, r0, #8
100411be:	3908      	subs	r1, #8
100411c0:	091b      	lsrs	r3, r3, #4
100411c2:	4298      	cmp	r0, r3
100411c4:	d301      	bcc.n	100411ca <__clzsi2+0x22>
100411c6:	0900      	lsrs	r0, r0, #4
100411c8:	3904      	subs	r1, #4
100411ca:	a202      	add	r2, pc, #8	@ (adr r2, 100411d4 <__clzsi2+0x2c>)
100411cc:	5c10      	ldrb	r0, [r2, r0]
100411ce:	1840      	adds	r0, r0, r1
100411d0:	4770      	bx	lr
100411d2:	46c0      	nop			@ (mov r8, r8)
100411d4:	02020304 	.word	0x02020304
100411d8:	01010101 	.word	0x01010101
	...

100411e4 <__eqdf2>:
100411e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100411e6:	4657      	mov	r7, sl
100411e8:	46de      	mov	lr, fp
100411ea:	464e      	mov	r6, r9
100411ec:	4645      	mov	r5, r8
100411ee:	b5e0      	push	{r5, r6, r7, lr}
100411f0:	000d      	movs	r5, r1
100411f2:	0004      	movs	r4, r0
100411f4:	0fe8      	lsrs	r0, r5, #31
100411f6:	4683      	mov	fp, r0
100411f8:	0309      	lsls	r1, r1, #12
100411fa:	0fd8      	lsrs	r0, r3, #31
100411fc:	0b09      	lsrs	r1, r1, #12
100411fe:	4682      	mov	sl, r0
10041200:	4819      	ldr	r0, [pc, #100]	@ (10041268 <__eqdf2+0x84>)
10041202:	468c      	mov	ip, r1
10041204:	031f      	lsls	r7, r3, #12
10041206:	0069      	lsls	r1, r5, #1
10041208:	005e      	lsls	r6, r3, #1
1004120a:	0d49      	lsrs	r1, r1, #21
1004120c:	0b3f      	lsrs	r7, r7, #12
1004120e:	0d76      	lsrs	r6, r6, #21
10041210:	4281      	cmp	r1, r0
10041212:	d018      	beq.n	10041246 <__eqdf2+0x62>
10041214:	4286      	cmp	r6, r0
10041216:	d00f      	beq.n	10041238 <__eqdf2+0x54>
10041218:	2001      	movs	r0, #1
1004121a:	42b1      	cmp	r1, r6
1004121c:	d10d      	bne.n	1004123a <__eqdf2+0x56>
1004121e:	45bc      	cmp	ip, r7
10041220:	d10b      	bne.n	1004123a <__eqdf2+0x56>
10041222:	4294      	cmp	r4, r2
10041224:	d109      	bne.n	1004123a <__eqdf2+0x56>
10041226:	45d3      	cmp	fp, sl
10041228:	d01c      	beq.n	10041264 <__eqdf2+0x80>
1004122a:	2900      	cmp	r1, #0
1004122c:	d105      	bne.n	1004123a <__eqdf2+0x56>
1004122e:	4660      	mov	r0, ip
10041230:	4320      	orrs	r0, r4
10041232:	1e43      	subs	r3, r0, #1
10041234:	4198      	sbcs	r0, r3
10041236:	e000      	b.n	1004123a <__eqdf2+0x56>
10041238:	2001      	movs	r0, #1
1004123a:	bcf0      	pop	{r4, r5, r6, r7}
1004123c:	46bb      	mov	fp, r7
1004123e:	46b2      	mov	sl, r6
10041240:	46a9      	mov	r9, r5
10041242:	46a0      	mov	r8, r4
10041244:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041246:	2001      	movs	r0, #1
10041248:	428e      	cmp	r6, r1
1004124a:	d1f6      	bne.n	1004123a <__eqdf2+0x56>
1004124c:	4661      	mov	r1, ip
1004124e:	4339      	orrs	r1, r7
10041250:	000f      	movs	r7, r1
10041252:	4317      	orrs	r7, r2
10041254:	4327      	orrs	r7, r4
10041256:	d1f0      	bne.n	1004123a <__eqdf2+0x56>
10041258:	465b      	mov	r3, fp
1004125a:	4652      	mov	r2, sl
1004125c:	1a98      	subs	r0, r3, r2
1004125e:	1e43      	subs	r3, r0, #1
10041260:	4198      	sbcs	r0, r3
10041262:	e7ea      	b.n	1004123a <__eqdf2+0x56>
10041264:	2000      	movs	r0, #0
10041266:	e7e8      	b.n	1004123a <__eqdf2+0x56>
10041268:	000007ff 	.word	0x000007ff

1004126c <__gedf2>:
1004126c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004126e:	4657      	mov	r7, sl
10041270:	464e      	mov	r6, r9
10041272:	4645      	mov	r5, r8
10041274:	46de      	mov	lr, fp
10041276:	b5e0      	push	{r5, r6, r7, lr}
10041278:	000d      	movs	r5, r1
1004127a:	030e      	lsls	r6, r1, #12
1004127c:	0049      	lsls	r1, r1, #1
1004127e:	0d49      	lsrs	r1, r1, #21
10041280:	468a      	mov	sl, r1
10041282:	0fdf      	lsrs	r7, r3, #31
10041284:	0fe9      	lsrs	r1, r5, #31
10041286:	46bc      	mov	ip, r7
10041288:	b083      	sub	sp, #12
1004128a:	4f2f      	ldr	r7, [pc, #188]	@ (10041348 <__gedf2+0xdc>)
1004128c:	0004      	movs	r4, r0
1004128e:	4680      	mov	r8, r0
10041290:	9101      	str	r1, [sp, #4]
10041292:	0058      	lsls	r0, r3, #1
10041294:	0319      	lsls	r1, r3, #12
10041296:	4691      	mov	r9, r2
10041298:	0b36      	lsrs	r6, r6, #12
1004129a:	0b09      	lsrs	r1, r1, #12
1004129c:	0d40      	lsrs	r0, r0, #21
1004129e:	45ba      	cmp	sl, r7
100412a0:	d01d      	beq.n	100412de <__gedf2+0x72>
100412a2:	42b8      	cmp	r0, r7
100412a4:	d00d      	beq.n	100412c2 <__gedf2+0x56>
100412a6:	4657      	mov	r7, sl
100412a8:	2f00      	cmp	r7, #0
100412aa:	d12a      	bne.n	10041302 <__gedf2+0x96>
100412ac:	4334      	orrs	r4, r6
100412ae:	2800      	cmp	r0, #0
100412b0:	d124      	bne.n	100412fc <__gedf2+0x90>
100412b2:	430a      	orrs	r2, r1
100412b4:	d036      	beq.n	10041324 <__gedf2+0xb8>
100412b6:	2c00      	cmp	r4, #0
100412b8:	d141      	bne.n	1004133e <__gedf2+0xd2>
100412ba:	4663      	mov	r3, ip
100412bc:	0058      	lsls	r0, r3, #1
100412be:	3801      	subs	r0, #1
100412c0:	e015      	b.n	100412ee <__gedf2+0x82>
100412c2:	4311      	orrs	r1, r2
100412c4:	d138      	bne.n	10041338 <__gedf2+0xcc>
100412c6:	4653      	mov	r3, sl
100412c8:	2b00      	cmp	r3, #0
100412ca:	d101      	bne.n	100412d0 <__gedf2+0x64>
100412cc:	4326      	orrs	r6, r4
100412ce:	d0f4      	beq.n	100412ba <__gedf2+0x4e>
100412d0:	9b01      	ldr	r3, [sp, #4]
100412d2:	4563      	cmp	r3, ip
100412d4:	d107      	bne.n	100412e6 <__gedf2+0x7a>
100412d6:	9b01      	ldr	r3, [sp, #4]
100412d8:	0058      	lsls	r0, r3, #1
100412da:	3801      	subs	r0, #1
100412dc:	e007      	b.n	100412ee <__gedf2+0x82>
100412de:	4326      	orrs	r6, r4
100412e0:	d12a      	bne.n	10041338 <__gedf2+0xcc>
100412e2:	4550      	cmp	r0, sl
100412e4:	d021      	beq.n	1004132a <__gedf2+0xbe>
100412e6:	2001      	movs	r0, #1
100412e8:	9b01      	ldr	r3, [sp, #4]
100412ea:	425f      	negs	r7, r3
100412ec:	4338      	orrs	r0, r7
100412ee:	b003      	add	sp, #12
100412f0:	bcf0      	pop	{r4, r5, r6, r7}
100412f2:	46bb      	mov	fp, r7
100412f4:	46b2      	mov	sl, r6
100412f6:	46a9      	mov	r9, r5
100412f8:	46a0      	mov	r8, r4
100412fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100412fc:	2c00      	cmp	r4, #0
100412fe:	d0dc      	beq.n	100412ba <__gedf2+0x4e>
10041300:	e7e6      	b.n	100412d0 <__gedf2+0x64>
10041302:	2800      	cmp	r0, #0
10041304:	d0ef      	beq.n	100412e6 <__gedf2+0x7a>
10041306:	9b01      	ldr	r3, [sp, #4]
10041308:	4563      	cmp	r3, ip
1004130a:	d1ec      	bne.n	100412e6 <__gedf2+0x7a>
1004130c:	4582      	cmp	sl, r0
1004130e:	dcea      	bgt.n	100412e6 <__gedf2+0x7a>
10041310:	dbe1      	blt.n	100412d6 <__gedf2+0x6a>
10041312:	428e      	cmp	r6, r1
10041314:	d8e7      	bhi.n	100412e6 <__gedf2+0x7a>
10041316:	d1de      	bne.n	100412d6 <__gedf2+0x6a>
10041318:	45c8      	cmp	r8, r9
1004131a:	d8e4      	bhi.n	100412e6 <__gedf2+0x7a>
1004131c:	2000      	movs	r0, #0
1004131e:	45c8      	cmp	r8, r9
10041320:	d2e5      	bcs.n	100412ee <__gedf2+0x82>
10041322:	e7d8      	b.n	100412d6 <__gedf2+0x6a>
10041324:	2c00      	cmp	r4, #0
10041326:	d0e2      	beq.n	100412ee <__gedf2+0x82>
10041328:	e7dd      	b.n	100412e6 <__gedf2+0x7a>
1004132a:	4311      	orrs	r1, r2
1004132c:	d104      	bne.n	10041338 <__gedf2+0xcc>
1004132e:	9b01      	ldr	r3, [sp, #4]
10041330:	4563      	cmp	r3, ip
10041332:	d1d8      	bne.n	100412e6 <__gedf2+0x7a>
10041334:	2000      	movs	r0, #0
10041336:	e7da      	b.n	100412ee <__gedf2+0x82>
10041338:	2002      	movs	r0, #2
1004133a:	4240      	negs	r0, r0
1004133c:	e7d7      	b.n	100412ee <__gedf2+0x82>
1004133e:	9b01      	ldr	r3, [sp, #4]
10041340:	4563      	cmp	r3, ip
10041342:	d0e6      	beq.n	10041312 <__gedf2+0xa6>
10041344:	e7cf      	b.n	100412e6 <__gedf2+0x7a>
10041346:	46c0      	nop			@ (mov r8, r8)
10041348:	000007ff 	.word	0x000007ff

1004134c <__ledf2>:
1004134c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004134e:	4657      	mov	r7, sl
10041350:	464e      	mov	r6, r9
10041352:	4645      	mov	r5, r8
10041354:	46de      	mov	lr, fp
10041356:	b5e0      	push	{r5, r6, r7, lr}
10041358:	000d      	movs	r5, r1
1004135a:	030e      	lsls	r6, r1, #12
1004135c:	0049      	lsls	r1, r1, #1
1004135e:	0d49      	lsrs	r1, r1, #21
10041360:	468a      	mov	sl, r1
10041362:	0fdf      	lsrs	r7, r3, #31
10041364:	0fe9      	lsrs	r1, r5, #31
10041366:	46bc      	mov	ip, r7
10041368:	b083      	sub	sp, #12
1004136a:	4f2e      	ldr	r7, [pc, #184]	@ (10041424 <__ledf2+0xd8>)
1004136c:	0004      	movs	r4, r0
1004136e:	4680      	mov	r8, r0
10041370:	9101      	str	r1, [sp, #4]
10041372:	0058      	lsls	r0, r3, #1
10041374:	0319      	lsls	r1, r3, #12
10041376:	4691      	mov	r9, r2
10041378:	0b36      	lsrs	r6, r6, #12
1004137a:	0b09      	lsrs	r1, r1, #12
1004137c:	0d40      	lsrs	r0, r0, #21
1004137e:	45ba      	cmp	sl, r7
10041380:	d01e      	beq.n	100413c0 <__ledf2+0x74>
10041382:	42b8      	cmp	r0, r7
10041384:	d00d      	beq.n	100413a2 <__ledf2+0x56>
10041386:	4657      	mov	r7, sl
10041388:	2f00      	cmp	r7, #0
1004138a:	d127      	bne.n	100413dc <__ledf2+0x90>
1004138c:	4334      	orrs	r4, r6
1004138e:	2800      	cmp	r0, #0
10041390:	d133      	bne.n	100413fa <__ledf2+0xae>
10041392:	430a      	orrs	r2, r1
10041394:	d034      	beq.n	10041400 <__ledf2+0xb4>
10041396:	2c00      	cmp	r4, #0
10041398:	d140      	bne.n	1004141c <__ledf2+0xd0>
1004139a:	4663      	mov	r3, ip
1004139c:	0058      	lsls	r0, r3, #1
1004139e:	3801      	subs	r0, #1
100413a0:	e015      	b.n	100413ce <__ledf2+0x82>
100413a2:	4311      	orrs	r1, r2
100413a4:	d112      	bne.n	100413cc <__ledf2+0x80>
100413a6:	4653      	mov	r3, sl
100413a8:	2b00      	cmp	r3, #0
100413aa:	d101      	bne.n	100413b0 <__ledf2+0x64>
100413ac:	4326      	orrs	r6, r4
100413ae:	d0f4      	beq.n	1004139a <__ledf2+0x4e>
100413b0:	9b01      	ldr	r3, [sp, #4]
100413b2:	4563      	cmp	r3, ip
100413b4:	d01d      	beq.n	100413f2 <__ledf2+0xa6>
100413b6:	2001      	movs	r0, #1
100413b8:	9b01      	ldr	r3, [sp, #4]
100413ba:	425f      	negs	r7, r3
100413bc:	4338      	orrs	r0, r7
100413be:	e006      	b.n	100413ce <__ledf2+0x82>
100413c0:	4326      	orrs	r6, r4
100413c2:	d103      	bne.n	100413cc <__ledf2+0x80>
100413c4:	4550      	cmp	r0, sl
100413c6:	d1f6      	bne.n	100413b6 <__ledf2+0x6a>
100413c8:	4311      	orrs	r1, r2
100413ca:	d01c      	beq.n	10041406 <__ledf2+0xba>
100413cc:	2002      	movs	r0, #2
100413ce:	b003      	add	sp, #12
100413d0:	bcf0      	pop	{r4, r5, r6, r7}
100413d2:	46bb      	mov	fp, r7
100413d4:	46b2      	mov	sl, r6
100413d6:	46a9      	mov	r9, r5
100413d8:	46a0      	mov	r8, r4
100413da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100413dc:	2800      	cmp	r0, #0
100413de:	d0ea      	beq.n	100413b6 <__ledf2+0x6a>
100413e0:	9b01      	ldr	r3, [sp, #4]
100413e2:	4563      	cmp	r3, ip
100413e4:	d1e7      	bne.n	100413b6 <__ledf2+0x6a>
100413e6:	4582      	cmp	sl, r0
100413e8:	dce5      	bgt.n	100413b6 <__ledf2+0x6a>
100413ea:	db02      	blt.n	100413f2 <__ledf2+0xa6>
100413ec:	428e      	cmp	r6, r1
100413ee:	d8e2      	bhi.n	100413b6 <__ledf2+0x6a>
100413f0:	d00e      	beq.n	10041410 <__ledf2+0xc4>
100413f2:	9b01      	ldr	r3, [sp, #4]
100413f4:	0058      	lsls	r0, r3, #1
100413f6:	3801      	subs	r0, #1
100413f8:	e7e9      	b.n	100413ce <__ledf2+0x82>
100413fa:	2c00      	cmp	r4, #0
100413fc:	d0cd      	beq.n	1004139a <__ledf2+0x4e>
100413fe:	e7d7      	b.n	100413b0 <__ledf2+0x64>
10041400:	2c00      	cmp	r4, #0
10041402:	d0e4      	beq.n	100413ce <__ledf2+0x82>
10041404:	e7d7      	b.n	100413b6 <__ledf2+0x6a>
10041406:	9b01      	ldr	r3, [sp, #4]
10041408:	2000      	movs	r0, #0
1004140a:	4563      	cmp	r3, ip
1004140c:	d0df      	beq.n	100413ce <__ledf2+0x82>
1004140e:	e7d2      	b.n	100413b6 <__ledf2+0x6a>
10041410:	45c8      	cmp	r8, r9
10041412:	d8d0      	bhi.n	100413b6 <__ledf2+0x6a>
10041414:	2000      	movs	r0, #0
10041416:	45c8      	cmp	r8, r9
10041418:	d2d9      	bcs.n	100413ce <__ledf2+0x82>
1004141a:	e7ea      	b.n	100413f2 <__ledf2+0xa6>
1004141c:	9b01      	ldr	r3, [sp, #4]
1004141e:	4563      	cmp	r3, ip
10041420:	d0e4      	beq.n	100413ec <__ledf2+0xa0>
10041422:	e7c8      	b.n	100413b6 <__ledf2+0x6a>
10041424:	000007ff 	.word	0x000007ff

10041428 <BQ27427_Read>:
 * @param	:  Sensor_BQ27427 Ponteiro para a estrutura do sensor.
 * @param	:  Command Endereço do registrador a ser lido.
 * @return	:  Valor de 16 bits do registrador lido. Retorna 0xFFFF em caso de erro.
 * ******************************************************************************
 */
static uint16_t BQ27427_Read(BQ27427_t *sensor_BQ27427, uint16_t command) {
10041428:	b580      	push	{r7, lr}
1004142a:	b088      	sub	sp, #32
1004142c:	af04      	add	r7, sp, #16
1004142e:	6078      	str	r0, [r7, #4]
10041430:	000a      	movs	r2, r1
10041432:	1cbb      	adds	r3, r7, #2
10041434:	801a      	strh	r2, [r3, #0]
    uint8_t aRxBuffer[2];
    uint16_t resultado;

    if (HAL_I2C_Mem_Read(sensor_BQ27427->hi2c, BQ27427_I2C_ADDR, command, I2C_MEMADD_SIZE_8BIT, aRxBuffer, 2, BQ27427_MAX_DELAY) != HAL_OK) {
10041436:	687b      	ldr	r3, [r7, #4]
10041438:	6818      	ldr	r0, [r3, #0]
1004143a:	1cbb      	adds	r3, r7, #2
1004143c:	881a      	ldrh	r2, [r3, #0]
1004143e:	2396      	movs	r3, #150	@ 0x96
10041440:	009b      	lsls	r3, r3, #2
10041442:	9302      	str	r3, [sp, #8]
10041444:	2302      	movs	r3, #2
10041446:	9301      	str	r3, [sp, #4]
10041448:	230c      	movs	r3, #12
1004144a:	18fb      	adds	r3, r7, r3
1004144c:	9300      	str	r3, [sp, #0]
1004144e:	2301      	movs	r3, #1
10041450:	21aa      	movs	r1, #170	@ 0xaa
10041452:	f002 f939 	bl	100436c8 <HAL_I2C_Mem_Read>
10041456:	1e03      	subs	r3, r0, #0
10041458:	d005      	beq.n	10041466 <BQ27427_Read+0x3e>
        resultado = 0xFFFF; // Retorna um valor inválido em caso de falha
1004145a:	230e      	movs	r3, #14
1004145c:	18fb      	adds	r3, r7, r3
1004145e:	2201      	movs	r2, #1
10041460:	4252      	negs	r2, r2
10041462:	801a      	strh	r2, [r3, #0]
10041464:	e00d      	b.n	10041482 <BQ27427_Read+0x5a>
    } else {
        resultado = (aRxBuffer[1] << 8) | aRxBuffer[0]; // Concatena os bytes em um valor de 16 bits
10041466:	210c      	movs	r1, #12
10041468:	187b      	adds	r3, r7, r1
1004146a:	785b      	ldrb	r3, [r3, #1]
1004146c:	b21b      	sxth	r3, r3
1004146e:	021b      	lsls	r3, r3, #8
10041470:	b21a      	sxth	r2, r3
10041472:	187b      	adds	r3, r7, r1
10041474:	781b      	ldrb	r3, [r3, #0]
10041476:	b21b      	sxth	r3, r3
10041478:	4313      	orrs	r3, r2
1004147a:	b21a      	sxth	r2, r3
1004147c:	230e      	movs	r3, #14
1004147e:	18fb      	adds	r3, r7, r3
10041480:	801a      	strh	r2, [r3, #0]
    }
    return resultado;
10041482:	230e      	movs	r3, #14
10041484:	18fb      	adds	r3, r7, r3
10041486:	881b      	ldrh	r3, [r3, #0]
}
10041488:	0018      	movs	r0, r3
1004148a:	46bd      	mov	sp, r7
1004148c:	b004      	add	sp, #16
1004148e:	bd80      	pop	{r7, pc}

10041490 <BQ27427_Write>:
 * @param   len             Quantidade de bytes a escrever.
 * @return  Código de status HAL (HAL_OK em sucesso).
 * ******************************************************************************
 */

static HAL_StatusTypeDef BQ27427_Write(BQ27427_t *sensor_BQ27427, uint8_t command, const uint8_t *aTxBuffer, uint8_t len){
10041490:	b5b0      	push	{r4, r5, r7, lr}
10041492:	b088      	sub	sp, #32
10041494:	af04      	add	r7, sp, #16
10041496:	60f8      	str	r0, [r7, #12]
10041498:	0008      	movs	r0, r1
1004149a:	607a      	str	r2, [r7, #4]
1004149c:	0019      	movs	r1, r3
1004149e:	240b      	movs	r4, #11
100414a0:	193b      	adds	r3, r7, r4
100414a2:	1c02      	adds	r2, r0, #0
100414a4:	701a      	strb	r2, [r3, #0]
100414a6:	250a      	movs	r5, #10
100414a8:	197b      	adds	r3, r7, r5
100414aa:	1c0a      	adds	r2, r1, #0
100414ac:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Write(sensor_BQ27427->hi2c, BQ27427_I2C_ADDR, command, I2C_MEMADD_SIZE_8BIT, (uint8_t*)aTxBuffer, len, BQ27427_MAX_DELAY);
100414ae:	68fb      	ldr	r3, [r7, #12]
100414b0:	6818      	ldr	r0, [r3, #0]
100414b2:	193b      	adds	r3, r7, r4
100414b4:	781b      	ldrb	r3, [r3, #0]
100414b6:	b299      	uxth	r1, r3
100414b8:	197b      	adds	r3, r7, r5
100414ba:	781b      	ldrb	r3, [r3, #0]
100414bc:	b29b      	uxth	r3, r3
100414be:	2296      	movs	r2, #150	@ 0x96
100414c0:	0092      	lsls	r2, r2, #2
100414c2:	9202      	str	r2, [sp, #8]
100414c4:	9301      	str	r3, [sp, #4]
100414c6:	687b      	ldr	r3, [r7, #4]
100414c8:	9300      	str	r3, [sp, #0]
100414ca:	2301      	movs	r3, #1
100414cc:	000a      	movs	r2, r1
100414ce:	21aa      	movs	r1, #170	@ 0xaa
100414d0:	f001 ffcc 	bl	1004346c <HAL_I2C_Mem_Write>
100414d4:	0003      	movs	r3, r0
}
100414d6:	0018      	movs	r0, r3
100414d8:	46bd      	mov	sp, r7
100414da:	b004      	add	sp, #16
100414dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

100414e0 <BQ27427_Init>:
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor.
 * @param hi2c Ponteiro para a interface I2C utilizada na comunicação.
 * ******************************************************************************
 */

void BQ27427_Init(BQ27427_t *sensor_BQ27427, I2C_HandleTypeDef *hi2c) {
100414e0:	b5b0      	push	{r4, r5, r7, lr}
100414e2:	b084      	sub	sp, #16
100414e4:	af00      	add	r7, sp, #0
100414e6:	6078      	str	r0, [r7, #4]
100414e8:	6039      	str	r1, [r7, #0]
    sensor_BQ27427->hi2c = hi2c; // Associa a interface I2C ao sensor
100414ea:	687b      	ldr	r3, [r7, #4]
100414ec:	683a      	ldr	r2, [r7, #0]
100414ee:	601a      	str	r2, [r3, #0]
    uint16_t capacity = BQ27427_GetDesignCapacity(sensor_BQ27427);
100414f0:	250e      	movs	r5, #14
100414f2:	197c      	adds	r4, r7, r5
100414f4:	687b      	ldr	r3, [r7, #4]
100414f6:	0018      	movs	r0, r3
100414f8:	f000 ffbc 	bl	10042474 <BQ27427_GetDesignCapacity>
100414fc:	0003      	movs	r3, r0
100414fe:	8023      	strh	r3, [r4, #0]
    if (capacity != BATERRY_CAPACITY){
10041500:	197b      	adds	r3, r7, r5
10041502:	881b      	ldrh	r3, [r3, #0]
10041504:	2b64      	cmp	r3, #100	@ 0x64
10041506:	d00a      	beq.n	1004151e <BQ27427_Init+0x3e>
		BQ27427_SetChemistryProfile(sensor_BQ27427, CHEM_B);
10041508:	687b      	ldr	r3, [r7, #4]
1004150a:	2101      	movs	r1, #1
1004150c:	0018      	movs	r0, r3
1004150e:	f000 fef9 	bl	10042304 <BQ27427_SetChemistryProfile>
		BQ27427_SetDesignCapacity(sensor_BQ27427, BATERRY_CAPACITY, BATERRY_TERMINATE_VOLTAGE);
10041512:	4a05      	ldr	r2, [pc, #20]	@ (10041528 <BQ27427_Init+0x48>)
10041514:	687b      	ldr	r3, [r7, #4]
10041516:	2164      	movs	r1, #100	@ 0x64
10041518:	0018      	movs	r0, r3
1004151a:	f000 f9d1 	bl	100418c0 <BQ27427_SetDesignCapacity>
    }
}
1004151e:	46c0      	nop			@ (mov r8, r8)
10041520:	46bd      	mov	sp, r7
10041522:	b004      	add	sp, #16
10041524:	bdb0      	pop	{r4, r5, r7, pc}
10041526:	46c0      	nop			@ (mov r8, r8)
10041528:	00000dac 	.word	0x00000dac

1004152c <BQ27427_ReadVoltage>:
 * @brief Lê a voltagem atual da bateria em mV.
 * @return Voltagem da bateria.
 * ******************************************************************************
 */

uint16_t BQ27427_ReadVoltage(BQ27427_t *sensor_BQ27427) {
1004152c:	b580      	push	{r7, lr}
1004152e:	b082      	sub	sp, #8
10041530:	af00      	add	r7, sp, #0
10041532:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0504);
10041534:	4a05      	ldr	r2, [pc, #20]	@ (1004154c <BQ27427_ReadVoltage+0x20>)
10041536:	687b      	ldr	r3, [r7, #4]
10041538:	0011      	movs	r1, r2
1004153a:	0018      	movs	r0, r3
1004153c:	f7ff ff74 	bl	10041428 <BQ27427_Read>
10041540:	0003      	movs	r3, r0
}
10041542:	0018      	movs	r0, r3
10041544:	46bd      	mov	sp, r7
10041546:	b002      	add	sp, #8
10041548:	bd80      	pop	{r7, pc}
1004154a:	46c0      	nop			@ (mov r8, r8)
1004154c:	00000504 	.word	0x00000504

10041550 <BQ27427_ReadFlags>:
 * @brief Lê os flags de status do sensor.
 * @return Flags indicando o estado da bateria.
 * ******************************************************************************
 */

uint16_t BQ27427_ReadFlags(BQ27427_t *sensor_BQ27427) {
10041550:	b580      	push	{r7, lr}
10041552:	b082      	sub	sp, #8
10041554:	af00      	add	r7, sp, #0
10041556:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0706);
10041558:	4a05      	ldr	r2, [pc, #20]	@ (10041570 <BQ27427_ReadFlags+0x20>)
1004155a:	687b      	ldr	r3, [r7, #4]
1004155c:	0011      	movs	r1, r2
1004155e:	0018      	movs	r0, r3
10041560:	f7ff ff62 	bl	10041428 <BQ27427_Read>
10041564:	0003      	movs	r3, r0
}
10041566:	0018      	movs	r0, r3
10041568:	46bd      	mov	sp, r7
1004156a:	b002      	add	sp, #8
1004156c:	bd80      	pop	{r7, pc}
1004156e:	46c0      	nop			@ (mov r8, r8)
10041570:	00000706 	.word	0x00000706

10041574 <BQ27427_ReadNominalAvailableCapacity>:
 * @brief Lê a capacidade nominal disponível da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade nominal disponível em mAh.
 * ******************************************************************************
 */
uint16_t BQ27427_ReadNominalAvailableCapacity(BQ27427_t *sensor_BQ27427) {
10041574:	b580      	push	{r7, lr}
10041576:	b082      	sub	sp, #8
10041578:	af00      	add	r7, sp, #0
1004157a:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0908);
1004157c:	4a05      	ldr	r2, [pc, #20]	@ (10041594 <BQ27427_ReadNominalAvailableCapacity+0x20>)
1004157e:	687b      	ldr	r3, [r7, #4]
10041580:	0011      	movs	r1, r2
10041582:	0018      	movs	r0, r3
10041584:	f7ff ff50 	bl	10041428 <BQ27427_Read>
10041588:	0003      	movs	r3, r0
}
1004158a:	0018      	movs	r0, r3
1004158c:	46bd      	mov	sp, r7
1004158e:	b002      	add	sp, #8
10041590:	bd80      	pop	{r7, pc}
10041592:	46c0      	nop			@ (mov r8, r8)
10041594:	00000908 	.word	0x00000908

10041598 <BQ27427_ReadFullAvailableCapacity>:
 * @brief Lê a capacidade total disponível da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade total disponível em mAh.
 * ******************************************************************************
 */
uint16_t BQ27427_ReadFullAvailableCapacity(BQ27427_t *sensor_BQ27427) {
10041598:	b580      	push	{r7, lr}
1004159a:	b082      	sub	sp, #8
1004159c:	af00      	add	r7, sp, #0
1004159e:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0A0B);
100415a0:	4a05      	ldr	r2, [pc, #20]	@ (100415b8 <BQ27427_ReadFullAvailableCapacity+0x20>)
100415a2:	687b      	ldr	r3, [r7, #4]
100415a4:	0011      	movs	r1, r2
100415a6:	0018      	movs	r0, r3
100415a8:	f7ff ff3e 	bl	10041428 <BQ27427_Read>
100415ac:	0003      	movs	r3, r0
}
100415ae:	0018      	movs	r0, r3
100415b0:	46bd      	mov	sp, r7
100415b2:	b002      	add	sp, #8
100415b4:	bd80      	pop	{r7, pc}
100415b6:	46c0      	nop			@ (mov r8, r8)
100415b8:	00000a0b 	.word	0x00000a0b

100415bc <BQ27427_ReadRemainingCapacity>:
 * @brief Lê a capacidade restante da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade restante em mAh.
 * ******************************************************************************
 */
uint16_t BQ27427_ReadRemainingCapacity(BQ27427_t *sensor_BQ27427) {
100415bc:	b580      	push	{r7, lr}
100415be:	b082      	sub	sp, #8
100415c0:	af00      	add	r7, sp, #0
100415c2:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0D0C);
100415c4:	4a05      	ldr	r2, [pc, #20]	@ (100415dc <BQ27427_ReadRemainingCapacity+0x20>)
100415c6:	687b      	ldr	r3, [r7, #4]
100415c8:	0011      	movs	r1, r2
100415ca:	0018      	movs	r0, r3
100415cc:	f7ff ff2c 	bl	10041428 <BQ27427_Read>
100415d0:	0003      	movs	r3, r0
}
100415d2:	0018      	movs	r0, r3
100415d4:	46bd      	mov	sp, r7
100415d6:	b002      	add	sp, #8
100415d8:	bd80      	pop	{r7, pc}
100415da:	46c0      	nop			@ (mov r8, r8)
100415dc:	00000d0c 	.word	0x00000d0c

100415e0 <BQ27427_ReadFullChargeCapacity>:
 * @brief Lê a capacidade total de carga da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade total de carga em mAh.
 * ******************************************************************************
 */
uint16_t BQ27427_ReadFullChargeCapacity(BQ27427_t *sensor_BQ27427) {
100415e0:	b580      	push	{r7, lr}
100415e2:	b082      	sub	sp, #8
100415e4:	af00      	add	r7, sp, #0
100415e6:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0E0F);
100415e8:	4a05      	ldr	r2, [pc, #20]	@ (10041600 <BQ27427_ReadFullChargeCapacity+0x20>)
100415ea:	687b      	ldr	r3, [r7, #4]
100415ec:	0011      	movs	r1, r2
100415ee:	0018      	movs	r0, r3
100415f0:	f7ff ff1a 	bl	10041428 <BQ27427_Read>
100415f4:	0003      	movs	r3, r0
}
100415f6:	0018      	movs	r0, r3
100415f8:	46bd      	mov	sp, r7
100415fa:	b002      	add	sp, #8
100415fc:	bd80      	pop	{r7, pc}
100415fe:	46c0      	nop			@ (mov r8, r8)
10041600:	00000e0f 	.word	0x00000e0f

10041604 <BQ27427_ReadAverageCurrent>:
 * @brief Lê a corrente média consumida pela bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Corrente média em mA.
 * ******************************************************************************
 */
uint16_t BQ27427_ReadAverageCurrent(BQ27427_t *sensor_BQ27427) {
10041604:	b580      	push	{r7, lr}
10041606:	b082      	sub	sp, #8
10041608:	af00      	add	r7, sp, #0
1004160a:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x1110);
1004160c:	4a05      	ldr	r2, [pc, #20]	@ (10041624 <BQ27427_ReadAverageCurrent+0x20>)
1004160e:	687b      	ldr	r3, [r7, #4]
10041610:	0011      	movs	r1, r2
10041612:	0018      	movs	r0, r3
10041614:	f7ff ff08 	bl	10041428 <BQ27427_Read>
10041618:	0003      	movs	r3, r0
}
1004161a:	0018      	movs	r0, r3
1004161c:	46bd      	mov	sp, r7
1004161e:	b002      	add	sp, #8
10041620:	bd80      	pop	{r7, pc}
10041622:	46c0      	nop			@ (mov r8, r8)
10041624:	00001110 	.word	0x00001110

10041628 <BQ27427_ReadStateOfCharge>:
 * @brief Lê o estado de carga da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Estado de carga em porcentagem (%).
 * ******************************************************************************
 */
uint16_t BQ27427_ReadStateOfCharge(BQ27427_t *sensor_BQ27427) {
10041628:	b580      	push	{r7, lr}
1004162a:	b082      	sub	sp, #8
1004162c:	af00      	add	r7, sp, #0
1004162e:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x1D1C);
10041630:	4a05      	ldr	r2, [pc, #20]	@ (10041648 <BQ27427_ReadStateOfCharge+0x20>)
10041632:	687b      	ldr	r3, [r7, #4]
10041634:	0011      	movs	r1, r2
10041636:	0018      	movs	r0, r3
10041638:	f7ff fef6 	bl	10041428 <BQ27427_Read>
1004163c:	0003      	movs	r3, r0
}
1004163e:	0018      	movs	r0, r3
10041640:	46bd      	mov	sp, r7
10041642:	b002      	add	sp, #8
10041644:	bd80      	pop	{r7, pc}
10041646:	46c0      	nop			@ (mov r8, r8)
10041648:	00001d1c 	.word	0x00001d1c

1004164c <BQ27427_ReadRemainingCapacityUnfiltered>:
 * @brief Lê a capacidade restante não filtrada da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade restante não filtrada em mAh.
 * ******************************************************************************
 */
uint16_t BQ27427_ReadRemainingCapacityUnfiltered(BQ27427_t *sensor_BQ27427) {
1004164c:	b580      	push	{r7, lr}
1004164e:	b082      	sub	sp, #8
10041650:	af00      	add	r7, sp, #0
10041652:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x2928);
10041654:	4a05      	ldr	r2, [pc, #20]	@ (1004166c <BQ27427_ReadRemainingCapacityUnfiltered+0x20>)
10041656:	687b      	ldr	r3, [r7, #4]
10041658:	0011      	movs	r1, r2
1004165a:	0018      	movs	r0, r3
1004165c:	f7ff fee4 	bl	10041428 <BQ27427_Read>
10041660:	0003      	movs	r3, r0
}
10041662:	0018      	movs	r0, r3
10041664:	46bd      	mov	sp, r7
10041666:	b002      	add	sp, #8
10041668:	bd80      	pop	{r7, pc}
1004166a:	46c0      	nop			@ (mov r8, r8)
1004166c:	00002928 	.word	0x00002928

10041670 <BQ27427_ReadInternal>:
 * @param   len             Quantidade de bytes a ler.
 * @return  Código de status HAL (HAL_OK em sucesso).
 * ******************************************************************************
 */

static HAL_StatusTypeDef BQ27427_ReadInternal(BQ27427_t *sensor_BQ27427, uint8_t command, uint8_t *aTxBuffer, uint8_t len){
10041670:	b5b0      	push	{r4, r5, r7, lr}
10041672:	b088      	sub	sp, #32
10041674:	af04      	add	r7, sp, #16
10041676:	60f8      	str	r0, [r7, #12]
10041678:	0008      	movs	r0, r1
1004167a:	607a      	str	r2, [r7, #4]
1004167c:	0019      	movs	r1, r3
1004167e:	240b      	movs	r4, #11
10041680:	193b      	adds	r3, r7, r4
10041682:	1c02      	adds	r2, r0, #0
10041684:	701a      	strb	r2, [r3, #0]
10041686:	250a      	movs	r5, #10
10041688:	197b      	adds	r3, r7, r5
1004168a:	1c0a      	adds	r2, r1, #0
1004168c:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Read(sensor_BQ27427->hi2c, BQ27427_I2C_ADDR, command, I2C_MEMADD_SIZE_8BIT, aTxBuffer, len, BQ27427_MAX_DELAY);
1004168e:	68fb      	ldr	r3, [r7, #12]
10041690:	6818      	ldr	r0, [r3, #0]
10041692:	193b      	adds	r3, r7, r4
10041694:	781b      	ldrb	r3, [r3, #0]
10041696:	b299      	uxth	r1, r3
10041698:	197b      	adds	r3, r7, r5
1004169a:	781b      	ldrb	r3, [r3, #0]
1004169c:	b29b      	uxth	r3, r3
1004169e:	2296      	movs	r2, #150	@ 0x96
100416a0:	0092      	lsls	r2, r2, #2
100416a2:	9202      	str	r2, [sp, #8]
100416a4:	9301      	str	r3, [sp, #4]
100416a6:	687b      	ldr	r3, [r7, #4]
100416a8:	9300      	str	r3, [sp, #0]
100416aa:	2301      	movs	r3, #1
100416ac:	000a      	movs	r2, r1
100416ae:	21aa      	movs	r1, #170	@ 0xaa
100416b0:	f002 f80a 	bl	100436c8 <HAL_I2C_Mem_Read>
100416b4:	0003      	movs	r3, r0
}
100416b6:	0018      	movs	r0, r3
100416b8:	46bd      	mov	sp, r7
100416ba:	b004      	add	sp, #16
100416bc:	bdb0      	pop	{r4, r5, r7, pc}

100416be <BQ27427_selectDataBlock>:
 * @param   offset          Offset dentro do bloco (DataBlockOffset).
 * @return  Código de status HAL (HAL_OK em sucesso).
 * ******************************************************************************
 */

static HAL_StatusTypeDef BQ27427_selectDataBlock(BQ27427_t *sensor_BQ27427, uint8_t blockClass, uint8_t offset){
100416be:	b5b0      	push	{r4, r5, r7, lr}
100416c0:	b084      	sub	sp, #16
100416c2:	af00      	add	r7, sp, #0
100416c4:	6078      	str	r0, [r7, #4]
100416c6:	0008      	movs	r0, r1
100416c8:	0011      	movs	r1, r2
100416ca:	1cfb      	adds	r3, r7, #3
100416cc:	1c02      	adds	r2, r0, #0
100416ce:	701a      	strb	r2, [r3, #0]
100416d0:	1cbb      	adds	r3, r7, #2
100416d2:	1c0a      	adds	r2, r1, #0
100416d4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret;
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_REG_BLOCKDATA_CTRL, (uint8_t[]){0x00}, 1);
100416d6:	210c      	movs	r1, #12
100416d8:	187b      	adds	r3, r7, r1
100416da:	2200      	movs	r2, #0
100416dc:	701a      	strb	r2, [r3, #0]
100416de:	250f      	movs	r5, #15
100416e0:	197c      	adds	r4, r7, r5
100416e2:	187a      	adds	r2, r7, r1
100416e4:	6878      	ldr	r0, [r7, #4]
100416e6:	2301      	movs	r3, #1
100416e8:	2161      	movs	r1, #97	@ 0x61
100416ea:	f7ff fed1 	bl	10041490 <BQ27427_Write>
100416ee:	0003      	movs	r3, r0
100416f0:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
100416f2:	197b      	adds	r3, r7, r5
100416f4:	781b      	ldrb	r3, [r3, #0]
100416f6:	2b00      	cmp	r3, #0
100416f8:	d002      	beq.n	10041700 <BQ27427_selectDataBlock+0x42>
100416fa:	197b      	adds	r3, r7, r5
100416fc:	781b      	ldrb	r3, [r3, #0]
100416fe:	e017      	b.n	10041730 <BQ27427_selectDataBlock+0x72>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_REG_DATACLASS, &blockClass, 1);
10041700:	250f      	movs	r5, #15
10041702:	197c      	adds	r4, r7, r5
10041704:	1cfa      	adds	r2, r7, #3
10041706:	6878      	ldr	r0, [r7, #4]
10041708:	2301      	movs	r3, #1
1004170a:	213e      	movs	r1, #62	@ 0x3e
1004170c:	f7ff fec0 	bl	10041490 <BQ27427_Write>
10041710:	0003      	movs	r3, r0
10041712:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041714:	197b      	adds	r3, r7, r5
10041716:	781b      	ldrb	r3, [r3, #0]
10041718:	2b00      	cmp	r3, #0
1004171a:	d002      	beq.n	10041722 <BQ27427_selectDataBlock+0x64>
1004171c:	197b      	adds	r3, r7, r5
1004171e:	781b      	ldrb	r3, [r3, #0]
10041720:	e006      	b.n	10041730 <BQ27427_selectDataBlock+0x72>
    return BQ27427_Write(sensor_BQ27427, BQ27427_REG_DATAOFFSET, &offset, 1);
10041722:	1cba      	adds	r2, r7, #2
10041724:	6878      	ldr	r0, [r7, #4]
10041726:	2301      	movs	r3, #1
10041728:	213f      	movs	r1, #63	@ 0x3f
1004172a:	f7ff feb1 	bl	10041490 <BQ27427_Write>
1004172e:	0003      	movs	r3, r0
}
10041730:	0018      	movs	r0, r3
10041732:	46bd      	mov	sp, r7
10041734:	b004      	add	sp, #16
10041736:	bdb0      	pop	{r4, r5, r7, pc}

10041738 <BQ27427_calcChecksum>:
 * @param   lsb_mWh        Byte LSB novo do campo Energy (mWh).
 * @return  Novo valor de checksum calculado para gravação no bloco de dados.
 * ******************************************************************************
 */

static uint8_t BQ27427_calcChecksum(uint8_t oldCsum, uint8_t old_msb_DC, uint8_t old_lsb_DC, uint8_t old_msb_CTTC, uint8_t old_lsb_CTTC, uint8_t old_msb_DCT, uint8_t old_lsb_DCT, uint8_t old_msb_CCT, uint8_t old_lsb_CCT, uint8_t old_msb_QC, uint8_t old_lsb_QC, uint8_t old_msb_mWh, uint8_t old_lsb_mWh, uint8_t old_msb_TV, uint8_t old_lsb_TV, uint8_t msb_DC, uint8_t lsb_DC, uint8_t msb_CTTC, uint8_t lsb_CTTC, uint8_t msb_DCT, uint8_t lsb_DCT, uint8_t msb_CCT, uint8_t lsb_CCT, uint8_t msb_QC, uint8_t lsb_QC, uint8_t msb_TV, uint8_t lsb_TV, uint8_t msb_mWh, uint8_t lsb_mWh){
10041738:	b5b0      	push	{r4, r5, r7, lr}
1004173a:	b084      	sub	sp, #16
1004173c:	af00      	add	r7, sp, #0
1004173e:	0005      	movs	r5, r0
10041740:	000c      	movs	r4, r1
10041742:	0010      	movs	r0, r2
10041744:	0019      	movs	r1, r3
10041746:	1dfb      	adds	r3, r7, #7
10041748:	1c2a      	adds	r2, r5, #0
1004174a:	701a      	strb	r2, [r3, #0]
1004174c:	1dbb      	adds	r3, r7, #6
1004174e:	1c22      	adds	r2, r4, #0
10041750:	701a      	strb	r2, [r3, #0]
10041752:	1d7b      	adds	r3, r7, #5
10041754:	1c02      	adds	r2, r0, #0
10041756:	701a      	strb	r2, [r3, #0]
10041758:	1d3b      	adds	r3, r7, #4
1004175a:	1c0a      	adds	r2, r1, #0
1004175c:	701a      	strb	r2, [r3, #0]
    uint8_t old_sum = (0xFF - oldCsum) & 0xFF;
1004175e:	210f      	movs	r1, #15
10041760:	187b      	adds	r3, r7, r1
10041762:	1dfa      	adds	r2, r7, #7
10041764:	7812      	ldrb	r2, [r2, #0]
10041766:	43d2      	mvns	r2, r2
10041768:	701a      	strb	r2, [r3, #0]
	uint8_t new_sum = (old_sum - old_msb_DC - old_lsb_DC - old_msb_CTTC - old_lsb_CTTC - old_msb_DCT - old_lsb_DCT - old_msb_CCT - old_lsb_CCT - old_msb_QC - old_lsb_mWh - old_msb_mWh - old_lsb_QC - old_msb_TV - old_lsb_TV + msb_DC + lsb_DC + msb_CTTC + lsb_CTTC + msb_DCT + lsb_DCT + msb_CCT + lsb_CCT + msb_QC + lsb_QC + msb_TV + lsb_TV + msb_mWh + lsb_mWh) & 0xFF;
1004176a:	187a      	adds	r2, r7, r1
1004176c:	1dbb      	adds	r3, r7, #6
1004176e:	7812      	ldrb	r2, [r2, #0]
10041770:	781b      	ldrb	r3, [r3, #0]
10041772:	1ad3      	subs	r3, r2, r3
10041774:	b2da      	uxtb	r2, r3
10041776:	1d7b      	adds	r3, r7, #5
10041778:	781b      	ldrb	r3, [r3, #0]
1004177a:	1ad3      	subs	r3, r2, r3
1004177c:	b2da      	uxtb	r2, r3
1004177e:	1d3b      	adds	r3, r7, #4
10041780:	781b      	ldrb	r3, [r3, #0]
10041782:	1ad3      	subs	r3, r2, r3
10041784:	b2da      	uxtb	r2, r3
10041786:	2120      	movs	r1, #32
10041788:	187b      	adds	r3, r7, r1
1004178a:	781b      	ldrb	r3, [r3, #0]
1004178c:	1ad3      	subs	r3, r2, r3
1004178e:	b2da      	uxtb	r2, r3
10041790:	2324      	movs	r3, #36	@ 0x24
10041792:	18fb      	adds	r3, r7, r3
10041794:	781b      	ldrb	r3, [r3, #0]
10041796:	1ad3      	subs	r3, r2, r3
10041798:	b2da      	uxtb	r2, r3
1004179a:	2328      	movs	r3, #40	@ 0x28
1004179c:	18fb      	adds	r3, r7, r3
1004179e:	781b      	ldrb	r3, [r3, #0]
100417a0:	1ad3      	subs	r3, r2, r3
100417a2:	b2da      	uxtb	r2, r3
100417a4:	232c      	movs	r3, #44	@ 0x2c
100417a6:	18fb      	adds	r3, r7, r3
100417a8:	781b      	ldrb	r3, [r3, #0]
100417aa:	1ad3      	subs	r3, r2, r3
100417ac:	b2da      	uxtb	r2, r3
100417ae:	2330      	movs	r3, #48	@ 0x30
100417b0:	18fb      	adds	r3, r7, r3
100417b2:	781b      	ldrb	r3, [r3, #0]
100417b4:	1ad3      	subs	r3, r2, r3
100417b6:	b2da      	uxtb	r2, r3
100417b8:	2334      	movs	r3, #52	@ 0x34
100417ba:	18fb      	adds	r3, r7, r3
100417bc:	781b      	ldrb	r3, [r3, #0]
100417be:	1ad3      	subs	r3, r2, r3
100417c0:	b2da      	uxtb	r2, r3
100417c2:	2320      	movs	r3, #32
100417c4:	185b      	adds	r3, r3, r1
100417c6:	19db      	adds	r3, r3, r7
100417c8:	781b      	ldrb	r3, [r3, #0]
100417ca:	1ad3      	subs	r3, r2, r3
100417cc:	b2da      	uxtb	r2, r3
100417ce:	233c      	movs	r3, #60	@ 0x3c
100417d0:	18fb      	adds	r3, r7, r3
100417d2:	781b      	ldrb	r3, [r3, #0]
100417d4:	1ad3      	subs	r3, r2, r3
100417d6:	b2da      	uxtb	r2, r3
100417d8:	2338      	movs	r3, #56	@ 0x38
100417da:	18fb      	adds	r3, r7, r3
100417dc:	781b      	ldrb	r3, [r3, #0]
100417de:	1ad3      	subs	r3, r2, r3
100417e0:	b2da      	uxtb	r2, r3
100417e2:	2324      	movs	r3, #36	@ 0x24
100417e4:	0008      	movs	r0, r1
100417e6:	181b      	adds	r3, r3, r0
100417e8:	19db      	adds	r3, r3, r7
100417ea:	781b      	ldrb	r3, [r3, #0]
100417ec:	1ad3      	subs	r3, r2, r3
100417ee:	b2da      	uxtb	r2, r3
100417f0:	2328      	movs	r3, #40	@ 0x28
100417f2:	181b      	adds	r3, r3, r0
100417f4:	19db      	adds	r3, r3, r7
100417f6:	781b      	ldrb	r3, [r3, #0]
100417f8:	1ad3      	subs	r3, r2, r3
100417fa:	b2da      	uxtb	r2, r3
100417fc:	232c      	movs	r3, #44	@ 0x2c
100417fe:	181b      	adds	r3, r3, r0
10041800:	19db      	adds	r3, r3, r7
10041802:	781b      	ldrb	r3, [r3, #0]
10041804:	18d3      	adds	r3, r2, r3
10041806:	b2da      	uxtb	r2, r3
10041808:	2330      	movs	r3, #48	@ 0x30
1004180a:	181b      	adds	r3, r3, r0
1004180c:	19db      	adds	r3, r3, r7
1004180e:	781b      	ldrb	r3, [r3, #0]
10041810:	18d3      	adds	r3, r2, r3
10041812:	b2da      	uxtb	r2, r3
10041814:	2334      	movs	r3, #52	@ 0x34
10041816:	181b      	adds	r3, r3, r0
10041818:	19db      	adds	r3, r3, r7
1004181a:	781b      	ldrb	r3, [r3, #0]
1004181c:	18d3      	adds	r3, r2, r3
1004181e:	b2da      	uxtb	r2, r3
10041820:	2338      	movs	r3, #56	@ 0x38
10041822:	181b      	adds	r3, r3, r0
10041824:	19db      	adds	r3, r3, r7
10041826:	781b      	ldrb	r3, [r3, #0]
10041828:	18d3      	adds	r3, r2, r3
1004182a:	b2da      	uxtb	r2, r3
1004182c:	233c      	movs	r3, #60	@ 0x3c
1004182e:	181b      	adds	r3, r3, r0
10041830:	19db      	adds	r3, r3, r7
10041832:	781b      	ldrb	r3, [r3, #0]
10041834:	18d3      	adds	r3, r2, r3
10041836:	b2da      	uxtb	r2, r3
10041838:	2340      	movs	r3, #64	@ 0x40
1004183a:	181b      	adds	r3, r3, r0
1004183c:	19db      	adds	r3, r3, r7
1004183e:	781b      	ldrb	r3, [r3, #0]
10041840:	18d3      	adds	r3, r2, r3
10041842:	b2da      	uxtb	r2, r3
10041844:	2344      	movs	r3, #68	@ 0x44
10041846:	181b      	adds	r3, r3, r0
10041848:	19db      	adds	r3, r3, r7
1004184a:	781b      	ldrb	r3, [r3, #0]
1004184c:	18d3      	adds	r3, r2, r3
1004184e:	b2da      	uxtb	r2, r3
10041850:	2348      	movs	r3, #72	@ 0x48
10041852:	181b      	adds	r3, r3, r0
10041854:	19db      	adds	r3, r3, r7
10041856:	781b      	ldrb	r3, [r3, #0]
10041858:	18d3      	adds	r3, r2, r3
1004185a:	b2da      	uxtb	r2, r3
1004185c:	234c      	movs	r3, #76	@ 0x4c
1004185e:	181b      	adds	r3, r3, r0
10041860:	19db      	adds	r3, r3, r7
10041862:	781b      	ldrb	r3, [r3, #0]
10041864:	18d3      	adds	r3, r2, r3
10041866:	b2da      	uxtb	r2, r3
10041868:	2350      	movs	r3, #80	@ 0x50
1004186a:	181b      	adds	r3, r3, r0
1004186c:	19db      	adds	r3, r3, r7
1004186e:	781b      	ldrb	r3, [r3, #0]
10041870:	18d3      	adds	r3, r2, r3
10041872:	b2da      	uxtb	r2, r3
10041874:	2354      	movs	r3, #84	@ 0x54
10041876:	181b      	adds	r3, r3, r0
10041878:	19db      	adds	r3, r3, r7
1004187a:	781b      	ldrb	r3, [r3, #0]
1004187c:	18d3      	adds	r3, r2, r3
1004187e:	b2da      	uxtb	r2, r3
10041880:	2358      	movs	r3, #88	@ 0x58
10041882:	181b      	adds	r3, r3, r0
10041884:	19db      	adds	r3, r3, r7
10041886:	781b      	ldrb	r3, [r3, #0]
10041888:	18d3      	adds	r3, r2, r3
1004188a:	b2da      	uxtb	r2, r3
1004188c:	235c      	movs	r3, #92	@ 0x5c
1004188e:	181b      	adds	r3, r3, r0
10041890:	19db      	adds	r3, r3, r7
10041892:	781b      	ldrb	r3, [r3, #0]
10041894:	18d3      	adds	r3, r2, r3
10041896:	b2d9      	uxtb	r1, r3
10041898:	240e      	movs	r4, #14
1004189a:	193b      	adds	r3, r7, r4
1004189c:	2260      	movs	r2, #96	@ 0x60
1004189e:	1812      	adds	r2, r2, r0
100418a0:	19d2      	adds	r2, r2, r7
100418a2:	7812      	ldrb	r2, [r2, #0]
100418a4:	188a      	adds	r2, r1, r2
100418a6:	701a      	strb	r2, [r3, #0]
	uint8_t newCsum = (0xFF - new_sum) & 0xFF;
100418a8:	210d      	movs	r1, #13
100418aa:	187b      	adds	r3, r7, r1
100418ac:	193a      	adds	r2, r7, r4
100418ae:	7812      	ldrb	r2, [r2, #0]
100418b0:	43d2      	mvns	r2, r2
100418b2:	701a      	strb	r2, [r3, #0]

    return newCsum;
100418b4:	187b      	adds	r3, r7, r1
100418b6:	781b      	ldrb	r3, [r3, #0]
}
100418b8:	0018      	movs	r0, r3
100418ba:	46bd      	mov	sp, r7
100418bc:	b004      	add	sp, #16
100418be:	bdb0      	pop	{r4, r5, r7, pc}

100418c0 <BQ27427_SetDesignCapacity>:
 * @param   capacity_mAh     Capacidade desejada em mAh.
 * @return  HAL_OK em sucesso, código de erro HAL_I2C_… em caso de falha.
 * ******************************************************************************
 */

HAL_StatusTypeDef BQ27427_SetDesignCapacity(BQ27427_t *sensor_BQ27427, uint16_t capacity_mAh, uint16_t terminate_voltage){
100418c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100418c2:	46de      	mov	lr, fp
100418c4:	4657      	mov	r7, sl
100418c6:	464e      	mov	r6, r9
100418c8:	4645      	mov	r5, r8
100418ca:	b5e0      	push	{r5, r6, r7, lr}
100418cc:	b0bf      	sub	sp, #252	@ 0xfc
100418ce:	af1a      	add	r7, sp, #104	@ 0x68
100418d0:	64f8      	str	r0, [r7, #76]	@ 0x4c
100418d2:	0008      	movs	r0, r1
100418d4:	0011      	movs	r1, r2
100418d6:	244a      	movs	r4, #74	@ 0x4a
100418d8:	193b      	adds	r3, r7, r4
100418da:	1c02      	adds	r2, r0, #0
100418dc:	801a      	strh	r2, [r3, #0]
100418de:	2048      	movs	r0, #72	@ 0x48
100418e0:	183b      	adds	r3, r7, r0
100418e2:	1c0a      	adds	r2, r1, #0
100418e4:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef ret;
    uint16_t flags;
    uint8_t newCsum, old_csum, old_msb_DC, old_lsb_DC, old_lsb_CTTC, old_msb_CTTC, old_msb_DCT, old_lsb_DCT, old_msb_CCT, old_lsb_CCT, old_msb_QC, old_lsb_QC, old_msb_mWh, old_lsb_mWh, old_msb_TV, old_lsb_TV, msb_DC, lsb_DC, msb_CTTC, lsb_CTTC, msb_DCT, lsb_DCT, msb_CCT, lsb_CCT, msb_QC, lsb_QC, msb_TV, lsb_TV, msb_mWh, lsb_mWh;

    lsb_DC = (uint8_t)(capacity_mAh & 0xFF);
100418e6:	193b      	adds	r3, r7, r4
100418e8:	881b      	ldrh	r3, [r3, #0]
100418ea:	b2da      	uxtb	r2, r3
100418ec:	2329      	movs	r3, #41	@ 0x29
100418ee:	0001      	movs	r1, r0
100418f0:	185b      	adds	r3, r3, r1
100418f2:	19db      	adds	r3, r3, r7
100418f4:	701a      	strb	r2, [r3, #0]
    msb_DC = (uint8_t)((capacity_mAh >> 8) & 0xFF);
100418f6:	0020      	movs	r0, r4
100418f8:	183b      	adds	r3, r7, r0
100418fa:	881b      	ldrh	r3, [r3, #0]
100418fc:	0a1b      	lsrs	r3, r3, #8
100418fe:	b29b      	uxth	r3, r3
10041900:	b2da      	uxtb	r2, r3
10041902:	232a      	movs	r3, #42	@ 0x2a
10041904:	185b      	adds	r3, r3, r1
10041906:	19db      	adds	r3, r3, r7
10041908:	701a      	strb	r2, [r3, #0]
	uint16_t taper_Rate = capacity_mAh / 10;
1004190a:	2546      	movs	r5, #70	@ 0x46
1004190c:	000e      	movs	r6, r1
1004190e:	186b      	adds	r3, r5, r1
10041910:	19dc      	adds	r4, r3, r7
10041912:	183b      	adds	r3, r7, r0
10041914:	881b      	ldrh	r3, [r3, #0]
10041916:	210a      	movs	r1, #10
10041918:	0018      	movs	r0, r3
1004191a:	f7fe fbd1 	bl	100400c0 <__udivsi3>
1004191e:	0003      	movs	r3, r0
10041920:	8023      	strh	r3, [r4, #0]
    lsb_CTTC =  taper_Rate       & 0xFF;
10041922:	0029      	movs	r1, r5
10041924:	198a      	adds	r2, r1, r6
10041926:	19d3      	adds	r3, r2, r7
10041928:	881b      	ldrh	r3, [r3, #0]
1004192a:	b2da      	uxtb	r2, r3
1004192c:	2327      	movs	r3, #39	@ 0x27
1004192e:	199c      	adds	r4, r3, r6
10041930:	19e3      	adds	r3, r4, r7
10041932:	701a      	strb	r2, [r3, #0]
	msb_CTTC = (taper_Rate >> 8) & 0xFF;
10041934:	198a      	adds	r2, r1, r6
10041936:	19d3      	adds	r3, r2, r7
10041938:	881b      	ldrh	r3, [r3, #0]
1004193a:	0a1b      	lsrs	r3, r3, #8
1004193c:	b29b      	uxth	r3, r3
1004193e:	b2da      	uxtb	r2, r3
10041940:	2328      	movs	r3, #40	@ 0x28
10041942:	1999      	adds	r1, r3, r6
10041944:	19cb      	adds	r3, r1, r7
10041946:	701a      	strb	r2, [r3, #0]
    uint16_t chg_Current_Thr = capacity_mAh / 10;
10041948:	2544      	movs	r5, #68	@ 0x44
1004194a:	19aa      	adds	r2, r5, r6
1004194c:	19d4      	adds	r4, r2, r7
1004194e:	234a      	movs	r3, #74	@ 0x4a
10041950:	18fb      	adds	r3, r7, r3
10041952:	881b      	ldrh	r3, [r3, #0]
10041954:	210a      	movs	r1, #10
10041956:	0018      	movs	r0, r3
10041958:	f7fe fbb2 	bl	100400c0 <__udivsi3>
1004195c:	0003      	movs	r3, r0
1004195e:	8023      	strh	r3, [r4, #0]
	lsb_CCT =  chg_Current_Thr       & 0xFF;
10041960:	0029      	movs	r1, r5
10041962:	198a      	adds	r2, r1, r6
10041964:	19d3      	adds	r3, r2, r7
10041966:	881b      	ldrh	r3, [r3, #0]
10041968:	b2da      	uxtb	r2, r3
1004196a:	2323      	movs	r3, #35	@ 0x23
1004196c:	0034      	movs	r4, r6
1004196e:	191d      	adds	r5, r3, r4
10041970:	19eb      	adds	r3, r5, r7
10041972:	701a      	strb	r2, [r3, #0]
    msb_CCT = (chg_Current_Thr >> 8) & 0xFF;
10041974:	190a      	adds	r2, r1, r4
10041976:	19d3      	adds	r3, r2, r7
10041978:	881b      	ldrh	r3, [r3, #0]
1004197a:	0a1b      	lsrs	r3, r3, #8
1004197c:	b29b      	uxth	r3, r3
1004197e:	b2da      	uxtb	r2, r3
10041980:	2324      	movs	r3, #36	@ 0x24
10041982:	1919      	adds	r1, r3, r4
10041984:	19cb      	adds	r3, r1, r7
10041986:	701a      	strb	r2, [r3, #0]
    uint16_t dsg_Current_Thr = capacity_mAh / 16.7;
10041988:	234a      	movs	r3, #74	@ 0x4a
1004198a:	18fb      	adds	r3, r7, r3
1004198c:	881b      	ldrh	r3, [r3, #0]
1004198e:	0018      	movs	r0, r3
10041990:	f7ff fb9e 	bl	100410d0 <__aeabi_i2d>
10041994:	4adc      	ldr	r2, [pc, #880]	@ (10041d08 <BQ27427_SetDesignCapacity+0x448>)
10041996:	4bdd      	ldr	r3, [pc, #884]	@ (10041d0c <BQ27427_SetDesignCapacity+0x44c>)
10041998:	f7fe fc3c 	bl	10040214 <__aeabi_ddiv>
1004199c:	0002      	movs	r2, r0
1004199e:	000b      	movs	r3, r1
100419a0:	2542      	movs	r5, #66	@ 0x42
100419a2:	0026      	movs	r6, r4
100419a4:	1929      	adds	r1, r5, r4
100419a6:	19cc      	adds	r4, r1, r7
100419a8:	0010      	movs	r0, r2
100419aa:	0019      	movs	r1, r3
100419ac:	f7fe fc14 	bl	100401d8 <__aeabi_d2uiz>
100419b0:	0003      	movs	r3, r0
100419b2:	8023      	strh	r3, [r4, #0]
	lsb_DCT =  dsg_Current_Thr       & 0xFF;
100419b4:	0029      	movs	r1, r5
100419b6:	0030      	movs	r0, r6
100419b8:	180a      	adds	r2, r1, r0
100419ba:	19d3      	adds	r3, r2, r7
100419bc:	881b      	ldrh	r3, [r3, #0]
100419be:	b2da      	uxtb	r2, r3
100419c0:	2325      	movs	r3, #37	@ 0x25
100419c2:	181c      	adds	r4, r3, r0
100419c4:	19e3      	adds	r3, r4, r7
100419c6:	701a      	strb	r2, [r3, #0]
    msb_DCT = (dsg_Current_Thr >> 8) & 0xFF;
100419c8:	180a      	adds	r2, r1, r0
100419ca:	19d3      	adds	r3, r2, r7
100419cc:	881b      	ldrh	r3, [r3, #0]
100419ce:	0a1b      	lsrs	r3, r3, #8
100419d0:	b29b      	uxth	r3, r3
100419d2:	b2da      	uxtb	r2, r3
100419d4:	2326      	movs	r3, #38	@ 0x26
100419d6:	1819      	adds	r1, r3, r0
100419d8:	19cb      	adds	r3, r1, r7
100419da:	701a      	strb	r2, [r3, #0]
	lsb_TV =  terminate_voltage       & 0xFF;
100419dc:	183b      	adds	r3, r7, r0
100419de:	881b      	ldrh	r3, [r3, #0]
100419e0:	b2da      	uxtb	r2, r3
100419e2:	231f      	movs	r3, #31
100419e4:	1819      	adds	r1, r3, r0
100419e6:	19cb      	adds	r3, r1, r7
100419e8:	701a      	strb	r2, [r3, #0]
    msb_TV = (terminate_voltage >> 8) & 0xFF;
100419ea:	0006      	movs	r6, r0
100419ec:	183b      	adds	r3, r7, r0
100419ee:	881b      	ldrh	r3, [r3, #0]
100419f0:	0a1b      	lsrs	r3, r3, #8
100419f2:	b29b      	uxth	r3, r3
100419f4:	b2da      	uxtb	r2, r3
100419f6:	2320      	movs	r3, #32
100419f8:	1999      	adds	r1, r3, r6
100419fa:	19cb      	adds	r3, r1, r7
100419fc:	701a      	strb	r2, [r3, #0]
    uint16_t quit_current = capacity_mAh / 25;
100419fe:	2540      	movs	r5, #64	@ 0x40
10041a00:	19aa      	adds	r2, r5, r6
10041a02:	19d4      	adds	r4, r2, r7
10041a04:	234a      	movs	r3, #74	@ 0x4a
10041a06:	18fb      	adds	r3, r7, r3
10041a08:	881b      	ldrh	r3, [r3, #0]
10041a0a:	2119      	movs	r1, #25
10041a0c:	0018      	movs	r0, r3
10041a0e:	f7fe fb57 	bl	100400c0 <__udivsi3>
10041a12:	0003      	movs	r3, r0
10041a14:	8023      	strh	r3, [r4, #0]
	lsb_QC =  quit_current       & 0xFF;
10041a16:	0029      	movs	r1, r5
10041a18:	198a      	adds	r2, r1, r6
10041a1a:	19d3      	adds	r3, r2, r7
10041a1c:	881b      	ldrh	r3, [r3, #0]
10041a1e:	b2da      	uxtb	r2, r3
10041a20:	2321      	movs	r3, #33	@ 0x21
10041a22:	0035      	movs	r5, r6
10041a24:	1958      	adds	r0, r3, r5
10041a26:	19c3      	adds	r3, r0, r7
10041a28:	701a      	strb	r2, [r3, #0]
    msb_QC = (quit_current >> 8) & 0xFF;
10041a2a:	194a      	adds	r2, r1, r5
10041a2c:	19d3      	adds	r3, r2, r7
10041a2e:	881b      	ldrh	r3, [r3, #0]
10041a30:	0a1b      	lsrs	r3, r3, #8
10041a32:	b29b      	uxth	r3, r3
10041a34:	b2da      	uxtb	r2, r3
10041a36:	2322      	movs	r3, #34	@ 0x22
10041a38:	1959      	adds	r1, r3, r5
10041a3a:	19cb      	adds	r3, r1, r7
10041a3c:	701a      	strb	r2, [r3, #0]
    uint16_t mWh = (capacity_mAh/100)*(terminate_voltage/100);
10041a3e:	234a      	movs	r3, #74	@ 0x4a
10041a40:	18fb      	adds	r3, r7, r3
10041a42:	881b      	ldrh	r3, [r3, #0]
10041a44:	2164      	movs	r1, #100	@ 0x64
10041a46:	0018      	movs	r0, r3
10041a48:	f7fe fb3a 	bl	100400c0 <__udivsi3>
10041a4c:	0003      	movs	r3, r0
10041a4e:	b29c      	uxth	r4, r3
10041a50:	197b      	adds	r3, r7, r5
10041a52:	881b      	ldrh	r3, [r3, #0]
10041a54:	2164      	movs	r1, #100	@ 0x64
10041a56:	0018      	movs	r0, r3
10041a58:	f7fe fb32 	bl	100400c0 <__udivsi3>
10041a5c:	0003      	movs	r3, r0
10041a5e:	b29a      	uxth	r2, r3
10041a60:	213e      	movs	r1, #62	@ 0x3e
10041a62:	0028      	movs	r0, r5
10041a64:	180b      	adds	r3, r1, r0
10041a66:	19db      	adds	r3, r3, r7
10041a68:	4362      	muls	r2, r4
10041a6a:	801a      	strh	r2, [r3, #0]
    lsb_mWh =  mWh       & 0xFF;
10041a6c:	180b      	adds	r3, r1, r0
10041a6e:	19db      	adds	r3, r3, r7
10041a70:	881b      	ldrh	r3, [r3, #0]
10041a72:	b2da      	uxtb	r2, r3
10041a74:	231d      	movs	r3, #29
10041a76:	181b      	adds	r3, r3, r0
10041a78:	19db      	adds	r3, r3, r7
10041a7a:	701a      	strb	r2, [r3, #0]
    msb_mWh = (mWh >> 8) & 0xFF;
10041a7c:	180b      	adds	r3, r1, r0
10041a7e:	19db      	adds	r3, r3, r7
10041a80:	881b      	ldrh	r3, [r3, #0]
10041a82:	0a1b      	lsrs	r3, r3, #8
10041a84:	b29b      	uxth	r3, r3
10041a86:	b2da      	uxtb	r2, r3
10041a88:	231e      	movs	r3, #30
10041a8a:	181b      	adds	r3, r3, r0
10041a8c:	19db      	adds	r3, r3, r7
10041a8e:	701a      	strb	r2, [r3, #0]

    /* 1) Unseal twice */
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
10041a90:	2118      	movs	r1, #24
10041a92:	180b      	adds	r3, r1, r0
10041a94:	19db      	adds	r3, r3, r7
10041a96:	4a9e      	ldr	r2, [pc, #632]	@ (10041d10 <BQ27427_SetDesignCapacity+0x450>)
10041a98:	801a      	strh	r2, [r3, #0]
10041a9a:	0004      	movs	r4, r0
10041a9c:	180b      	adds	r3, r1, r0
10041a9e:	19da      	adds	r2, r3, r7
10041aa0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041aa2:	2302      	movs	r3, #2
10041aa4:	2100      	movs	r1, #0
10041aa6:	f7ff fcf3 	bl	10041490 <BQ27427_Write>
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
10041aaa:	2114      	movs	r1, #20
10041aac:	0020      	movs	r0, r4
10041aae:	180b      	adds	r3, r1, r0
10041ab0:	19db      	adds	r3, r3, r7
10041ab2:	4a97      	ldr	r2, [pc, #604]	@ (10041d10 <BQ27427_SetDesignCapacity+0x450>)
10041ab4:	801a      	strh	r2, [r3, #0]
10041ab6:	0004      	movs	r4, r0
10041ab8:	180b      	adds	r3, r1, r0
10041aba:	19da      	adds	r2, r3, r7
10041abc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041abe:	2302      	movs	r3, #2
10041ac0:	2100      	movs	r1, #0
10041ac2:	f7ff fce5 	bl	10041490 <BQ27427_Write>

    /* 2) Enter CONFIG UPDATE */
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_CFGUPDATE);
10041ac6:	2110      	movs	r1, #16
10041ac8:	0020      	movs	r0, r4
10041aca:	180b      	adds	r3, r1, r0
10041acc:	19db      	adds	r3, r3, r7
10041ace:	2213      	movs	r2, #19
10041ad0:	801a      	strh	r2, [r3, #0]
10041ad2:	180b      	adds	r3, r1, r0
10041ad4:	19da      	adds	r2, r3, r7
10041ad6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041ad8:	2302      	movs	r3, #2
10041ada:	2100      	movs	r1, #0
10041adc:	f7ff fcd8 	bl	10041490 <BQ27427_Write>
    HAL_Delay(5);
10041ae0:	2005      	movs	r0, #5
10041ae2:	f001 f99f 	bl	10042e24 <HAL_Delay>

    /* 3) Wait for CONFIG UPDATE flag */
    do {
        flags = BQ27427_ReadFlags(sensor_BQ27427);
10041ae6:	253c      	movs	r5, #60	@ 0x3c
10041ae8:	2648      	movs	r6, #72	@ 0x48
10041aea:	19ab      	adds	r3, r5, r6
10041aec:	19dc      	adds	r4, r3, r7
10041aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10041af0:	0018      	movs	r0, r3
10041af2:	f7ff fd2d 	bl	10041550 <BQ27427_ReadFlags>
10041af6:	0003      	movs	r3, r0
10041af8:	8023      	strh	r3, [r4, #0]
    } while (!(flags & BQ27427_FLAG_CFGUPMODE));
10041afa:	19ab      	adds	r3, r5, r6
10041afc:	19db      	adds	r3, r3, r7
10041afe:	881b      	ldrh	r3, [r3, #0]
10041b00:	2210      	movs	r2, #16
10041b02:	4013      	ands	r3, r2
10041b04:	d0ef      	beq.n	10041ae6 <BQ27427_SetDesignCapacity+0x226>

    /* 4) Select State block, offset 0 */
    ret = BQ27427_selectDataBlock(sensor_BQ27427, BQ27427_BLOCK_CLASS_STATE, 0);
10041b06:	253b      	movs	r5, #59	@ 0x3b
10041b08:	19ab      	adds	r3, r5, r6
10041b0a:	19dc      	adds	r4, r3, r7
10041b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10041b0e:	2200      	movs	r2, #0
10041b10:	2152      	movs	r1, #82	@ 0x52
10041b12:	0018      	movs	r0, r3
10041b14:	f7ff fdd3 	bl	100416be <BQ27427_selectDataBlock>
10041b18:	0003      	movs	r3, r0
10041b1a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041b1c:	19ab      	adds	r3, r5, r6
10041b1e:	19db      	adds	r3, r3, r7
10041b20:	781b      	ldrb	r3, [r3, #0]
10041b22:	2b00      	cmp	r3, #0
10041b24:	d004      	beq.n	10041b30 <BQ27427_SetDesignCapacity+0x270>
10041b26:	19ab      	adds	r3, r5, r6
10041b28:	19db      	adds	r3, r3, r7
10041b2a:	781b      	ldrb	r3, [r3, #0]
10041b2c:	f000 fbe1 	bl	100422f2 <BQ27427_SetDesignCapacity+0xa32>

    /* 5) Read old LSB, MSB, checksum */
    HAL_Delay(1);
10041b30:	2001      	movs	r0, #1
10041b32:	f001 f977 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_CHECKSUM, &old_csum, 1);
10041b36:	253b      	movs	r5, #59	@ 0x3b
10041b38:	2648      	movs	r6, #72	@ 0x48
10041b3a:	19ab      	adds	r3, r5, r6
10041b3c:	19dc      	adds	r4, r3, r7
10041b3e:	2339      	movs	r3, #57	@ 0x39
10041b40:	199b      	adds	r3, r3, r6
10041b42:	19da      	adds	r2, r3, r7
10041b44:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041b46:	2301      	movs	r3, #1
10041b48:	2160      	movs	r1, #96	@ 0x60
10041b4a:	f7ff fd91 	bl	10041670 <BQ27427_ReadInternal>
10041b4e:	0003      	movs	r3, r0
10041b50:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041b52:	19ab      	adds	r3, r5, r6
10041b54:	19db      	adds	r3, r3, r7
10041b56:	781b      	ldrb	r3, [r3, #0]
10041b58:	2b00      	cmp	r3, #0
10041b5a:	d004      	beq.n	10041b66 <BQ27427_SetDesignCapacity+0x2a6>
10041b5c:	19ab      	adds	r3, r5, r6
10041b5e:	19db      	adds	r3, r3, r7
10041b60:	781b      	ldrb	r3, [r3, #0]
10041b62:	f000 fbc6 	bl	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041b66:	2001      	movs	r0, #1
10041b68:	f001 f95c 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_DESIGN_CAP_LSB, &old_lsb_DC, 1);
10041b6c:	253b      	movs	r5, #59	@ 0x3b
10041b6e:	2648      	movs	r6, #72	@ 0x48
10041b70:	19ab      	adds	r3, r5, r6
10041b72:	19dc      	adds	r4, r3, r7
10041b74:	2337      	movs	r3, #55	@ 0x37
10041b76:	199b      	adds	r3, r3, r6
10041b78:	19da      	adds	r2, r3, r7
10041b7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041b7c:	2301      	movs	r3, #1
10041b7e:	2146      	movs	r1, #70	@ 0x46
10041b80:	f7ff fd76 	bl	10041670 <BQ27427_ReadInternal>
10041b84:	0003      	movs	r3, r0
10041b86:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041b88:	19ab      	adds	r3, r5, r6
10041b8a:	19db      	adds	r3, r3, r7
10041b8c:	781b      	ldrb	r3, [r3, #0]
10041b8e:	2b00      	cmp	r3, #0
10041b90:	d004      	beq.n	10041b9c <BQ27427_SetDesignCapacity+0x2dc>
10041b92:	19ab      	adds	r3, r5, r6
10041b94:	19db      	adds	r3, r3, r7
10041b96:	781b      	ldrb	r3, [r3, #0]
10041b98:	f000 fbab 	bl	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041b9c:	2001      	movs	r0, #1
10041b9e:	f001 f941 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_DESIGN_CAP_MSB, &old_msb_DC, 1);
10041ba2:	253b      	movs	r5, #59	@ 0x3b
10041ba4:	2648      	movs	r6, #72	@ 0x48
10041ba6:	19ab      	adds	r3, r5, r6
10041ba8:	19dc      	adds	r4, r3, r7
10041baa:	2338      	movs	r3, #56	@ 0x38
10041bac:	199b      	adds	r3, r3, r6
10041bae:	19da      	adds	r2, r3, r7
10041bb0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041bb2:	2301      	movs	r3, #1
10041bb4:	2147      	movs	r1, #71	@ 0x47
10041bb6:	f7ff fd5b 	bl	10041670 <BQ27427_ReadInternal>
10041bba:	0003      	movs	r3, r0
10041bbc:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041bbe:	19ab      	adds	r3, r5, r6
10041bc0:	19db      	adds	r3, r3, r7
10041bc2:	781b      	ldrb	r3, [r3, #0]
10041bc4:	2b00      	cmp	r3, #0
10041bc6:	d003      	beq.n	10041bd0 <BQ27427_SetDesignCapacity+0x310>
10041bc8:	19ab      	adds	r3, r5, r6
10041bca:	19db      	adds	r3, r3, r7
10041bcc:	781b      	ldrb	r3, [r3, #0]
10041bce:	e390      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041bd0:	2001      	movs	r0, #1
10041bd2:	f001 f927 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_TAPER_RATE_LSB, &old_lsb_CTTC, 1);
10041bd6:	253b      	movs	r5, #59	@ 0x3b
10041bd8:	2648      	movs	r6, #72	@ 0x48
10041bda:	19ab      	adds	r3, r5, r6
10041bdc:	19dc      	adds	r4, r3, r7
10041bde:	2336      	movs	r3, #54	@ 0x36
10041be0:	199b      	adds	r3, r3, r6
10041be2:	19da      	adds	r2, r3, r7
10041be4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041be6:	2301      	movs	r3, #1
10041be8:	2155      	movs	r1, #85	@ 0x55
10041bea:	f7ff fd41 	bl	10041670 <BQ27427_ReadInternal>
10041bee:	0003      	movs	r3, r0
10041bf0:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041bf2:	19ab      	adds	r3, r5, r6
10041bf4:	19db      	adds	r3, r3, r7
10041bf6:	781b      	ldrb	r3, [r3, #0]
10041bf8:	2b00      	cmp	r3, #0
10041bfa:	d003      	beq.n	10041c04 <BQ27427_SetDesignCapacity+0x344>
10041bfc:	19ab      	adds	r3, r5, r6
10041bfe:	19db      	adds	r3, r3, r7
10041c00:	781b      	ldrb	r3, [r3, #0]
10041c02:	e376      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041c04:	2001      	movs	r0, #1
10041c06:	f001 f90d 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_TAPER_RATE_MSB, &old_msb_CTTC, 1);
10041c0a:	253b      	movs	r5, #59	@ 0x3b
10041c0c:	2648      	movs	r6, #72	@ 0x48
10041c0e:	19ab      	adds	r3, r5, r6
10041c10:	19dc      	adds	r4, r3, r7
10041c12:	2335      	movs	r3, #53	@ 0x35
10041c14:	199b      	adds	r3, r3, r6
10041c16:	19da      	adds	r2, r3, r7
10041c18:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041c1a:	2301      	movs	r3, #1
10041c1c:	2156      	movs	r1, #86	@ 0x56
10041c1e:	f7ff fd27 	bl	10041670 <BQ27427_ReadInternal>
10041c22:	0003      	movs	r3, r0
10041c24:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041c26:	19ab      	adds	r3, r5, r6
10041c28:	19db      	adds	r3, r3, r7
10041c2a:	781b      	ldrb	r3, [r3, #0]
10041c2c:	2b00      	cmp	r3, #0
10041c2e:	d003      	beq.n	10041c38 <BQ27427_SetDesignCapacity+0x378>
10041c30:	19ab      	adds	r3, r5, r6
10041c32:	19db      	adds	r3, r3, r7
10041c34:	781b      	ldrb	r3, [r3, #0]
10041c36:	e35c      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041c38:	2001      	movs	r0, #1
10041c3a:	f001 f8f3 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_DSG_CURRENT_THRESHOLD_LSB, &old_lsb_DCT, 1);
10041c3e:	253b      	movs	r5, #59	@ 0x3b
10041c40:	2648      	movs	r6, #72	@ 0x48
10041c42:	19ab      	adds	r3, r5, r6
10041c44:	19dc      	adds	r4, r3, r7
10041c46:	2333      	movs	r3, #51	@ 0x33
10041c48:	199b      	adds	r3, r3, r6
10041c4a:	19da      	adds	r2, r3, r7
10041c4c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041c4e:	2301      	movs	r3, #1
10041c50:	2140      	movs	r1, #64	@ 0x40
10041c52:	f7ff fd0d 	bl	10041670 <BQ27427_ReadInternal>
10041c56:	0003      	movs	r3, r0
10041c58:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041c5a:	19ab      	adds	r3, r5, r6
10041c5c:	19db      	adds	r3, r3, r7
10041c5e:	781b      	ldrb	r3, [r3, #0]
10041c60:	2b00      	cmp	r3, #0
10041c62:	d003      	beq.n	10041c6c <BQ27427_SetDesignCapacity+0x3ac>
10041c64:	19ab      	adds	r3, r5, r6
10041c66:	19db      	adds	r3, r3, r7
10041c68:	781b      	ldrb	r3, [r3, #0]
10041c6a:	e342      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041c6c:	2001      	movs	r0, #1
10041c6e:	f001 f8d9 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_DSG_CURRENT_THRESHOLD_MSB, &old_msb_DCT, 1);
10041c72:	253b      	movs	r5, #59	@ 0x3b
10041c74:	2648      	movs	r6, #72	@ 0x48
10041c76:	19ab      	adds	r3, r5, r6
10041c78:	19dc      	adds	r4, r3, r7
10041c7a:	2334      	movs	r3, #52	@ 0x34
10041c7c:	199b      	adds	r3, r3, r6
10041c7e:	19da      	adds	r2, r3, r7
10041c80:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041c82:	2301      	movs	r3, #1
10041c84:	2141      	movs	r1, #65	@ 0x41
10041c86:	f7ff fcf3 	bl	10041670 <BQ27427_ReadInternal>
10041c8a:	0003      	movs	r3, r0
10041c8c:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041c8e:	19ab      	adds	r3, r5, r6
10041c90:	19db      	adds	r3, r3, r7
10041c92:	781b      	ldrb	r3, [r3, #0]
10041c94:	2b00      	cmp	r3, #0
10041c96:	d003      	beq.n	10041ca0 <BQ27427_SetDesignCapacity+0x3e0>
10041c98:	19ab      	adds	r3, r5, r6
10041c9a:	19db      	adds	r3, r3, r7
10041c9c:	781b      	ldrb	r3, [r3, #0]
10041c9e:	e328      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041ca0:	2001      	movs	r0, #1
10041ca2:	f001 f8bf 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_CHG_CURRENT_THRESHOLD_LSB, &old_lsb_CCT, 1);
10041ca6:	253b      	movs	r5, #59	@ 0x3b
10041ca8:	2648      	movs	r6, #72	@ 0x48
10041caa:	19ab      	adds	r3, r5, r6
10041cac:	19dc      	adds	r4, r3, r7
10041cae:	2331      	movs	r3, #49	@ 0x31
10041cb0:	199b      	adds	r3, r3, r6
10041cb2:	19da      	adds	r2, r3, r7
10041cb4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041cb6:	2301      	movs	r3, #1
10041cb8:	2142      	movs	r1, #66	@ 0x42
10041cba:	f7ff fcd9 	bl	10041670 <BQ27427_ReadInternal>
10041cbe:	0003      	movs	r3, r0
10041cc0:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041cc2:	19ab      	adds	r3, r5, r6
10041cc4:	19db      	adds	r3, r3, r7
10041cc6:	781b      	ldrb	r3, [r3, #0]
10041cc8:	2b00      	cmp	r3, #0
10041cca:	d003      	beq.n	10041cd4 <BQ27427_SetDesignCapacity+0x414>
10041ccc:	19ab      	adds	r3, r5, r6
10041cce:	19db      	adds	r3, r3, r7
10041cd0:	781b      	ldrb	r3, [r3, #0]
10041cd2:	e30e      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041cd4:	2001      	movs	r0, #1
10041cd6:	f001 f8a5 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_CHG_CURRENT_THRESHOLD_MSB, &old_msb_CCT, 1);
10041cda:	253b      	movs	r5, #59	@ 0x3b
10041cdc:	2648      	movs	r6, #72	@ 0x48
10041cde:	19ab      	adds	r3, r5, r6
10041ce0:	19dc      	adds	r4, r3, r7
10041ce2:	2332      	movs	r3, #50	@ 0x32
10041ce4:	199b      	adds	r3, r3, r6
10041ce6:	19da      	adds	r2, r3, r7
10041ce8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041cea:	2301      	movs	r3, #1
10041cec:	2143      	movs	r1, #67	@ 0x43
10041cee:	f7ff fcbf 	bl	10041670 <BQ27427_ReadInternal>
10041cf2:	0003      	movs	r3, r0
10041cf4:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041cf6:	19ab      	adds	r3, r5, r6
10041cf8:	19db      	adds	r3, r3, r7
10041cfa:	781b      	ldrb	r3, [r3, #0]
10041cfc:	2b00      	cmp	r3, #0
10041cfe:	d009      	beq.n	10041d14 <BQ27427_SetDesignCapacity+0x454>
10041d00:	19ab      	adds	r3, r5, r6
10041d02:	19db      	adds	r3, r3, r7
10041d04:	781b      	ldrb	r3, [r3, #0]
10041d06:	e2f4      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
10041d08:	33333333 	.word	0x33333333
10041d0c:	4030b333 	.word	0x4030b333
10041d10:	ffff8000 	.word	0xffff8000
    HAL_Delay(1);
10041d14:	2001      	movs	r0, #1
10041d16:	f001 f885 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_QUIT_CURRENT_LSB, &old_lsb_QC, 1);
10041d1a:	253b      	movs	r5, #59	@ 0x3b
10041d1c:	2648      	movs	r6, #72	@ 0x48
10041d1e:	19ab      	adds	r3, r5, r6
10041d20:	19dc      	adds	r4, r3, r7
10041d22:	232f      	movs	r3, #47	@ 0x2f
10041d24:	199b      	adds	r3, r3, r6
10041d26:	19da      	adds	r2, r3, r7
10041d28:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041d2a:	2301      	movs	r3, #1
10041d2c:	2144      	movs	r1, #68	@ 0x44
10041d2e:	f7ff fc9f 	bl	10041670 <BQ27427_ReadInternal>
10041d32:	0003      	movs	r3, r0
10041d34:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041d36:	19ab      	adds	r3, r5, r6
10041d38:	19db      	adds	r3, r3, r7
10041d3a:	781b      	ldrb	r3, [r3, #0]
10041d3c:	2b00      	cmp	r3, #0
10041d3e:	d003      	beq.n	10041d48 <BQ27427_SetDesignCapacity+0x488>
10041d40:	19ab      	adds	r3, r5, r6
10041d42:	19db      	adds	r3, r3, r7
10041d44:	781b      	ldrb	r3, [r3, #0]
10041d46:	e2d4      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041d48:	2001      	movs	r0, #1
10041d4a:	f001 f86b 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_QUIT_CURRENT_MSB, &old_msb_QC, 1);
10041d4e:	253b      	movs	r5, #59	@ 0x3b
10041d50:	2648      	movs	r6, #72	@ 0x48
10041d52:	19ab      	adds	r3, r5, r6
10041d54:	19dc      	adds	r4, r3, r7
10041d56:	2330      	movs	r3, #48	@ 0x30
10041d58:	199b      	adds	r3, r3, r6
10041d5a:	19da      	adds	r2, r3, r7
10041d5c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041d5e:	2301      	movs	r3, #1
10041d60:	2145      	movs	r1, #69	@ 0x45
10041d62:	f7ff fc85 	bl	10041670 <BQ27427_ReadInternal>
10041d66:	0003      	movs	r3, r0
10041d68:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041d6a:	19ab      	adds	r3, r5, r6
10041d6c:	19db      	adds	r3, r3, r7
10041d6e:	781b      	ldrb	r3, [r3, #0]
10041d70:	2b00      	cmp	r3, #0
10041d72:	d003      	beq.n	10041d7c <BQ27427_SetDesignCapacity+0x4bc>
10041d74:	19ab      	adds	r3, r5, r6
10041d76:	19db      	adds	r3, r3, r7
10041d78:	781b      	ldrb	r3, [r3, #0]
10041d7a:	e2ba      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041d7c:	2001      	movs	r0, #1
10041d7e:	f001 f851 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_mWH_LSB, &old_lsb_mWh, 1);
10041d82:	253b      	movs	r5, #59	@ 0x3b
10041d84:	2648      	movs	r6, #72	@ 0x48
10041d86:	19ab      	adds	r3, r5, r6
10041d88:	19dc      	adds	r4, r3, r7
10041d8a:	232d      	movs	r3, #45	@ 0x2d
10041d8c:	199b      	adds	r3, r3, r6
10041d8e:	19da      	adds	r2, r3, r7
10041d90:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041d92:	2301      	movs	r3, #1
10041d94:	2148      	movs	r1, #72	@ 0x48
10041d96:	f7ff fc6b 	bl	10041670 <BQ27427_ReadInternal>
10041d9a:	0003      	movs	r3, r0
10041d9c:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041d9e:	19ab      	adds	r3, r5, r6
10041da0:	19db      	adds	r3, r3, r7
10041da2:	781b      	ldrb	r3, [r3, #0]
10041da4:	2b00      	cmp	r3, #0
10041da6:	d003      	beq.n	10041db0 <BQ27427_SetDesignCapacity+0x4f0>
10041da8:	19ab      	adds	r3, r5, r6
10041daa:	19db      	adds	r3, r3, r7
10041dac:	781b      	ldrb	r3, [r3, #0]
10041dae:	e2a0      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041db0:	2001      	movs	r0, #1
10041db2:	f001 f837 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_mWH_MSB, &old_msb_mWh, 1);
10041db6:	253b      	movs	r5, #59	@ 0x3b
10041db8:	2648      	movs	r6, #72	@ 0x48
10041dba:	19ab      	adds	r3, r5, r6
10041dbc:	19dc      	adds	r4, r3, r7
10041dbe:	232e      	movs	r3, #46	@ 0x2e
10041dc0:	199b      	adds	r3, r3, r6
10041dc2:	19da      	adds	r2, r3, r7
10041dc4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041dc6:	2301      	movs	r3, #1
10041dc8:	2149      	movs	r1, #73	@ 0x49
10041dca:	f7ff fc51 	bl	10041670 <BQ27427_ReadInternal>
10041dce:	0003      	movs	r3, r0
10041dd0:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041dd2:	19ab      	adds	r3, r5, r6
10041dd4:	19db      	adds	r3, r3, r7
10041dd6:	781b      	ldrb	r3, [r3, #0]
10041dd8:	2b00      	cmp	r3, #0
10041dda:	d003      	beq.n	10041de4 <BQ27427_SetDesignCapacity+0x524>
10041ddc:	19ab      	adds	r3, r5, r6
10041dde:	19db      	adds	r3, r3, r7
10041de0:	781b      	ldrb	r3, [r3, #0]
10041de2:	e286      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041de4:	2001      	movs	r0, #1
10041de6:	f001 f81d 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_TERMINATE_VOLTAGE_LSB, &old_lsb_TV, 1);
10041dea:	253b      	movs	r5, #59	@ 0x3b
10041dec:	2648      	movs	r6, #72	@ 0x48
10041dee:	19ab      	adds	r3, r5, r6
10041df0:	19dc      	adds	r4, r3, r7
10041df2:	232b      	movs	r3, #43	@ 0x2b
10041df4:	199b      	adds	r3, r3, r6
10041df6:	19da      	adds	r2, r3, r7
10041df8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041dfa:	2301      	movs	r3, #1
10041dfc:	214a      	movs	r1, #74	@ 0x4a
10041dfe:	f7ff fc37 	bl	10041670 <BQ27427_ReadInternal>
10041e02:	0003      	movs	r3, r0
10041e04:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041e06:	19ab      	adds	r3, r5, r6
10041e08:	19db      	adds	r3, r3, r7
10041e0a:	781b      	ldrb	r3, [r3, #0]
10041e0c:	2b00      	cmp	r3, #0
10041e0e:	d003      	beq.n	10041e18 <BQ27427_SetDesignCapacity+0x558>
10041e10:	19ab      	adds	r3, r5, r6
10041e12:	19db      	adds	r3, r3, r7
10041e14:	781b      	ldrb	r3, [r3, #0]
10041e16:	e26c      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041e18:	2001      	movs	r0, #1
10041e1a:	f001 f803 	bl	10042e24 <HAL_Delay>
    ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_OFFSET_TERMINATE_VOLTAGE_MSB, &old_msb_TV, 1);
10041e1e:	253b      	movs	r5, #59	@ 0x3b
10041e20:	2648      	movs	r6, #72	@ 0x48
10041e22:	19ab      	adds	r3, r5, r6
10041e24:	19dc      	adds	r4, r3, r7
10041e26:	232c      	movs	r3, #44	@ 0x2c
10041e28:	199b      	adds	r3, r3, r6
10041e2a:	19da      	adds	r2, r3, r7
10041e2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041e2e:	2301      	movs	r3, #1
10041e30:	214b      	movs	r1, #75	@ 0x4b
10041e32:	f7ff fc1d 	bl	10041670 <BQ27427_ReadInternal>
10041e36:	0003      	movs	r3, r0
10041e38:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041e3a:	19ab      	adds	r3, r5, r6
10041e3c:	19db      	adds	r3, r3, r7
10041e3e:	781b      	ldrb	r3, [r3, #0]
10041e40:	2b00      	cmp	r3, #0
10041e42:	d003      	beq.n	10041e4c <BQ27427_SetDesignCapacity+0x58c>
10041e44:	19ab      	adds	r3, r5, r6
10041e46:	19db      	adds	r3, r3, r7
10041e48:	781b      	ldrb	r3, [r3, #0]
10041e4a:	e252      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    HAL_Delay(1);
10041e4c:	2001      	movs	r0, #1
10041e4e:	f000 ffe9 	bl	10042e24 <HAL_Delay>

    /* 6) Calculate and write new values */
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_DESIGN_CAP_LSB, &lsb_DC, 1);
10041e52:	253b      	movs	r5, #59	@ 0x3b
10041e54:	2648      	movs	r6, #72	@ 0x48
10041e56:	19ab      	adds	r3, r5, r6
10041e58:	19dc      	adds	r4, r3, r7
10041e5a:	2329      	movs	r3, #41	@ 0x29
10041e5c:	199b      	adds	r3, r3, r6
10041e5e:	19da      	adds	r2, r3, r7
10041e60:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041e62:	2301      	movs	r3, #1
10041e64:	2146      	movs	r1, #70	@ 0x46
10041e66:	f7ff fb13 	bl	10041490 <BQ27427_Write>
10041e6a:	0003      	movs	r3, r0
10041e6c:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041e6e:	19ab      	adds	r3, r5, r6
10041e70:	19db      	adds	r3, r3, r7
10041e72:	781b      	ldrb	r3, [r3, #0]
10041e74:	2b00      	cmp	r3, #0
10041e76:	d003      	beq.n	10041e80 <BQ27427_SetDesignCapacity+0x5c0>
10041e78:	19ab      	adds	r3, r5, r6
10041e7a:	19db      	adds	r3, r3, r7
10041e7c:	781b      	ldrb	r3, [r3, #0]
10041e7e:	e238      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_DESIGN_CAP_MSB, &msb_DC, 1);
10041e80:	253b      	movs	r5, #59	@ 0x3b
10041e82:	2648      	movs	r6, #72	@ 0x48
10041e84:	19ab      	adds	r3, r5, r6
10041e86:	19dc      	adds	r4, r3, r7
10041e88:	232a      	movs	r3, #42	@ 0x2a
10041e8a:	199b      	adds	r3, r3, r6
10041e8c:	19da      	adds	r2, r3, r7
10041e8e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041e90:	2301      	movs	r3, #1
10041e92:	2147      	movs	r1, #71	@ 0x47
10041e94:	f7ff fafc 	bl	10041490 <BQ27427_Write>
10041e98:	0003      	movs	r3, r0
10041e9a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041e9c:	19ab      	adds	r3, r5, r6
10041e9e:	19db      	adds	r3, r3, r7
10041ea0:	781b      	ldrb	r3, [r3, #0]
10041ea2:	2b00      	cmp	r3, #0
10041ea4:	d003      	beq.n	10041eae <BQ27427_SetDesignCapacity+0x5ee>
10041ea6:	19ab      	adds	r3, r5, r6
10041ea8:	19db      	adds	r3, r3, r7
10041eaa:	781b      	ldrb	r3, [r3, #0]
10041eac:	e221      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_TAPER_RATE_LSB, &lsb_CTTC, 1);
10041eae:	253b      	movs	r5, #59	@ 0x3b
10041eb0:	2648      	movs	r6, #72	@ 0x48
10041eb2:	19ab      	adds	r3, r5, r6
10041eb4:	19dc      	adds	r4, r3, r7
10041eb6:	2327      	movs	r3, #39	@ 0x27
10041eb8:	199b      	adds	r3, r3, r6
10041eba:	19da      	adds	r2, r3, r7
10041ebc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041ebe:	2301      	movs	r3, #1
10041ec0:	2155      	movs	r1, #85	@ 0x55
10041ec2:	f7ff fae5 	bl	10041490 <BQ27427_Write>
10041ec6:	0003      	movs	r3, r0
10041ec8:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041eca:	19ab      	adds	r3, r5, r6
10041ecc:	19db      	adds	r3, r3, r7
10041ece:	781b      	ldrb	r3, [r3, #0]
10041ed0:	2b00      	cmp	r3, #0
10041ed2:	d003      	beq.n	10041edc <BQ27427_SetDesignCapacity+0x61c>
10041ed4:	19ab      	adds	r3, r5, r6
10041ed6:	19db      	adds	r3, r3, r7
10041ed8:	781b      	ldrb	r3, [r3, #0]
10041eda:	e20a      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_TAPER_RATE_MSB, &msb_CTTC, 1);
10041edc:	253b      	movs	r5, #59	@ 0x3b
10041ede:	2648      	movs	r6, #72	@ 0x48
10041ee0:	19ab      	adds	r3, r5, r6
10041ee2:	19dc      	adds	r4, r3, r7
10041ee4:	2328      	movs	r3, #40	@ 0x28
10041ee6:	199b      	adds	r3, r3, r6
10041ee8:	19da      	adds	r2, r3, r7
10041eea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041eec:	2301      	movs	r3, #1
10041eee:	2156      	movs	r1, #86	@ 0x56
10041ef0:	f7ff face 	bl	10041490 <BQ27427_Write>
10041ef4:	0003      	movs	r3, r0
10041ef6:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041ef8:	19ab      	adds	r3, r5, r6
10041efa:	19db      	adds	r3, r3, r7
10041efc:	781b      	ldrb	r3, [r3, #0]
10041efe:	2b00      	cmp	r3, #0
10041f00:	d003      	beq.n	10041f0a <BQ27427_SetDesignCapacity+0x64a>
10041f02:	19ab      	adds	r3, r5, r6
10041f04:	19db      	adds	r3, r3, r7
10041f06:	781b      	ldrb	r3, [r3, #0]
10041f08:	e1f3      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_DSG_CURRENT_THRESHOLD_LSB, &lsb_DCT, 1);
10041f0a:	253b      	movs	r5, #59	@ 0x3b
10041f0c:	2648      	movs	r6, #72	@ 0x48
10041f0e:	19ab      	adds	r3, r5, r6
10041f10:	19dc      	adds	r4, r3, r7
10041f12:	2325      	movs	r3, #37	@ 0x25
10041f14:	199b      	adds	r3, r3, r6
10041f16:	19da      	adds	r2, r3, r7
10041f18:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041f1a:	2301      	movs	r3, #1
10041f1c:	2140      	movs	r1, #64	@ 0x40
10041f1e:	f7ff fab7 	bl	10041490 <BQ27427_Write>
10041f22:	0003      	movs	r3, r0
10041f24:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041f26:	19ab      	adds	r3, r5, r6
10041f28:	19db      	adds	r3, r3, r7
10041f2a:	781b      	ldrb	r3, [r3, #0]
10041f2c:	2b00      	cmp	r3, #0
10041f2e:	d003      	beq.n	10041f38 <BQ27427_SetDesignCapacity+0x678>
10041f30:	19ab      	adds	r3, r5, r6
10041f32:	19db      	adds	r3, r3, r7
10041f34:	781b      	ldrb	r3, [r3, #0]
10041f36:	e1dc      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_DSG_CURRENT_THRESHOLD_MSB, &msb_DCT, 1);
10041f38:	253b      	movs	r5, #59	@ 0x3b
10041f3a:	2648      	movs	r6, #72	@ 0x48
10041f3c:	19ab      	adds	r3, r5, r6
10041f3e:	19dc      	adds	r4, r3, r7
10041f40:	2326      	movs	r3, #38	@ 0x26
10041f42:	199b      	adds	r3, r3, r6
10041f44:	19da      	adds	r2, r3, r7
10041f46:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041f48:	2301      	movs	r3, #1
10041f4a:	2141      	movs	r1, #65	@ 0x41
10041f4c:	f7ff faa0 	bl	10041490 <BQ27427_Write>
10041f50:	0003      	movs	r3, r0
10041f52:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041f54:	19ab      	adds	r3, r5, r6
10041f56:	19db      	adds	r3, r3, r7
10041f58:	781b      	ldrb	r3, [r3, #0]
10041f5a:	2b00      	cmp	r3, #0
10041f5c:	d003      	beq.n	10041f66 <BQ27427_SetDesignCapacity+0x6a6>
10041f5e:	19ab      	adds	r3, r5, r6
10041f60:	19db      	adds	r3, r3, r7
10041f62:	781b      	ldrb	r3, [r3, #0]
10041f64:	e1c5      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_CHG_CURRENT_THRESHOLD_LSB, &lsb_CCT, 1);
10041f66:	253b      	movs	r5, #59	@ 0x3b
10041f68:	2648      	movs	r6, #72	@ 0x48
10041f6a:	19ab      	adds	r3, r5, r6
10041f6c:	19dc      	adds	r4, r3, r7
10041f6e:	2323      	movs	r3, #35	@ 0x23
10041f70:	199b      	adds	r3, r3, r6
10041f72:	19da      	adds	r2, r3, r7
10041f74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041f76:	2301      	movs	r3, #1
10041f78:	2142      	movs	r1, #66	@ 0x42
10041f7a:	f7ff fa89 	bl	10041490 <BQ27427_Write>
10041f7e:	0003      	movs	r3, r0
10041f80:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10041f82:	19ab      	adds	r3, r5, r6
10041f84:	19db      	adds	r3, r3, r7
10041f86:	781b      	ldrb	r3, [r3, #0]
10041f88:	2b00      	cmp	r3, #0
10041f8a:	d003      	beq.n	10041f94 <BQ27427_SetDesignCapacity+0x6d4>
10041f8c:	19ab      	adds	r3, r5, r6
10041f8e:	19db      	adds	r3, r3, r7
10041f90:	781b      	ldrb	r3, [r3, #0]
10041f92:	e1ae      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
//    HAL_Delay(1);
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_CHG_CURRENT_THRESHOLD_MSB, &msb_CCT, 1);
10041f94:	253b      	movs	r5, #59	@ 0x3b
10041f96:	2648      	movs	r6, #72	@ 0x48
10041f98:	19ab      	adds	r3, r5, r6
10041f9a:	19dc      	adds	r4, r3, r7
10041f9c:	2324      	movs	r3, #36	@ 0x24
10041f9e:	199b      	adds	r3, r3, r6
10041fa0:	19da      	adds	r2, r3, r7
10041fa2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041fa4:	2301      	movs	r3, #1
10041fa6:	2143      	movs	r1, #67	@ 0x43
10041fa8:	f7ff fa72 	bl	10041490 <BQ27427_Write>
10041fac:	0003      	movs	r3, r0
10041fae:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
10041fb0:	19ab      	adds	r3, r5, r6
10041fb2:	19db      	adds	r3, r3, r7
10041fb4:	781b      	ldrb	r3, [r3, #0]
10041fb6:	2b00      	cmp	r3, #0
10041fb8:	d003      	beq.n	10041fc2 <BQ27427_SetDesignCapacity+0x702>
10041fba:	19ab      	adds	r3, r5, r6
10041fbc:	19db      	adds	r3, r3, r7
10041fbe:	781b      	ldrb	r3, [r3, #0]
10041fc0:	e197      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_QUIT_CURRENT_LSB, &lsb_QC, 1);
10041fc2:	253b      	movs	r5, #59	@ 0x3b
10041fc4:	2648      	movs	r6, #72	@ 0x48
10041fc6:	19ab      	adds	r3, r5, r6
10041fc8:	19dc      	adds	r4, r3, r7
10041fca:	2321      	movs	r3, #33	@ 0x21
10041fcc:	199b      	adds	r3, r3, r6
10041fce:	19da      	adds	r2, r3, r7
10041fd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10041fd2:	2301      	movs	r3, #1
10041fd4:	2144      	movs	r1, #68	@ 0x44
10041fd6:	f7ff fa5b 	bl	10041490 <BQ27427_Write>
10041fda:	0003      	movs	r3, r0
10041fdc:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
10041fde:	19ab      	adds	r3, r5, r6
10041fe0:	19db      	adds	r3, r3, r7
10041fe2:	781b      	ldrb	r3, [r3, #0]
10041fe4:	2b00      	cmp	r3, #0
10041fe6:	d003      	beq.n	10041ff0 <BQ27427_SetDesignCapacity+0x730>
10041fe8:	19ab      	adds	r3, r5, r6
10041fea:	19db      	adds	r3, r3, r7
10041fec:	781b      	ldrb	r3, [r3, #0]
10041fee:	e180      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_QUIT_CURRENT_MSB, &msb_QC, 1);
10041ff0:	253b      	movs	r5, #59	@ 0x3b
10041ff2:	2648      	movs	r6, #72	@ 0x48
10041ff4:	19ab      	adds	r3, r5, r6
10041ff6:	19dc      	adds	r4, r3, r7
10041ff8:	2322      	movs	r3, #34	@ 0x22
10041ffa:	199b      	adds	r3, r3, r6
10041ffc:	19da      	adds	r2, r3, r7
10041ffe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10042000:	2301      	movs	r3, #1
10042002:	2145      	movs	r1, #69	@ 0x45
10042004:	f7ff fa44 	bl	10041490 <BQ27427_Write>
10042008:	0003      	movs	r3, r0
1004200a:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
1004200c:	19ab      	adds	r3, r5, r6
1004200e:	19db      	adds	r3, r3, r7
10042010:	781b      	ldrb	r3, [r3, #0]
10042012:	2b00      	cmp	r3, #0
10042014:	d003      	beq.n	1004201e <BQ27427_SetDesignCapacity+0x75e>
10042016:	19ab      	adds	r3, r5, r6
10042018:	19db      	adds	r3, r3, r7
1004201a:	781b      	ldrb	r3, [r3, #0]
1004201c:	e169      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_TERMINATE_VOLTAGE_LSB, &lsb_TV, 1);
1004201e:	253b      	movs	r5, #59	@ 0x3b
10042020:	2648      	movs	r6, #72	@ 0x48
10042022:	19ab      	adds	r3, r5, r6
10042024:	19dc      	adds	r4, r3, r7
10042026:	231f      	movs	r3, #31
10042028:	199b      	adds	r3, r3, r6
1004202a:	19da      	adds	r2, r3, r7
1004202c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1004202e:	2301      	movs	r3, #1
10042030:	214a      	movs	r1, #74	@ 0x4a
10042032:	f7ff fa2d 	bl	10041490 <BQ27427_Write>
10042036:	0003      	movs	r3, r0
10042038:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
1004203a:	19ab      	adds	r3, r5, r6
1004203c:	19db      	adds	r3, r3, r7
1004203e:	781b      	ldrb	r3, [r3, #0]
10042040:	2b00      	cmp	r3, #0
10042042:	d003      	beq.n	1004204c <BQ27427_SetDesignCapacity+0x78c>
10042044:	19ab      	adds	r3, r5, r6
10042046:	19db      	adds	r3, r3, r7
10042048:	781b      	ldrb	r3, [r3, #0]
1004204a:	e152      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_TERMINATE_VOLTAGE_MSB, &msb_TV, 1);
1004204c:	253b      	movs	r5, #59	@ 0x3b
1004204e:	2648      	movs	r6, #72	@ 0x48
10042050:	19ab      	adds	r3, r5, r6
10042052:	19dc      	adds	r4, r3, r7
10042054:	2320      	movs	r3, #32
10042056:	199b      	adds	r3, r3, r6
10042058:	19da      	adds	r2, r3, r7
1004205a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1004205c:	2301      	movs	r3, #1
1004205e:	214b      	movs	r1, #75	@ 0x4b
10042060:	f7ff fa16 	bl	10041490 <BQ27427_Write>
10042064:	0003      	movs	r3, r0
10042066:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
10042068:	19ab      	adds	r3, r5, r6
1004206a:	19db      	adds	r3, r3, r7
1004206c:	781b      	ldrb	r3, [r3, #0]
1004206e:	2b00      	cmp	r3, #0
10042070:	d003      	beq.n	1004207a <BQ27427_SetDesignCapacity+0x7ba>
10042072:	19ab      	adds	r3, r5, r6
10042074:	19db      	adds	r3, r3, r7
10042076:	781b      	ldrb	r3, [r3, #0]
10042078:	e13b      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_mWH_LSB, &lsb_mWh, 1);
1004207a:	253b      	movs	r5, #59	@ 0x3b
1004207c:	2648      	movs	r6, #72	@ 0x48
1004207e:	19ab      	adds	r3, r5, r6
10042080:	19dc      	adds	r4, r3, r7
10042082:	231d      	movs	r3, #29
10042084:	199b      	adds	r3, r3, r6
10042086:	19da      	adds	r2, r3, r7
10042088:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1004208a:	2301      	movs	r3, #1
1004208c:	2148      	movs	r1, #72	@ 0x48
1004208e:	f7ff f9ff 	bl	10041490 <BQ27427_Write>
10042092:	0003      	movs	r3, r0
10042094:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
10042096:	19ab      	adds	r3, r5, r6
10042098:	19db      	adds	r3, r3, r7
1004209a:	781b      	ldrb	r3, [r3, #0]
1004209c:	2b00      	cmp	r3, #0
1004209e:	d003      	beq.n	100420a8 <BQ27427_SetDesignCapacity+0x7e8>
100420a0:	19ab      	adds	r3, r5, r6
100420a2:	19db      	adds	r3, r3, r7
100420a4:	781b      	ldrb	r3, [r3, #0]
100420a6:	e124      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_mWH_MSB, &msb_mWh, 1);
100420a8:	253b      	movs	r5, #59	@ 0x3b
100420aa:	2648      	movs	r6, #72	@ 0x48
100420ac:	19ab      	adds	r3, r5, r6
100420ae:	19dc      	adds	r4, r3, r7
100420b0:	231e      	movs	r3, #30
100420b2:	199b      	adds	r3, r3, r6
100420b4:	19da      	adds	r2, r3, r7
100420b6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
100420b8:	2301      	movs	r3, #1
100420ba:	2149      	movs	r1, #73	@ 0x49
100420bc:	f7ff f9e8 	bl	10041490 <BQ27427_Write>
100420c0:	0003      	movs	r3, r0
100420c2:	7023      	strb	r3, [r4, #0]
//    HAL_Delay(1);
    if (ret != HAL_OK) return ret;
100420c4:	19ab      	adds	r3, r5, r6
100420c6:	19db      	adds	r3, r3, r7
100420c8:	781b      	ldrb	r3, [r3, #0]
100420ca:	2b00      	cmp	r3, #0
100420cc:	d003      	beq.n	100420d6 <BQ27427_SetDesignCapacity+0x816>
100420ce:	19ab      	adds	r3, r5, r6
100420d0:	19db      	adds	r3, r3, r7
100420d2:	781b      	ldrb	r3, [r3, #0]
100420d4:	e10d      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>

    newCsum = BQ27427_calcChecksum(old_csum, old_msb_DC, old_lsb_DC, old_msb_CTTC, old_lsb_CTTC, old_msb_DCT, old_lsb_DCT, old_msb_CCT, old_lsb_CCT, old_msb_QC, old_lsb_QC, old_msb_mWh, old_lsb_mWh, old_msb_TV, old_lsb_TV, msb_DC, lsb_DC, msb_CTTC, lsb_CTTC, msb_DCT, lsb_DCT, msb_CCT, lsb_CCT, msb_QC, lsb_QC, msb_TV, lsb_TV, msb_mWh, lsb_mWh);
100420d6:	2339      	movs	r3, #57	@ 0x39
100420d8:	2148      	movs	r1, #72	@ 0x48
100420da:	185b      	adds	r3, r3, r1
100420dc:	19db      	adds	r3, r3, r7
100420de:	781b      	ldrb	r3, [r3, #0]
100420e0:	647b      	str	r3, [r7, #68]	@ 0x44
100420e2:	2238      	movs	r2, #56	@ 0x38
100420e4:	1853      	adds	r3, r2, r1
100420e6:	19db      	adds	r3, r3, r7
100420e8:	781a      	ldrb	r2, [r3, #0]
100420ea:	643a      	str	r2, [r7, #64]	@ 0x40
100420ec:	2437      	movs	r4, #55	@ 0x37
100420ee:	000a      	movs	r2, r1
100420f0:	18a3      	adds	r3, r4, r2
100420f2:	19db      	adds	r3, r3, r7
100420f4:	781c      	ldrb	r4, [r3, #0]
100420f6:	63fc      	str	r4, [r7, #60]	@ 0x3c
100420f8:	2535      	movs	r5, #53	@ 0x35
100420fa:	18ab      	adds	r3, r5, r2
100420fc:	19db      	adds	r3, r3, r7
100420fe:	781d      	ldrb	r5, [r3, #0]
10042100:	63bd      	str	r5, [r7, #56]	@ 0x38
10042102:	2636      	movs	r6, #54	@ 0x36
10042104:	18b3      	adds	r3, r6, r2
10042106:	19db      	adds	r3, r3, r7
10042108:	781e      	ldrb	r6, [r3, #0]
1004210a:	637e      	str	r6, [r7, #52]	@ 0x34
1004210c:	2134      	movs	r1, #52	@ 0x34
1004210e:	188b      	adds	r3, r1, r2
10042110:	19db      	adds	r3, r3, r7
10042112:	7819      	ldrb	r1, [r3, #0]
10042114:	6339      	str	r1, [r7, #48]	@ 0x30
10042116:	2033      	movs	r0, #51	@ 0x33
10042118:	0011      	movs	r1, r2
1004211a:	1843      	adds	r3, r0, r1
1004211c:	19db      	adds	r3, r3, r7
1004211e:	7818      	ldrb	r0, [r3, #0]
10042120:	62f8      	str	r0, [r7, #44]	@ 0x2c
10042122:	2432      	movs	r4, #50	@ 0x32
10042124:	1863      	adds	r3, r4, r1
10042126:	19db      	adds	r3, r3, r7
10042128:	781c      	ldrb	r4, [r3, #0]
1004212a:	62bc      	str	r4, [r7, #40]	@ 0x28
1004212c:	2531      	movs	r5, #49	@ 0x31
1004212e:	186b      	adds	r3, r5, r1
10042130:	19db      	adds	r3, r3, r7
10042132:	781d      	ldrb	r5, [r3, #0]
10042134:	627d      	str	r5, [r7, #36]	@ 0x24
10042136:	2330      	movs	r3, #48	@ 0x30
10042138:	185b      	adds	r3, r3, r1
1004213a:	19db      	adds	r3, r3, r7
1004213c:	781b      	ldrb	r3, [r3, #0]
1004213e:	623b      	str	r3, [r7, #32]
10042140:	222f      	movs	r2, #47	@ 0x2f
10042142:	1853      	adds	r3, r2, r1
10042144:	19db      	adds	r3, r3, r7
10042146:	781a      	ldrb	r2, [r3, #0]
10042148:	61fa      	str	r2, [r7, #28]
1004214a:	262e      	movs	r6, #46	@ 0x2e
1004214c:	000a      	movs	r2, r1
1004214e:	18b3      	adds	r3, r6, r2
10042150:	19db      	adds	r3, r3, r7
10042152:	781e      	ldrb	r6, [r3, #0]
10042154:	61be      	str	r6, [r7, #24]
10042156:	212d      	movs	r1, #45	@ 0x2d
10042158:	188b      	adds	r3, r1, r2
1004215a:	19db      	adds	r3, r3, r7
1004215c:	7819      	ldrb	r1, [r3, #0]
1004215e:	6179      	str	r1, [r7, #20]
10042160:	202c      	movs	r0, #44	@ 0x2c
10042162:	0011      	movs	r1, r2
10042164:	1843      	adds	r3, r0, r1
10042166:	19db      	adds	r3, r3, r7
10042168:	7818      	ldrb	r0, [r3, #0]
1004216a:	6138      	str	r0, [r7, #16]
1004216c:	242b      	movs	r4, #43	@ 0x2b
1004216e:	1863      	adds	r3, r4, r1
10042170:	19db      	adds	r3, r3, r7
10042172:	781c      	ldrb	r4, [r3, #0]
10042174:	60fc      	str	r4, [r7, #12]
10042176:	252a      	movs	r5, #42	@ 0x2a
10042178:	186b      	adds	r3, r5, r1
1004217a:	19db      	adds	r3, r3, r7
1004217c:	781d      	ldrb	r5, [r3, #0]
1004217e:	60bd      	str	r5, [r7, #8]
10042180:	2329      	movs	r3, #41	@ 0x29
10042182:	185b      	adds	r3, r3, r1
10042184:	19db      	adds	r3, r3, r7
10042186:	781b      	ldrb	r3, [r3, #0]
10042188:	607b      	str	r3, [r7, #4]
1004218a:	2228      	movs	r2, #40	@ 0x28
1004218c:	1853      	adds	r3, r2, r1
1004218e:	19db      	adds	r3, r3, r7
10042190:	781a      	ldrb	r2, [r3, #0]
10042192:	4693      	mov	fp, r2
10042194:	2227      	movs	r2, #39	@ 0x27
10042196:	1853      	adds	r3, r2, r1
10042198:	19db      	adds	r3, r3, r7
1004219a:	781a      	ldrb	r2, [r3, #0]
1004219c:	4692      	mov	sl, r2
1004219e:	2226      	movs	r2, #38	@ 0x26
100421a0:	1853      	adds	r3, r2, r1
100421a2:	19db      	adds	r3, r3, r7
100421a4:	781a      	ldrb	r2, [r3, #0]
100421a6:	4691      	mov	r9, r2
100421a8:	2225      	movs	r2, #37	@ 0x25
100421aa:	1853      	adds	r3, r2, r1
100421ac:	19db      	adds	r3, r3, r7
100421ae:	781a      	ldrb	r2, [r3, #0]
100421b0:	4690      	mov	r8, r2
100421b2:	2224      	movs	r2, #36	@ 0x24
100421b4:	1853      	adds	r3, r2, r1
100421b6:	19db      	adds	r3, r3, r7
100421b8:	781a      	ldrb	r2, [r3, #0]
100421ba:	4694      	mov	ip, r2
100421bc:	2223      	movs	r2, #35	@ 0x23
100421be:	1853      	adds	r3, r2, r1
100421c0:	19db      	adds	r3, r3, r7
100421c2:	781b      	ldrb	r3, [r3, #0]
100421c4:	603b      	str	r3, [r7, #0]
100421c6:	2222      	movs	r2, #34	@ 0x22
100421c8:	1853      	adds	r3, r2, r1
100421ca:	19db      	adds	r3, r3, r7
100421cc:	781d      	ldrb	r5, [r3, #0]
100421ce:	2221      	movs	r2, #33	@ 0x21
100421d0:	1853      	adds	r3, r2, r1
100421d2:	19db      	adds	r3, r3, r7
100421d4:	781c      	ldrb	r4, [r3, #0]
100421d6:	2220      	movs	r2, #32
100421d8:	1853      	adds	r3, r2, r1
100421da:	19db      	adds	r3, r3, r7
100421dc:	7818      	ldrb	r0, [r3, #0]
100421de:	221f      	movs	r2, #31
100421e0:	000e      	movs	r6, r1
100421e2:	1853      	adds	r3, r2, r1
100421e4:	19db      	adds	r3, r3, r7
100421e6:	7819      	ldrb	r1, [r3, #0]
100421e8:	221e      	movs	r2, #30
100421ea:	1993      	adds	r3, r2, r6
100421ec:	19db      	adds	r3, r3, r7
100421ee:	781a      	ldrb	r2, [r3, #0]
100421f0:	231d      	movs	r3, #29
100421f2:	199b      	adds	r3, r3, r6
100421f4:	19db      	adds	r3, r3, r7
100421f6:	781b      	ldrb	r3, [r3, #0]
100421f8:	9318      	str	r3, [sp, #96]	@ 0x60
100421fa:	9217      	str	r2, [sp, #92]	@ 0x5c
100421fc:	9116      	str	r1, [sp, #88]	@ 0x58
100421fe:	9015      	str	r0, [sp, #84]	@ 0x54
10042200:	9414      	str	r4, [sp, #80]	@ 0x50
10042202:	9513      	str	r5, [sp, #76]	@ 0x4c
10042204:	683b      	ldr	r3, [r7, #0]
10042206:	9312      	str	r3, [sp, #72]	@ 0x48
10042208:	4662      	mov	r2, ip
1004220a:	9211      	str	r2, [sp, #68]	@ 0x44
1004220c:	4642      	mov	r2, r8
1004220e:	9210      	str	r2, [sp, #64]	@ 0x40
10042210:	464a      	mov	r2, r9
10042212:	920f      	str	r2, [sp, #60]	@ 0x3c
10042214:	4652      	mov	r2, sl
10042216:	920e      	str	r2, [sp, #56]	@ 0x38
10042218:	465a      	mov	r2, fp
1004221a:	920d      	str	r2, [sp, #52]	@ 0x34
1004221c:	687b      	ldr	r3, [r7, #4]
1004221e:	930c      	str	r3, [sp, #48]	@ 0x30
10042220:	68bd      	ldr	r5, [r7, #8]
10042222:	950b      	str	r5, [sp, #44]	@ 0x2c
10042224:	68fc      	ldr	r4, [r7, #12]
10042226:	940a      	str	r4, [sp, #40]	@ 0x28
10042228:	6938      	ldr	r0, [r7, #16]
1004222a:	9009      	str	r0, [sp, #36]	@ 0x24
1004222c:	6979      	ldr	r1, [r7, #20]
1004222e:	9108      	str	r1, [sp, #32]
10042230:	69be      	ldr	r6, [r7, #24]
10042232:	9607      	str	r6, [sp, #28]
10042234:	69fa      	ldr	r2, [r7, #28]
10042236:	9206      	str	r2, [sp, #24]
10042238:	6a3b      	ldr	r3, [r7, #32]
1004223a:	9305      	str	r3, [sp, #20]
1004223c:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
1004223e:	9504      	str	r5, [sp, #16]
10042240:	6abc      	ldr	r4, [r7, #40]	@ 0x28
10042242:	9403      	str	r4, [sp, #12]
10042244:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10042246:	9002      	str	r0, [sp, #8]
10042248:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1004224a:	9101      	str	r1, [sp, #4]
1004224c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
1004224e:	9600      	str	r6, [sp, #0]
10042250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10042252:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10042254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
10042256:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10042258:	f7ff fa6e 	bl	10041738 <BQ27427_calcChecksum>
1004225c:	0003      	movs	r3, r0
1004225e:	001a      	movs	r2, r3
10042260:	213a      	movs	r1, #58	@ 0x3a
10042262:	2648      	movs	r6, #72	@ 0x48
10042264:	198b      	adds	r3, r1, r6
10042266:	19db      	adds	r3, r3, r7
10042268:	701a      	strb	r2, [r3, #0]

    ret = BQ27427_Write(sensor_BQ27427, BQ27427_OFFSET_CHECKSUM,&newCsum, 1);
1004226a:	253b      	movs	r5, #59	@ 0x3b
1004226c:	19ab      	adds	r3, r5, r6
1004226e:	19dc      	adds	r4, r3, r7
10042270:	198b      	adds	r3, r1, r6
10042272:	19da      	adds	r2, r3, r7
10042274:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10042276:	2301      	movs	r3, #1
10042278:	2160      	movs	r1, #96	@ 0x60
1004227a:	f7ff f909 	bl	10041490 <BQ27427_Write>
1004227e:	0003      	movs	r3, r0
10042280:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
10042282:	19ab      	adds	r3, r5, r6
10042284:	19db      	adds	r3, r3, r7
10042286:	781b      	ldrb	r3, [r3, #0]
10042288:	2b00      	cmp	r3, #0
1004228a:	d003      	beq.n	10042294 <BQ27427_SetDesignCapacity+0x9d4>
1004228c:	19ab      	adds	r3, r5, r6
1004228e:	19db      	adds	r3, r3, r7
10042290:	781b      	ldrb	r3, [r3, #0]
10042292:	e02e      	b.n	100422f2 <BQ27427_SetDesignCapacity+0xa32>

    do {
        flags = BQ27427_ReadFlags(sensor_BQ27427);
10042294:	253c      	movs	r5, #60	@ 0x3c
10042296:	2648      	movs	r6, #72	@ 0x48
10042298:	19ab      	adds	r3, r5, r6
1004229a:	19dc      	adds	r4, r3, r7
1004229c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004229e:	0018      	movs	r0, r3
100422a0:	f7ff f956 	bl	10041550 <BQ27427_ReadFlags>
100422a4:	0003      	movs	r3, r0
100422a6:	8023      	strh	r3, [r4, #0]
    } while (!(flags & BQ27427_FLAG_CFGUPMODE));
100422a8:	19ab      	adds	r3, r5, r6
100422aa:	19db      	adds	r3, r3, r7
100422ac:	881b      	ldrh	r3, [r3, #0]
100422ae:	2210      	movs	r2, #16
100422b0:	4013      	ands	r3, r2
100422b2:	d0ef      	beq.n	10042294 <BQ27427_SetDesignCapacity+0x9d4>

    /* 7) Forces the Flags() [BAT_DET] bit to set when the battery insertion detection is disabled via OpConfig [BIE] = 0*/
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_BAT_INSERT);
100422b4:	210c      	movs	r1, #12
100422b6:	198b      	adds	r3, r1, r6
100422b8:	19db      	adds	r3, r3, r7
100422ba:	220c      	movs	r2, #12
100422bc:	801a      	strh	r2, [r3, #0]
100422be:	198b      	adds	r3, r1, r6
100422c0:	19da      	adds	r2, r3, r7
100422c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
100422c4:	2302      	movs	r3, #2
100422c6:	2100      	movs	r1, #0
100422c8:	f7ff f8e2 	bl	10041490 <BQ27427_Write>
    HAL_Delay(1);
100422cc:	2001      	movs	r0, #1
100422ce:	f000 fda9 	bl	10042e24 <HAL_Delay>

    /* 8) Soft-reset to exit CONFIG UPDATE */
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SOFT_RESET);
100422d2:	2108      	movs	r1, #8
100422d4:	198b      	adds	r3, r1, r6
100422d6:	19db      	adds	r3, r3, r7
100422d8:	2242      	movs	r2, #66	@ 0x42
100422da:	801a      	strh	r2, [r3, #0]
100422dc:	198b      	adds	r3, r1, r6
100422de:	19da      	adds	r2, r3, r7
100422e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
100422e2:	2302      	movs	r3, #2
100422e4:	2100      	movs	r1, #0
100422e6:	f7ff f8d3 	bl	10041490 <BQ27427_Write>
    HAL_Delay(1);
100422ea:	2001      	movs	r0, #1
100422ec:	f000 fd9a 	bl	10042e24 <HAL_Delay>

    /* Optional: re-seal */
//    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SEALED);

    return HAL_OK;
100422f0:	2300      	movs	r3, #0
}
100422f2:	0018      	movs	r0, r3
100422f4:	46bd      	mov	sp, r7
100422f6:	b025      	add	sp, #148	@ 0x94
100422f8:	bcf0      	pop	{r4, r5, r6, r7}
100422fa:	46bb      	mov	fp, r7
100422fc:	46b2      	mov	sl, r6
100422fe:	46a9      	mov	r9, r5
10042300:	46a0      	mov	r8, r4
10042302:	bdf0      	pop	{r4, r5, r6, r7, pc}

10042304 <BQ27427_SetChemistryProfile>:
 *                            - CHEM_C
 * @return  HAL_StatusTypeDef HAL_OK em caso de sucesso, ou código de erro HAL em caso de falha.
 * ******************************************************************************
 */

HAL_StatusTypeDef BQ27427_SetChemistryProfile(BQ27427_t *sensor_BQ27427, uint8_t profile){
10042304:	b5b0      	push	{r4, r5, r7, lr}
10042306:	b08c      	sub	sp, #48	@ 0x30
10042308:	af00      	add	r7, sp, #0
1004230a:	6078      	str	r0, [r7, #4]
1004230c:	000a      	movs	r2, r1
1004230e:	1cfb      	adds	r3, r7, #3
10042310:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint16_t flags;
	uint8_t cheim_id;

	/* 1) Unseal twice */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
10042312:	2128      	movs	r1, #40	@ 0x28
10042314:	187b      	adds	r3, r7, r1
10042316:	4a56      	ldr	r2, [pc, #344]	@ (10042470 <BQ27427_SetChemistryProfile+0x16c>)
10042318:	801a      	strh	r2, [r3, #0]
1004231a:	187a      	adds	r2, r7, r1
1004231c:	6878      	ldr	r0, [r7, #4]
1004231e:	2302      	movs	r3, #2
10042320:	2100      	movs	r1, #0
10042322:	f7ff f8b5 	bl	10041490 <BQ27427_Write>
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
10042326:	2124      	movs	r1, #36	@ 0x24
10042328:	187b      	adds	r3, r7, r1
1004232a:	4a51      	ldr	r2, [pc, #324]	@ (10042470 <BQ27427_SetChemistryProfile+0x16c>)
1004232c:	801a      	strh	r2, [r3, #0]
1004232e:	187a      	adds	r2, r7, r1
10042330:	6878      	ldr	r0, [r7, #4]
10042332:	2302      	movs	r3, #2
10042334:	2100      	movs	r1, #0
10042336:	f7ff f8ab 	bl	10041490 <BQ27427_Write>

	/* 2) Write and Read CHEM_ID */
    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_CHEM_ID); /*Primeiro escreve no endereço 0x08*/
1004233a:	2120      	movs	r1, #32
1004233c:	187b      	adds	r3, r7, r1
1004233e:	2208      	movs	r2, #8
10042340:	801a      	strh	r2, [r3, #0]
10042342:	187a      	adds	r2, r7, r1
10042344:	6878      	ldr	r0, [r7, #4]
10042346:	2302      	movs	r3, #2
10042348:	2100      	movs	r1, #0
1004234a:	f7ff f8a1 	bl	10041490 <BQ27427_Write>
	ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_CMD_CTRL_SUBCMD, &cheim_id, 2); /*E depois lê no endereço 0x08*/
1004234e:	252f      	movs	r5, #47	@ 0x2f
10042350:	197c      	adds	r4, r7, r5
10042352:	232b      	movs	r3, #43	@ 0x2b
10042354:	18fa      	adds	r2, r7, r3
10042356:	6878      	ldr	r0, [r7, #4]
10042358:	2302      	movs	r3, #2
1004235a:	2100      	movs	r1, #0
1004235c:	f7ff f988 	bl	10041670 <BQ27427_ReadInternal>
10042360:	0003      	movs	r3, r0
10042362:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) return ret;
10042364:	197b      	adds	r3, r7, r5
10042366:	781b      	ldrb	r3, [r3, #0]
10042368:	2b00      	cmp	r3, #0
1004236a:	d002      	beq.n	10042372 <BQ27427_SetChemistryProfile+0x6e>
1004236c:	197b      	adds	r3, r7, r5
1004236e:	781b      	ldrb	r3, [r3, #0]
10042370:	e079      	b.n	10042466 <BQ27427_SetChemistryProfile+0x162>

	/* 3) Enter CONFIG UPDATE */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_CFGUPDATE);
10042372:	211c      	movs	r1, #28
10042374:	187b      	adds	r3, r7, r1
10042376:	2213      	movs	r2, #19
10042378:	801a      	strh	r2, [r3, #0]
1004237a:	187a      	adds	r2, r7, r1
1004237c:	6878      	ldr	r0, [r7, #4]
1004237e:	2302      	movs	r3, #2
10042380:	2100      	movs	r1, #0
10042382:	f7ff f885 	bl	10041490 <BQ27427_Write>

    /* 4) Wait for CONFIG UPDATE flag */
	do {
		flags = BQ27427_ReadFlags(sensor_BQ27427);
10042386:	252c      	movs	r5, #44	@ 0x2c
10042388:	197c      	adds	r4, r7, r5
1004238a:	687b      	ldr	r3, [r7, #4]
1004238c:	0018      	movs	r0, r3
1004238e:	f7ff f8df 	bl	10041550 <BQ27427_ReadFlags>
10042392:	0003      	movs	r3, r0
10042394:	8023      	strh	r3, [r4, #0]
	} while (!(flags & BQ27427_FLAG_CFGUPMODE));
10042396:	197b      	adds	r3, r7, r5
10042398:	881b      	ldrh	r3, [r3, #0]
1004239a:	2210      	movs	r2, #16
1004239c:	4013      	ands	r3, r2
1004239e:	d0f2      	beq.n	10042386 <BQ27427_SetChemistryProfile+0x82>

    /* 5) Write CHEM_ID */
	switch (profile) {
100423a0:	1cfb      	adds	r3, r7, #3
100423a2:	781b      	ldrb	r3, [r3, #0]
100423a4:	2b02      	cmp	r3, #2
100423a6:	d01b      	beq.n	100423e0 <BQ27427_SetChemistryProfile+0xdc>
100423a8:	dc25      	bgt.n	100423f6 <BQ27427_SetChemistryProfile+0xf2>
100423aa:	2b00      	cmp	r3, #0
100423ac:	d002      	beq.n	100423b4 <BQ27427_SetChemistryProfile+0xb0>
100423ae:	2b01      	cmp	r3, #1
100423b0:	d00b      	beq.n	100423ca <BQ27427_SetChemistryProfile+0xc6>
			break;
		case CHEM_C:
			BQ27427_sendCmd(sensor_BQ27427, BQ27427_CHEMISTRY_PROFILE_C);
			break;
		default:
			break;
100423b2:	e020      	b.n	100423f6 <BQ27427_SetChemistryProfile+0xf2>
			BQ27427_sendCmd(sensor_BQ27427, BQ27427_CHEMISTRY_PROFILE_A);
100423b4:	2118      	movs	r1, #24
100423b6:	187b      	adds	r3, r7, r1
100423b8:	2230      	movs	r2, #48	@ 0x30
100423ba:	801a      	strh	r2, [r3, #0]
100423bc:	187a      	adds	r2, r7, r1
100423be:	6878      	ldr	r0, [r7, #4]
100423c0:	2302      	movs	r3, #2
100423c2:	2100      	movs	r1, #0
100423c4:	f7ff f864 	bl	10041490 <BQ27427_Write>
			break;
100423c8:	e016      	b.n	100423f8 <BQ27427_SetChemistryProfile+0xf4>
			BQ27427_sendCmd(sensor_BQ27427, BQ27427_CHEMISTRY_PROFILE_B);
100423ca:	2114      	movs	r1, #20
100423cc:	187b      	adds	r3, r7, r1
100423ce:	2231      	movs	r2, #49	@ 0x31
100423d0:	801a      	strh	r2, [r3, #0]
100423d2:	187a      	adds	r2, r7, r1
100423d4:	6878      	ldr	r0, [r7, #4]
100423d6:	2302      	movs	r3, #2
100423d8:	2100      	movs	r1, #0
100423da:	f7ff f859 	bl	10041490 <BQ27427_Write>
			break;
100423de:	e00b      	b.n	100423f8 <BQ27427_SetChemistryProfile+0xf4>
			BQ27427_sendCmd(sensor_BQ27427, BQ27427_CHEMISTRY_PROFILE_C);
100423e0:	2110      	movs	r1, #16
100423e2:	187b      	adds	r3, r7, r1
100423e4:	2232      	movs	r2, #50	@ 0x32
100423e6:	801a      	strh	r2, [r3, #0]
100423e8:	187a      	adds	r2, r7, r1
100423ea:	6878      	ldr	r0, [r7, #4]
100423ec:	2302      	movs	r3, #2
100423ee:	2100      	movs	r1, #0
100423f0:	f7ff f84e 	bl	10041490 <BQ27427_Write>
			break;
100423f4:	e000      	b.n	100423f8 <BQ27427_SetChemistryProfile+0xf4>
			break;
100423f6:	46c0      	nop			@ (mov r8, r8)
	}

	/* 6) Soft-reset to exit CONFIG UPDATE */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SOFT_RESET);
100423f8:	210c      	movs	r1, #12
100423fa:	187b      	adds	r3, r7, r1
100423fc:	2242      	movs	r2, #66	@ 0x42
100423fe:	801a      	strh	r2, [r3, #0]
10042400:	187a      	adds	r2, r7, r1
10042402:	6878      	ldr	r0, [r7, #4]
10042404:	2302      	movs	r3, #2
10042406:	2100      	movs	r1, #0
10042408:	f7ff f842 	bl	10041490 <BQ27427_Write>
	HAL_Delay(5);
1004240c:	2005      	movs	r0, #5
1004240e:	f000 fd09 	bl	10042e24 <HAL_Delay>

    /* 7) Wait for CONFIG UPDATE flag */
	do {
		flags = BQ27427_ReadFlags(sensor_BQ27427);
10042412:	252c      	movs	r5, #44	@ 0x2c
10042414:	197c      	adds	r4, r7, r5
10042416:	687b      	ldr	r3, [r7, #4]
10042418:	0018      	movs	r0, r3
1004241a:	f7ff f899 	bl	10041550 <BQ27427_ReadFlags>
1004241e:	0003      	movs	r3, r0
10042420:	8023      	strh	r3, [r4, #0]
	} while ((flags & BQ27427_FLAG_CFGUPMODE) != 0);
10042422:	197b      	adds	r3, r7, r5
10042424:	881b      	ldrh	r3, [r3, #0]
10042426:	2210      	movs	r2, #16
10042428:	4013      	ands	r3, r2
1004242a:	d1f2      	bne.n	10042412 <BQ27427_SetChemistryProfile+0x10e>

	/* 8) Read CHEM_ID */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_CHEM_ID);
1004242c:	2108      	movs	r1, #8
1004242e:	187b      	adds	r3, r7, r1
10042430:	2208      	movs	r2, #8
10042432:	801a      	strh	r2, [r3, #0]
10042434:	187a      	adds	r2, r7, r1
10042436:	6878      	ldr	r0, [r7, #4]
10042438:	2302      	movs	r3, #2
1004243a:	2100      	movs	r1, #0
1004243c:	f7ff f828 	bl	10041490 <BQ27427_Write>
	ret = BQ27427_ReadInternal(sensor_BQ27427, BQ27427_CMD_CTRL_SUBCMD, &cheim_id, 2);
10042440:	252f      	movs	r5, #47	@ 0x2f
10042442:	197c      	adds	r4, r7, r5
10042444:	232b      	movs	r3, #43	@ 0x2b
10042446:	18fa      	adds	r2, r7, r3
10042448:	6878      	ldr	r0, [r7, #4]
1004244a:	2302      	movs	r3, #2
1004244c:	2100      	movs	r1, #0
1004244e:	f7ff f90f 	bl	10041670 <BQ27427_ReadInternal>
10042452:	0003      	movs	r3, r0
10042454:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) return ret;
10042456:	197b      	adds	r3, r7, r5
10042458:	781b      	ldrb	r3, [r3, #0]
1004245a:	2b00      	cmp	r3, #0
1004245c:	d002      	beq.n	10042464 <BQ27427_SetChemistryProfile+0x160>
1004245e:	197b      	adds	r3, r7, r5
10042460:	781b      	ldrb	r3, [r3, #0]
10042462:	e000      	b.n	10042466 <BQ27427_SetChemistryProfile+0x162>

	return HAL_OK;
10042464:	2300      	movs	r3, #0
}
10042466:	0018      	movs	r0, r3
10042468:	46bd      	mov	sp, r7
1004246a:	b00c      	add	sp, #48	@ 0x30
1004246c:	bdb0      	pop	{r4, r5, r7, pc}
1004246e:	46c0      	nop			@ (mov r8, r8)
10042470:	ffff8000 	.word	0xffff8000

10042474 <BQ27427_GetDesignCapacity>:
 * @param   sensor_BQ27427 Ponteiro para o handle do sensor inicializado.
 * @return  Capacidade configurada em mAh, ou 0xFFFF em caso de erro.
 * ******************************************************************************
 */

uint16_t BQ27427_GetDesignCapacity(BQ27427_t *sensor_BQ27427){
10042474:	b5b0      	push	{r4, r5, r7, lr}
10042476:	b088      	sub	sp, #32
10042478:	af00      	add	r7, sp, #0
1004247a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint16_t flags;
	uint16_t densign_capacity;
	/* 1) Unseal twice */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
1004247c:	2118      	movs	r1, #24
1004247e:	187b      	adds	r3, r7, r1
10042480:	4a2b      	ldr	r2, [pc, #172]	@ (10042530 <BQ27427_GetDesignCapacity+0xbc>)
10042482:	801a      	strh	r2, [r3, #0]
10042484:	187a      	adds	r2, r7, r1
10042486:	6878      	ldr	r0, [r7, #4]
10042488:	2302      	movs	r3, #2
1004248a:	2100      	movs	r1, #0
1004248c:	f7ff f800 	bl	10041490 <BQ27427_Write>
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
10042490:	2114      	movs	r1, #20
10042492:	187b      	adds	r3, r7, r1
10042494:	4a26      	ldr	r2, [pc, #152]	@ (10042530 <BQ27427_GetDesignCapacity+0xbc>)
10042496:	801a      	strh	r2, [r3, #0]
10042498:	187a      	adds	r2, r7, r1
1004249a:	6878      	ldr	r0, [r7, #4]
1004249c:	2302      	movs	r3, #2
1004249e:	2100      	movs	r1, #0
100424a0:	f7fe fff6 	bl	10041490 <BQ27427_Write>

	/* 2) Enter CONFIG UPDATE */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_CFGUPDATE);
100424a4:	2110      	movs	r1, #16
100424a6:	187b      	adds	r3, r7, r1
100424a8:	2213      	movs	r2, #19
100424aa:	801a      	strh	r2, [r3, #0]
100424ac:	187a      	adds	r2, r7, r1
100424ae:	6878      	ldr	r0, [r7, #4]
100424b0:	2302      	movs	r3, #2
100424b2:	2100      	movs	r1, #0
100424b4:	f7fe ffec 	bl	10041490 <BQ27427_Write>
//	HAL_Delay(1100);

	/* 3) Wait for CONFIG UPDATE flag */
	do {
		flags = BQ27427_ReadFlags(sensor_BQ27427);
100424b8:	251e      	movs	r5, #30
100424ba:	197c      	adds	r4, r7, r5
100424bc:	687b      	ldr	r3, [r7, #4]
100424be:	0018      	movs	r0, r3
100424c0:	f7ff f846 	bl	10041550 <BQ27427_ReadFlags>
100424c4:	0003      	movs	r3, r0
100424c6:	8023      	strh	r3, [r4, #0]
	} while (!(flags & BQ27427_FLAG_CFGUPMODE));
100424c8:	197b      	adds	r3, r7, r5
100424ca:	881b      	ldrh	r3, [r3, #0]
100424cc:	2210      	movs	r2, #16
100424ce:	4013      	ands	r3, r2
100424d0:	d0f2      	beq.n	100424b8 <BQ27427_GetDesignCapacity+0x44>

	/* 4) Select State block, offset 0 */
	ret = BQ27427_selectDataBlock(sensor_BQ27427, BQ27427_BLOCK_CLASS_STATE, 0);
100424d2:	251d      	movs	r5, #29
100424d4:	197c      	adds	r4, r7, r5
100424d6:	687b      	ldr	r3, [r7, #4]
100424d8:	2200      	movs	r2, #0
100424da:	2152      	movs	r1, #82	@ 0x52
100424dc:	0018      	movs	r0, r3
100424de:	f7ff f8ee 	bl	100416be <BQ27427_selectDataBlock>
100424e2:	0003      	movs	r3, r0
100424e4:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) return ret;
100424e6:	197b      	adds	r3, r7, r5
100424e8:	781b      	ldrb	r3, [r3, #0]
100424ea:	2b00      	cmp	r3, #0
100424ec:	d003      	beq.n	100424f6 <BQ27427_GetDesignCapacity+0x82>
100424ee:	197b      	adds	r3, r7, r5
100424f0:	781b      	ldrb	r3, [r3, #0]
100424f2:	b29b      	uxth	r3, r3
100424f4:	e018      	b.n	10042528 <BQ27427_GetDesignCapacity+0xb4>

	HAL_Delay(1);
100424f6:	2001      	movs	r0, #1
100424f8:	f000 fc94 	bl	10042e24 <HAL_Delay>
	densign_capacity = BQ27427_Read(sensor_BQ27427, 0x4746);
100424fc:	251a      	movs	r5, #26
100424fe:	197c      	adds	r4, r7, r5
10042500:	4a0c      	ldr	r2, [pc, #48]	@ (10042534 <BQ27427_GetDesignCapacity+0xc0>)
10042502:	687b      	ldr	r3, [r7, #4]
10042504:	0011      	movs	r1, r2
10042506:	0018      	movs	r0, r3
10042508:	f7fe ff8e 	bl	10041428 <BQ27427_Read>
1004250c:	0003      	movs	r3, r0
1004250e:	8023      	strh	r3, [r4, #0]

	/* 7) Soft-reset to exit CONFIG UPDATE */
	BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SOFT_RESET);
10042510:	210c      	movs	r1, #12
10042512:	187b      	adds	r3, r7, r1
10042514:	2242      	movs	r2, #66	@ 0x42
10042516:	801a      	strh	r2, [r3, #0]
10042518:	187a      	adds	r2, r7, r1
1004251a:	6878      	ldr	r0, [r7, #4]
1004251c:	2302      	movs	r3, #2
1004251e:	2100      	movs	r1, #0
10042520:	f7fe ffb6 	bl	10041490 <BQ27427_Write>

	/* Optional: re-seal */
//	    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SEALED);

	return densign_capacity;
10042524:	197b      	adds	r3, r7, r5
10042526:	881b      	ldrh	r3, [r3, #0]
}
10042528:	0018      	movs	r0, r3
1004252a:	46bd      	mov	sp, r7
1004252c:	b008      	add	sp, #32
1004252e:	bdb0      	pop	{r4, r5, r7, pc}
10042530:	ffff8000 	.word	0xffff8000
10042534:	00004746 	.word	0x00004746

10042538 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10042538:	b580      	push	{r7, lr}
1004253a:	b084      	sub	sp, #16
1004253c:	af00      	add	r7, sp, #0
1004253e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10042540:	4b07      	ldr	r3, [pc, #28]	@ (10042560 <LL_AHB1_GRP1_EnableClock+0x28>)
10042542:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042544:	4b06      	ldr	r3, [pc, #24]	@ (10042560 <LL_AHB1_GRP1_EnableClock+0x28>)
10042546:	687a      	ldr	r2, [r7, #4]
10042548:	430a      	orrs	r2, r1
1004254a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004254c:	4b04      	ldr	r3, [pc, #16]	@ (10042560 <LL_AHB1_GRP1_EnableClock+0x28>)
1004254e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10042550:	687a      	ldr	r2, [r7, #4]
10042552:	4013      	ands	r3, r2
10042554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042556:	68fb      	ldr	r3, [r7, #12]
}
10042558:	46c0      	nop			@ (mov r8, r8)
1004255a:	46bd      	mov	sp, r7
1004255c:	b004      	add	sp, #16
1004255e:	bd80      	pop	{r7, pc}
10042560:	48400000 	.word	0x48400000

10042564 <gauge_read>:
static HAL_StatusTypeDef gauge_write(uint8_t reg, uint8_t *data, uint8_t len){
    return HAL_I2C_Mem_Write(&hi2c1, BQ27427_I2C_ADDR, reg,
                             I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}

static uint16_t gauge_read(uint8_t reg, uint8_t *data, uint8_t len){
10042564:	b580      	push	{r7, lr}
10042566:	b086      	sub	sp, #24
10042568:	af04      	add	r7, sp, #16
1004256a:	6039      	str	r1, [r7, #0]
1004256c:	0011      	movs	r1, r2
1004256e:	1dfb      	adds	r3, r7, #7
10042570:	1c02      	adds	r2, r0, #0
10042572:	701a      	strb	r2, [r3, #0]
10042574:	1dbb      	adds	r3, r7, #6
10042576:	1c0a      	adds	r2, r1, #0
10042578:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Read(&hi2c1, BQ27427_I2C_ADDR, reg,
1004257a:	1dfb      	adds	r3, r7, #7
1004257c:	781b      	ldrb	r3, [r3, #0]
1004257e:	b299      	uxth	r1, r3
10042580:	1dbb      	adds	r3, r7, #6
10042582:	781b      	ldrb	r3, [r3, #0]
10042584:	b29b      	uxth	r3, r3
10042586:	4808      	ldr	r0, [pc, #32]	@ (100425a8 <gauge_read+0x44>)
10042588:	2201      	movs	r2, #1
1004258a:	4252      	negs	r2, r2
1004258c:	9202      	str	r2, [sp, #8]
1004258e:	9301      	str	r3, [sp, #4]
10042590:	683b      	ldr	r3, [r7, #0]
10042592:	9300      	str	r3, [sp, #0]
10042594:	2301      	movs	r3, #1
10042596:	000a      	movs	r2, r1
10042598:	21aa      	movs	r1, #170	@ 0xaa
1004259a:	f001 f895 	bl	100436c8 <HAL_I2C_Mem_Read>
1004259e:	0003      	movs	r3, r0
                            I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}
100425a0:	0018      	movs	r0, r3
100425a2:	46bd      	mov	sp, r7
100425a4:	b002      	add	sp, #8
100425a6:	bd80      	pop	{r7, pc}
100425a8:	200000c4 	.word	0x200000c4

100425ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100425ac:	b590      	push	{r4, r7, lr}
100425ae:	b089      	sub	sp, #36	@ 0x24
100425b0:	af00      	add	r7, sp, #0
int main(void)
100425b2:	2330      	movs	r3, #48	@ 0x30
100425b4:	18fb      	adds	r3, r7, r3
100425b6:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100425b8:	f000 fbaf 	bl	10042d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
100425bc:	f000 f866 	bl	1004268c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
100425c0:	f000 f881 	bl	100426c6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100425c4:	f000 f8dc 	bl	10042780 <MX_GPIO_Init>
  MX_I2C1_Init();
100425c8:	f000 f89a 	bl	10042700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BQ27427_Init(&bq_sensor, &hi2c1); // Inicializa o sensor
100425cc:	4a2d      	ldr	r2, [pc, #180]	@ (10042684 <main+0xd8>)
100425ce:	4b2e      	ldr	r3, [pc, #184]	@ (10042688 <main+0xdc>)
100425d0:	0011      	movs	r1, r2
100425d2:	0018      	movs	r0, r3
100425d4:	f7fe ff84 	bl	100414e0 <BQ27427_Init>

//	  uint16_t nova_capacidade = BQ27427_SetDesignCapacity(&sensor, 150);
//	  (void) nova_capacidade;
	  uint8_t old_lsb_CTTC;
	  uint8_t old_msb_CTTC;
	  gauge_read(0x55, &old_lsb_CTTC, 1);
100425d8:	1dfb      	adds	r3, r7, #7
100425da:	2201      	movs	r2, #1
100425dc:	0019      	movs	r1, r3
100425de:	2055      	movs	r0, #85	@ 0x55
100425e0:	f7ff ffc0 	bl	10042564 <gauge_read>
	  gauge_read(0x56, &old_msb_CTTC, 1);
100425e4:	1dbb      	adds	r3, r7, #6
100425e6:	2201      	movs	r2, #1
100425e8:	0019      	movs	r1, r3
100425ea:	2056      	movs	r0, #86	@ 0x56
100425ec:	f7ff ffba 	bl	10042564 <gauge_read>
	  uint16_t capacidade_da_bateria = BQ27427_GetDesignCapacity(&bq_sensor);
100425f0:	231e      	movs	r3, #30
100425f2:	18fc      	adds	r4, r7, r3
100425f4:	4b24      	ldr	r3, [pc, #144]	@ (10042688 <main+0xdc>)
100425f6:	0018      	movs	r0, r3
100425f8:	f7ff ff3c 	bl	10042474 <BQ27427_GetDesignCapacity>
100425fc:	0003      	movs	r3, r0
100425fe:	8023      	strh	r3, [r4, #0]
	  (void)capacidade_da_bateria;
	  uint16_t nivel_da_bateria = BQ27427_ReadStateOfCharge(&bq_sensor);
10042600:	231c      	movs	r3, #28
10042602:	18fc      	adds	r4, r7, r3
10042604:	4b20      	ldr	r3, [pc, #128]	@ (10042688 <main+0xdc>)
10042606:	0018      	movs	r0, r3
10042608:	f7ff f80e 	bl	10041628 <BQ27427_ReadStateOfCharge>
1004260c:	0003      	movs	r3, r0
1004260e:	8023      	strh	r3, [r4, #0]
	  (void)nivel_da_bateria;
	  uint16_t voltage = BQ27427_ReadVoltage(&bq_sensor);
10042610:	231a      	movs	r3, #26
10042612:	18fc      	adds	r4, r7, r3
10042614:	4b1c      	ldr	r3, [pc, #112]	@ (10042688 <main+0xdc>)
10042616:	0018      	movs	r0, r3
10042618:	f7fe ff88 	bl	1004152c <BQ27427_ReadVoltage>
1004261c:	0003      	movs	r3, r0
1004261e:	8023      	strh	r3, [r4, #0]
	  (void)voltage;
	  uint16_t current = BQ27427_ReadAverageCurrent(&bq_sensor);
10042620:	2318      	movs	r3, #24
10042622:	18fc      	adds	r4, r7, r3
10042624:	4b18      	ldr	r3, [pc, #96]	@ (10042688 <main+0xdc>)
10042626:	0018      	movs	r0, r3
10042628:	f7fe ffec 	bl	10041604 <BQ27427_ReadAverageCurrent>
1004262c:	0003      	movs	r3, r0
1004262e:	8023      	strh	r3, [r4, #0]
	  (void)current;
      uint16_t NominalAvailableCapacity = BQ27427_ReadNominalAvailableCapacity(&bq_sensor);
10042630:	2316      	movs	r3, #22
10042632:	18fc      	adds	r4, r7, r3
10042634:	4b14      	ldr	r3, [pc, #80]	@ (10042688 <main+0xdc>)
10042636:	0018      	movs	r0, r3
10042638:	f7fe ff9c 	bl	10041574 <BQ27427_ReadNominalAvailableCapacity>
1004263c:	0003      	movs	r3, r0
1004263e:	8023      	strh	r3, [r4, #0]
      (void)NominalAvailableCapacity;
      uint16_t FullAvailableCapacity = BQ27427_ReadFullAvailableCapacity(&bq_sensor);
10042640:	2314      	movs	r3, #20
10042642:	18fc      	adds	r4, r7, r3
10042644:	4b10      	ldr	r3, [pc, #64]	@ (10042688 <main+0xdc>)
10042646:	0018      	movs	r0, r3
10042648:	f7fe ffa6 	bl	10041598 <BQ27427_ReadFullAvailableCapacity>
1004264c:	0003      	movs	r3, r0
1004264e:	8023      	strh	r3, [r4, #0]
      (void)FullAvailableCapacity;
//      uint8_t bat_ins[] = {0x0C,0x00};
//      gauge_write(0x00, bat_ins, 2);
//      HAL_Delay(10);
      uint16_t RemainingCapacity = BQ27427_ReadRemainingCapacity(&bq_sensor);
10042650:	2312      	movs	r3, #18
10042652:	18fc      	adds	r4, r7, r3
10042654:	4b0c      	ldr	r3, [pc, #48]	@ (10042688 <main+0xdc>)
10042656:	0018      	movs	r0, r3
10042658:	f7fe ffb0 	bl	100415bc <BQ27427_ReadRemainingCapacity>
1004265c:	0003      	movs	r3, r0
1004265e:	8023      	strh	r3, [r4, #0]
      (void)RemainingCapacity;
      uint16_t FullChargeCapacity = BQ27427_ReadFullChargeCapacity(&bq_sensor);
10042660:	2310      	movs	r3, #16
10042662:	18fc      	adds	r4, r7, r3
10042664:	4b08      	ldr	r3, [pc, #32]	@ (10042688 <main+0xdc>)
10042666:	0018      	movs	r0, r3
10042668:	f7fe ffba 	bl	100415e0 <BQ27427_ReadFullChargeCapacity>
1004266c:	0003      	movs	r3, r0
1004266e:	8023      	strh	r3, [r4, #0]
      (void)FullChargeCapacity;
      uint16_t RemainingCapacityUnfiltered = BQ27427_ReadRemainingCapacityUnfiltered(&bq_sensor);
10042670:	230e      	movs	r3, #14
10042672:	18fc      	adds	r4, r7, r3
10042674:	4b04      	ldr	r3, [pc, #16]	@ (10042688 <main+0xdc>)
10042676:	0018      	movs	r0, r3
10042678:	f7fe ffe8 	bl	1004164c <BQ27427_ReadRemainingCapacityUnfiltered>
1004267c:	0003      	movs	r3, r0
1004267e:	8023      	strh	r3, [r4, #0]
  {
10042680:	46c0      	nop			@ (mov r8, r8)
10042682:	e7a9      	b.n	100425d8 <main+0x2c>
10042684:	200000c4 	.word	0x200000c4
10042688:	200000c0 	.word	0x200000c0

1004268c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1004268c:	b580      	push	{r7, lr}
1004268e:	b082      	sub	sp, #8
10042690:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10042692:	003b      	movs	r3, r7
10042694:	0018      	movs	r0, r3
10042696:	2308      	movs	r3, #8
10042698:	001a      	movs	r2, r3
1004269a:	2100      	movs	r1, #0
1004269c:	f001 fee1 	bl	10044462 <memset>

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
100426a0:	003b      	movs	r3, r7
100426a2:	2202      	movs	r2, #2
100426a4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100426a6:	003b      	movs	r3, r7
100426a8:	2200      	movs	r2, #0
100426aa:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
100426ac:	003b      	movs	r3, r7
100426ae:	2110      	movs	r1, #16
100426b0:	0018      	movs	r0, r3
100426b2:	f001 fd79 	bl	100441a8 <HAL_RCC_ClockConfig>
100426b6:	1e03      	subs	r3, r0, #0
100426b8:	d001      	beq.n	100426be <SystemClock_Config+0x32>
  {
    Error_Handler();
100426ba:	f000 f86c 	bl	10042796 <Error_Handler>
  }
}
100426be:	46c0      	nop			@ (mov r8, r8)
100426c0:	46bd      	mov	sp, r7
100426c2:	b002      	add	sp, #8
100426c4:	bd80      	pop	{r7, pc}

100426c6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
100426c6:	b580      	push	{r7, lr}
100426c8:	b086      	sub	sp, #24
100426ca:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100426cc:	003b      	movs	r3, r7
100426ce:	0018      	movs	r0, r3
100426d0:	2318      	movs	r3, #24
100426d2:	001a      	movs	r2, r3
100426d4:	2100      	movs	r1, #0
100426d6:	f001 fec4 	bl	10044462 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100426da:	003b      	movs	r3, r7
100426dc:	2202      	movs	r2, #2
100426de:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100426e0:	003b      	movs	r3, r7
100426e2:	2280      	movs	r2, #128	@ 0x80
100426e4:	0152      	lsls	r2, r2, #5
100426e6:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100426e8:	003b      	movs	r3, r7
100426ea:	0018      	movs	r0, r3
100426ec:	f001 fe7e 	bl	100443ec <HAL_RCCEx_PeriphCLKConfig>
100426f0:	1e03      	subs	r3, r0, #0
100426f2:	d001      	beq.n	100426f8 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
100426f4:	f000 f84f 	bl	10042796 <Error_Handler>
  }
}
100426f8:	46c0      	nop			@ (mov r8, r8)
100426fa:	46bd      	mov	sp, r7
100426fc:	b006      	add	sp, #24
100426fe:	bd80      	pop	{r7, pc}

10042700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
10042700:	b580      	push	{r7, lr}
10042702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
10042704:	4b1c      	ldr	r3, [pc, #112]	@ (10042778 <MX_I2C1_Init+0x78>)
10042706:	2282      	movs	r2, #130	@ 0x82
10042708:	05d2      	lsls	r2, r2, #23
1004270a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
1004270c:	4b1a      	ldr	r3, [pc, #104]	@ (10042778 <MX_I2C1_Init+0x78>)
1004270e:	4a1b      	ldr	r2, [pc, #108]	@ (1004277c <MX_I2C1_Init+0x7c>)
10042710:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
10042712:	4b19      	ldr	r3, [pc, #100]	@ (10042778 <MX_I2C1_Init+0x78>)
10042714:	2200      	movs	r2, #0
10042716:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
10042718:	4b17      	ldr	r3, [pc, #92]	@ (10042778 <MX_I2C1_Init+0x78>)
1004271a:	2201      	movs	r2, #1
1004271c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
1004271e:	4b16      	ldr	r3, [pc, #88]	@ (10042778 <MX_I2C1_Init+0x78>)
10042720:	2200      	movs	r2, #0
10042722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
10042724:	4b14      	ldr	r3, [pc, #80]	@ (10042778 <MX_I2C1_Init+0x78>)
10042726:	2200      	movs	r2, #0
10042728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
1004272a:	4b13      	ldr	r3, [pc, #76]	@ (10042778 <MX_I2C1_Init+0x78>)
1004272c:	2200      	movs	r2, #0
1004272e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10042730:	4b11      	ldr	r3, [pc, #68]	@ (10042778 <MX_I2C1_Init+0x78>)
10042732:	2200      	movs	r2, #0
10042734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
10042736:	4b10      	ldr	r3, [pc, #64]	@ (10042778 <MX_I2C1_Init+0x78>)
10042738:	2200      	movs	r2, #0
1004273a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
1004273c:	4b0e      	ldr	r3, [pc, #56]	@ (10042778 <MX_I2C1_Init+0x78>)
1004273e:	0018      	movs	r0, r3
10042740:	f000 fdee 	bl	10043320 <HAL_I2C_Init>
10042744:	1e03      	subs	r3, r0, #0
10042746:	d001      	beq.n	1004274c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
10042748:	f000 f825 	bl	10042796 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
1004274c:	4b0a      	ldr	r3, [pc, #40]	@ (10042778 <MX_I2C1_Init+0x78>)
1004274e:	2100      	movs	r1, #0
10042750:	0018      	movs	r0, r3
10042752:	f001 fbe9 	bl	10043f28 <HAL_I2CEx_ConfigAnalogFilter>
10042756:	1e03      	subs	r3, r0, #0
10042758:	d001      	beq.n	1004275e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
1004275a:	f000 f81c 	bl	10042796 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
1004275e:	4b06      	ldr	r3, [pc, #24]	@ (10042778 <MX_I2C1_Init+0x78>)
10042760:	2100      	movs	r1, #0
10042762:	0018      	movs	r0, r3
10042764:	f001 fc2c 	bl	10043fc0 <HAL_I2CEx_ConfigDigitalFilter>
10042768:	1e03      	subs	r3, r0, #0
1004276a:	d001      	beq.n	10042770 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
1004276c:	f000 f813 	bl	10042796 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
10042770:	46c0      	nop			@ (mov r8, r8)
10042772:	46bd      	mov	sp, r7
10042774:	bd80      	pop	{r7, pc}
10042776:	46c0      	nop			@ (mov r8, r8)
10042778:	200000c4 	.word	0x200000c4
1004277c:	00303d5b 	.word	0x00303d5b

10042780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10042780:	b580      	push	{r7, lr}
10042782:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
10042784:	2004      	movs	r0, #4
10042786:	f7ff fed7 	bl	10042538 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
1004278a:	2008      	movs	r0, #8
1004278c:	f7ff fed4 	bl	10042538 <LL_AHB1_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10042790:	46c0      	nop			@ (mov r8, r8)
10042792:	46bd      	mov	sp, r7
10042794:	bd80      	pop	{r7, pc}

10042796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10042796:	b580      	push	{r7, lr}
10042798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1004279a:	b672      	cpsid	i
}
1004279c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
1004279e:	46c0      	nop			@ (mov r8, r8)
100427a0:	e7fd      	b.n	1004279e <Error_Handler+0x8>
	...

100427a4 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
100427a4:	b580      	push	{r7, lr}
100427a6:	b082      	sub	sp, #8
100427a8:	af00      	add	r7, sp, #0
100427aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
100427ac:	4b08      	ldr	r3, [pc, #32]	@ (100427d0 <LL_PWR_SetNoPullA+0x2c>)
100427ae:	6a1a      	ldr	r2, [r3, #32]
100427b0:	687b      	ldr	r3, [r7, #4]
100427b2:	43d9      	mvns	r1, r3
100427b4:	4b06      	ldr	r3, [pc, #24]	@ (100427d0 <LL_PWR_SetNoPullA+0x2c>)
100427b6:	400a      	ands	r2, r1
100427b8:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
100427ba:	4b05      	ldr	r3, [pc, #20]	@ (100427d0 <LL_PWR_SetNoPullA+0x2c>)
100427bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100427be:	687b      	ldr	r3, [r7, #4]
100427c0:	43d9      	mvns	r1, r3
100427c2:	4b03      	ldr	r3, [pc, #12]	@ (100427d0 <LL_PWR_SetNoPullA+0x2c>)
100427c4:	400a      	ands	r2, r1
100427c6:	625a      	str	r2, [r3, #36]	@ 0x24
}
100427c8:	46c0      	nop			@ (mov r8, r8)
100427ca:	46bd      	mov	sp, r7
100427cc:	b002      	add	sp, #8
100427ce:	bd80      	pop	{r7, pc}
100427d0:	48500000 	.word	0x48500000

100427d4 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
100427d4:	b580      	push	{r7, lr}
100427d6:	b082      	sub	sp, #8
100427d8:	af00      	add	r7, sp, #0
100427da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
100427dc:	4b08      	ldr	r3, [pc, #32]	@ (10042800 <LL_PWR_SetNoPullB+0x2c>)
100427de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100427e0:	687b      	ldr	r3, [r7, #4]
100427e2:	43d9      	mvns	r1, r3
100427e4:	4b06      	ldr	r3, [pc, #24]	@ (10042800 <LL_PWR_SetNoPullB+0x2c>)
100427e6:	400a      	ands	r2, r1
100427e8:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
100427ea:	4b05      	ldr	r3, [pc, #20]	@ (10042800 <LL_PWR_SetNoPullB+0x2c>)
100427ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100427ee:	687b      	ldr	r3, [r7, #4]
100427f0:	43d9      	mvns	r1, r3
100427f2:	4b03      	ldr	r3, [pc, #12]	@ (10042800 <LL_PWR_SetNoPullB+0x2c>)
100427f4:	400a      	ands	r2, r1
100427f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100427f8:	46c0      	nop			@ (mov r8, r8)
100427fa:	46bd      	mov	sp, r7
100427fc:	b002      	add	sp, #8
100427fe:	bd80      	pop	{r7, pc}
10042800:	48500000 	.word	0x48500000

10042804 <LL_AHB1_GRP1_EnableClock>:
{
10042804:	b580      	push	{r7, lr}
10042806:	b084      	sub	sp, #16
10042808:	af00      	add	r7, sp, #0
1004280a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004280c:	4b07      	ldr	r3, [pc, #28]	@ (1004282c <LL_AHB1_GRP1_EnableClock+0x28>)
1004280e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042810:	4b06      	ldr	r3, [pc, #24]	@ (1004282c <LL_AHB1_GRP1_EnableClock+0x28>)
10042812:	687a      	ldr	r2, [r7, #4]
10042814:	430a      	orrs	r2, r1
10042816:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042818:	4b04      	ldr	r3, [pc, #16]	@ (1004282c <LL_AHB1_GRP1_EnableClock+0x28>)
1004281a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004281c:	687a      	ldr	r2, [r7, #4]
1004281e:	4013      	ands	r3, r2
10042820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042822:	68fb      	ldr	r3, [r7, #12]
}
10042824:	46c0      	nop			@ (mov r8, r8)
10042826:	46bd      	mov	sp, r7
10042828:	b004      	add	sp, #16
1004282a:	bd80      	pop	{r7, pc}
1004282c:	48400000 	.word	0x48400000

10042830 <LL_APB0_GRP1_EnableClock>:
  * @retval None
  * @note   LL_APB0_GRP1_PERIPH_TIM1 is valid only for STM32WB06 and STM32WB07
  * @note   LL_APB0_GRP1_PERIPH_TIM2, LL_APB0_GRP1_PERIPH_TIM16 and LL_APB0_GRP1_PERIPH_TIM17 are valid for STM32WB05 and STM32WB09
  */
__STATIC_INLINE void LL_APB0_GRP1_EnableClock(uint32_t Periphs)
{
10042830:	b580      	push	{r7, lr}
10042832:	b084      	sub	sp, #16
10042834:	af00      	add	r7, sp, #0
10042836:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB0ENR, Periphs);
10042838:	4b07      	ldr	r3, [pc, #28]	@ (10042858 <LL_APB0_GRP1_EnableClock+0x28>)
1004283a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004283c:	4b06      	ldr	r3, [pc, #24]	@ (10042858 <LL_APB0_GRP1_EnableClock+0x28>)
1004283e:	687a      	ldr	r2, [r7, #4]
10042840:	430a      	orrs	r2, r1
10042842:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10042844:	4b04      	ldr	r3, [pc, #16]	@ (10042858 <LL_APB0_GRP1_EnableClock+0x28>)
10042846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10042848:	687a      	ldr	r2, [r7, #4]
1004284a:	4013      	ands	r3, r2
1004284c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004284e:	68fb      	ldr	r3, [r7, #12]
}
10042850:	46c0      	nop			@ (mov r8, r8)
10042852:	46bd      	mov	sp, r7
10042854:	b004      	add	sp, #16
10042856:	bd80      	pop	{r7, pc}
10042858:	48400000 	.word	0x48400000

1004285c <LL_APB1_GRP1_EnableClock>:
  * @arg LL_APB1_GRP1_PERIPH_I2C2
  * @retval None
  * @note   LL_APB1_GRP1_PERIPH_SPI1, LL_APB1_GRP1_PERIPH_SPI2 and LL_APB1_GRP1_PERIPH_I2C2 are valid for STM32WB06 and STM32WB07
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
1004285c:	b580      	push	{r7, lr}
1004285e:	b084      	sub	sp, #16
10042860:	af00      	add	r7, sp, #0
10042862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
10042864:	4b07      	ldr	r3, [pc, #28]	@ (10042884 <LL_APB1_GRP1_EnableClock+0x28>)
10042866:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10042868:	4b06      	ldr	r3, [pc, #24]	@ (10042884 <LL_APB1_GRP1_EnableClock+0x28>)
1004286a:	687a      	ldr	r2, [r7, #4]
1004286c:	430a      	orrs	r2, r1
1004286e:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10042870:	4b04      	ldr	r3, [pc, #16]	@ (10042884 <LL_APB1_GRP1_EnableClock+0x28>)
10042872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042874:	687a      	ldr	r2, [r7, #4]
10042876:	4013      	ands	r3, r2
10042878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004287a:	68fb      	ldr	r3, [r7, #12]
}
1004287c:	46c0      	nop			@ (mov r8, r8)
1004287e:	46bd      	mov	sp, r7
10042880:	b004      	add	sp, #16
10042882:	bd80      	pop	{r7, pc}
10042884:	48400000 	.word	0x48400000

10042888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10042888:	b580      	push	{r7, lr}
1004288a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
1004288c:	2380      	movs	r3, #128	@ 0x80
1004288e:	005b      	lsls	r3, r3, #1
10042890:	0018      	movs	r0, r3
10042892:	f7ff ffcd 	bl	10042830 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10042896:	46c0      	nop			@ (mov r8, r8)
10042898:	46bd      	mov	sp, r7
1004289a:	bd80      	pop	{r7, pc}

1004289c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
1004289c:	b590      	push	{r4, r7, lr}
1004289e:	b089      	sub	sp, #36	@ 0x24
100428a0:	af00      	add	r7, sp, #0
100428a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100428a4:	240c      	movs	r4, #12
100428a6:	193b      	adds	r3, r7, r4
100428a8:	0018      	movs	r0, r3
100428aa:	2314      	movs	r3, #20
100428ac:	001a      	movs	r2, r3
100428ae:	2100      	movs	r1, #0
100428b0:	f001 fdd7 	bl	10044462 <memset>
  if(hi2c->Instance==I2C1)
100428b4:	687b      	ldr	r3, [r7, #4]
100428b6:	681a      	ldr	r2, [r3, #0]
100428b8:	2382      	movs	r3, #130	@ 0x82
100428ba:	05db      	lsls	r3, r3, #23
100428bc:	429a      	cmp	r2, r3
100428be:	d13c      	bne.n	1004293a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
100428c0:	2004      	movs	r0, #4
100428c2:	f7ff ff9f 	bl	10042804 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
100428c6:	2008      	movs	r0, #8
100428c8:	f7ff ff9c 	bl	10042804 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA0     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
100428cc:	193b      	adds	r3, r7, r4
100428ce:	2201      	movs	r2, #1
100428d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100428d2:	193b      	adds	r3, r7, r4
100428d4:	2212      	movs	r2, #18
100428d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100428d8:	193b      	adds	r3, r7, r4
100428da:	2200      	movs	r2, #0
100428dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100428de:	193b      	adds	r3, r7, r4
100428e0:	2200      	movs	r2, #0
100428e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100428e4:	193b      	adds	r3, r7, r4
100428e6:	2200      	movs	r2, #0
100428e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100428ea:	193a      	adds	r2, r7, r4
100428ec:	2390      	movs	r3, #144	@ 0x90
100428ee:	05db      	lsls	r3, r3, #23
100428f0:	0011      	movs	r1, r2
100428f2:	0018      	movs	r0, r3
100428f4:	f000 fb6e 	bl	10042fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
100428f8:	0021      	movs	r1, r4
100428fa:	187b      	adds	r3, r7, r1
100428fc:	2280      	movs	r2, #128	@ 0x80
100428fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10042900:	187b      	adds	r3, r7, r1
10042902:	2212      	movs	r2, #18
10042904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10042906:	187b      	adds	r3, r7, r1
10042908:	2200      	movs	r2, #0
1004290a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004290c:	187b      	adds	r3, r7, r1
1004290e:	2200      	movs	r2, #0
10042910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10042912:	187b      	adds	r3, r7, r1
10042914:	2200      	movs	r2, #0
10042916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042918:	187b      	adds	r3, r7, r1
1004291a:	4a0a      	ldr	r2, [pc, #40]	@ (10042944 <HAL_I2C_MspInit+0xa8>)
1004291c:	0019      	movs	r1, r3
1004291e:	0010      	movs	r0, r2
10042920:	f000 fb58 	bl	10042fd4 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_0);
10042924:	2001      	movs	r0, #1
10042926:	f7ff ff3d 	bl	100427a4 <LL_PWR_SetNoPullA>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_7);
1004292a:	2080      	movs	r0, #128	@ 0x80
1004292c:	f7ff ff52 	bl	100427d4 <LL_PWR_SetNoPullB>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
10042930:	2380      	movs	r3, #128	@ 0x80
10042932:	039b      	lsls	r3, r3, #14
10042934:	0018      	movs	r0, r3
10042936:	f7ff ff91 	bl	1004285c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
1004293a:	46c0      	nop			@ (mov r8, r8)
1004293c:	46bd      	mov	sp, r7
1004293e:	b009      	add	sp, #36	@ 0x24
10042940:	bd90      	pop	{r4, r7, pc}
10042942:	46c0      	nop			@ (mov r8, r8)
10042944:	48100000 	.word	0x48100000

10042948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10042948:	b580      	push	{r7, lr}
1004294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1004294c:	46c0      	nop			@ (mov r8, r8)
1004294e:	e7fd      	b.n	1004294c <NMI_Handler+0x4>

10042950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10042950:	b580      	push	{r7, lr}
10042952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10042954:	46c0      	nop			@ (mov r8, r8)
10042956:	e7fd      	b.n	10042954 <HardFault_Handler+0x4>

10042958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10042958:	b580      	push	{r7, lr}
1004295a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1004295c:	46c0      	nop			@ (mov r8, r8)
1004295e:	46bd      	mov	sp, r7
10042960:	bd80      	pop	{r7, pc}

10042962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10042962:	b580      	push	{r7, lr}
10042964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10042966:	46c0      	nop			@ (mov r8, r8)
10042968:	46bd      	mov	sp, r7
1004296a:	bd80      	pop	{r7, pc}

1004296c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1004296c:	b580      	push	{r7, lr}
1004296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10042970:	f000 fa32 	bl	10042dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10042974:	46c0      	nop			@ (mov r8, r8)
10042976:	46bd      	mov	sp, r7
10042978:	bd80      	pop	{r7, pc}
	...

1004297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1004297c:	b590      	push	{r4, r7, lr}
1004297e:	b083      	sub	sp, #12
10042980:	af00      	add	r7, sp, #0
10042982:	0002      	movs	r2, r0
10042984:	6039      	str	r1, [r7, #0]
10042986:	1dfb      	adds	r3, r7, #7
10042988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004298a:	1dfb      	adds	r3, r7, #7
1004298c:	781b      	ldrb	r3, [r3, #0]
1004298e:	2b7f      	cmp	r3, #127	@ 0x7f
10042990:	d828      	bhi.n	100429e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042992:	4a2f      	ldr	r2, [pc, #188]	@ (10042a50 <__NVIC_SetPriority+0xd4>)
10042994:	1dfb      	adds	r3, r7, #7
10042996:	781b      	ldrb	r3, [r3, #0]
10042998:	b25b      	sxtb	r3, r3
1004299a:	089b      	lsrs	r3, r3, #2
1004299c:	33c0      	adds	r3, #192	@ 0xc0
1004299e:	009b      	lsls	r3, r3, #2
100429a0:	589b      	ldr	r3, [r3, r2]
100429a2:	1dfa      	adds	r2, r7, #7
100429a4:	7812      	ldrb	r2, [r2, #0]
100429a6:	0011      	movs	r1, r2
100429a8:	2203      	movs	r2, #3
100429aa:	400a      	ands	r2, r1
100429ac:	00d2      	lsls	r2, r2, #3
100429ae:	21ff      	movs	r1, #255	@ 0xff
100429b0:	4091      	lsls	r1, r2
100429b2:	000a      	movs	r2, r1
100429b4:	43d2      	mvns	r2, r2
100429b6:	401a      	ands	r2, r3
100429b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100429ba:	683b      	ldr	r3, [r7, #0]
100429bc:	019b      	lsls	r3, r3, #6
100429be:	22ff      	movs	r2, #255	@ 0xff
100429c0:	401a      	ands	r2, r3
100429c2:	1dfb      	adds	r3, r7, #7
100429c4:	781b      	ldrb	r3, [r3, #0]
100429c6:	0018      	movs	r0, r3
100429c8:	2303      	movs	r3, #3
100429ca:	4003      	ands	r3, r0
100429cc:	00db      	lsls	r3, r3, #3
100429ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100429d0:	481f      	ldr	r0, [pc, #124]	@ (10042a50 <__NVIC_SetPriority+0xd4>)
100429d2:	1dfb      	adds	r3, r7, #7
100429d4:	781b      	ldrb	r3, [r3, #0]
100429d6:	b25b      	sxtb	r3, r3
100429d8:	089b      	lsrs	r3, r3, #2
100429da:	430a      	orrs	r2, r1
100429dc:	33c0      	adds	r3, #192	@ 0xc0
100429de:	009b      	lsls	r3, r3, #2
100429e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100429e2:	e031      	b.n	10042a48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100429e4:	4a1b      	ldr	r2, [pc, #108]	@ (10042a54 <__NVIC_SetPriority+0xd8>)
100429e6:	1dfb      	adds	r3, r7, #7
100429e8:	781b      	ldrb	r3, [r3, #0]
100429ea:	0019      	movs	r1, r3
100429ec:	230f      	movs	r3, #15
100429ee:	400b      	ands	r3, r1
100429f0:	3b08      	subs	r3, #8
100429f2:	089b      	lsrs	r3, r3, #2
100429f4:	3306      	adds	r3, #6
100429f6:	009b      	lsls	r3, r3, #2
100429f8:	18d3      	adds	r3, r2, r3
100429fa:	3304      	adds	r3, #4
100429fc:	681b      	ldr	r3, [r3, #0]
100429fe:	1dfa      	adds	r2, r7, #7
10042a00:	7812      	ldrb	r2, [r2, #0]
10042a02:	0011      	movs	r1, r2
10042a04:	2203      	movs	r2, #3
10042a06:	400a      	ands	r2, r1
10042a08:	00d2      	lsls	r2, r2, #3
10042a0a:	21ff      	movs	r1, #255	@ 0xff
10042a0c:	4091      	lsls	r1, r2
10042a0e:	000a      	movs	r2, r1
10042a10:	43d2      	mvns	r2, r2
10042a12:	401a      	ands	r2, r3
10042a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10042a16:	683b      	ldr	r3, [r7, #0]
10042a18:	019b      	lsls	r3, r3, #6
10042a1a:	22ff      	movs	r2, #255	@ 0xff
10042a1c:	401a      	ands	r2, r3
10042a1e:	1dfb      	adds	r3, r7, #7
10042a20:	781b      	ldrb	r3, [r3, #0]
10042a22:	0018      	movs	r0, r3
10042a24:	2303      	movs	r3, #3
10042a26:	4003      	ands	r3, r0
10042a28:	00db      	lsls	r3, r3, #3
10042a2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042a2c:	4809      	ldr	r0, [pc, #36]	@ (10042a54 <__NVIC_SetPriority+0xd8>)
10042a2e:	1dfb      	adds	r3, r7, #7
10042a30:	781b      	ldrb	r3, [r3, #0]
10042a32:	001c      	movs	r4, r3
10042a34:	230f      	movs	r3, #15
10042a36:	4023      	ands	r3, r4
10042a38:	3b08      	subs	r3, #8
10042a3a:	089b      	lsrs	r3, r3, #2
10042a3c:	430a      	orrs	r2, r1
10042a3e:	3306      	adds	r3, #6
10042a40:	009b      	lsls	r3, r3, #2
10042a42:	18c3      	adds	r3, r0, r3
10042a44:	3304      	adds	r3, #4
10042a46:	601a      	str	r2, [r3, #0]
}
10042a48:	46c0      	nop			@ (mov r8, r8)
10042a4a:	46bd      	mov	sp, r7
10042a4c:	b003      	add	sp, #12
10042a4e:	bd90      	pop	{r4, r7, pc}
10042a50:	e000e100 	.word	0xe000e100
10042a54:	e000ed00 	.word	0xe000ed00

10042a58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10042a58:	b580      	push	{r7, lr}
10042a5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10042a5c:	f3bf 8f4f 	dsb	sy
}
10042a60:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10042a62:	4b04      	ldr	r3, [pc, #16]	@ (10042a74 <__NVIC_SystemReset+0x1c>)
10042a64:	4a04      	ldr	r2, [pc, #16]	@ (10042a78 <__NVIC_SystemReset+0x20>)
10042a66:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10042a68:	f3bf 8f4f 	dsb	sy
}
10042a6c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10042a6e:	46c0      	nop			@ (mov r8, r8)
10042a70:	e7fd      	b.n	10042a6e <__NVIC_SystemReset+0x16>
10042a72:	46c0      	nop			@ (mov r8, r8)
10042a74:	e000ed00 	.word	0xe000ed00
10042a78:	05fa0004 	.word	0x05fa0004

10042a7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10042a7c:	b590      	push	{r4, r7, lr}
10042a7e:	b087      	sub	sp, #28
10042a80:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10042a82:	4a64      	ldr	r2, [pc, #400]	@ (10042c14 <SystemInit+0x198>)
10042a84:	2394      	movs	r3, #148	@ 0x94
10042a86:	58d3      	ldr	r3, [r2, r3]
10042a88:	2b00      	cmp	r3, #0
10042a8a:	d10e      	bne.n	10042aaa <SystemInit+0x2e>
10042a8c:	4b62      	ldr	r3, [pc, #392]	@ (10042c18 <SystemInit+0x19c>)
10042a8e:	691b      	ldr	r3, [r3, #16]
10042a90:	2b00      	cmp	r3, #0
10042a92:	d103      	bne.n	10042a9c <SystemInit+0x20>
10042a94:	4b60      	ldr	r3, [pc, #384]	@ (10042c18 <SystemInit+0x19c>)
10042a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10042a98:	2b00      	cmp	r3, #0
10042a9a:	d006      	beq.n	10042aaa <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10042a9c:	4b5f      	ldr	r3, [pc, #380]	@ (10042c1c <SystemInit+0x1a0>)
10042a9e:	2201      	movs	r2, #1
10042aa0:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10042aa2:	f000 f901 	bl	10042ca8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10042aa6:	f7ff ffd7 	bl	10042a58 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10042aaa:	4b5d      	ldr	r3, [pc, #372]	@ (10042c20 <SystemInit+0x1a4>)
10042aac:	4a5d      	ldr	r2, [pc, #372]	@ (10042c24 <SystemInit+0x1a8>)
10042aae:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10042ab0:	4b5b      	ldr	r3, [pc, #364]	@ (10042c20 <SystemInit+0x1a4>)
10042ab2:	689a      	ldr	r2, [r3, #8]
10042ab4:	4b59      	ldr	r3, [pc, #356]	@ (10042c1c <SystemInit+0x1a0>)
10042ab6:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10042ab8:	4b57      	ldr	r3, [pc, #348]	@ (10042c18 <SystemInit+0x19c>)
10042aba:	685a      	ldr	r2, [r3, #4]
10042abc:	4b56      	ldr	r3, [pc, #344]	@ (10042c18 <SystemInit+0x19c>)
10042abe:	2120      	movs	r1, #32
10042ac0:	430a      	orrs	r2, r1
10042ac2:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
10042ac4:	4b54      	ldr	r3, [pc, #336]	@ (10042c18 <SystemInit+0x19c>)
10042ac6:	685a      	ldr	r2, [r3, #4]
10042ac8:	4b53      	ldr	r3, [pc, #332]	@ (10042c18 <SystemInit+0x19c>)
10042aca:	2140      	movs	r1, #64	@ 0x40
10042acc:	430a      	orrs	r2, r1
10042ace:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10042ad0:	4b51      	ldr	r3, [pc, #324]	@ (10042c18 <SystemInit+0x19c>)
10042ad2:	685a      	ldr	r2, [r3, #4]
10042ad4:	4b50      	ldr	r3, [pc, #320]	@ (10042c18 <SystemInit+0x19c>)
10042ad6:	2180      	movs	r1, #128	@ 0x80
10042ad8:	430a      	orrs	r2, r1
10042ada:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10042adc:	4b4e      	ldr	r3, [pc, #312]	@ (10042c18 <SystemInit+0x19c>)
10042ade:	685a      	ldr	r2, [r3, #4]
10042ae0:	4b4d      	ldr	r3, [pc, #308]	@ (10042c18 <SystemInit+0x19c>)
10042ae2:	4951      	ldr	r1, [pc, #324]	@ (10042c28 <SystemInit+0x1ac>)
10042ae4:	400a      	ands	r2, r1
10042ae6:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10042ae8:	46c0      	nop			@ (mov r8, r8)
10042aea:	4b4b      	ldr	r3, [pc, #300]	@ (10042c18 <SystemInit+0x19c>)
10042aec:	695b      	ldr	r3, [r3, #20]
10042aee:	2204      	movs	r2, #4
10042af0:	4013      	ands	r3, r2
10042af2:	2b04      	cmp	r3, #4
10042af4:	d1f9      	bne.n	10042aea <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10042af6:	4b48      	ldr	r3, [pc, #288]	@ (10042c18 <SystemInit+0x19c>)
10042af8:	69db      	ldr	r3, [r3, #28]
10042afa:	2230      	movs	r2, #48	@ 0x30
10042afc:	4393      	bics	r3, r2
10042afe:	001a      	movs	r2, r3
10042b00:	4b45      	ldr	r3, [pc, #276]	@ (10042c18 <SystemInit+0x19c>)
10042b02:	2120      	movs	r1, #32
10042b04:	430a      	orrs	r2, r1
10042b06:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10042b08:	4b43      	ldr	r3, [pc, #268]	@ (10042c18 <SystemInit+0x19c>)
10042b0a:	69da      	ldr	r2, [r3, #28]
10042b0c:	4b42      	ldr	r3, [pc, #264]	@ (10042c18 <SystemInit+0x19c>)
10042b0e:	4947      	ldr	r1, [pc, #284]	@ (10042c2c <SystemInit+0x1b0>)
10042b10:	400a      	ands	r2, r1
10042b12:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10042b14:	4b40      	ldr	r3, [pc, #256]	@ (10042c18 <SystemInit+0x19c>)
10042b16:	69da      	ldr	r2, [r3, #28]
10042b18:	4b3f      	ldr	r3, [pc, #252]	@ (10042c18 <SystemInit+0x19c>)
10042b1a:	2180      	movs	r1, #128	@ 0x80
10042b1c:	0049      	lsls	r1, r1, #1
10042b1e:	430a      	orrs	r2, r1
10042b20:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10042b22:	4b43      	ldr	r3, [pc, #268]	@ (10042c30 <SystemInit+0x1b4>)
10042b24:	681b      	ldr	r3, [r3, #0]
10042b26:	4a43      	ldr	r2, [pc, #268]	@ (10042c34 <SystemInit+0x1b8>)
10042b28:	4293      	cmp	r3, r2
10042b2a:	d055      	beq.n	10042bd8 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10042b2c:	231f      	movs	r3, #31
10042b2e:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10042b30:	2308      	movs	r3, #8
10042b32:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10042b34:	230a      	movs	r3, #10
10042b36:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10042b38:	2303      	movs	r3, #3
10042b3a:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10042b3c:	4b35      	ldr	r3, [pc, #212]	@ (10042c14 <SystemInit+0x198>)
10042b3e:	68db      	ldr	r3, [r3, #12]
10042b40:	221e      	movs	r2, #30
10042b42:	4393      	bics	r3, r2
10042b44:	0019      	movs	r1, r3
10042b46:	68fb      	ldr	r3, [r7, #12]
10042b48:	005a      	lsls	r2, r3, #1
10042b4a:	4b32      	ldr	r3, [pc, #200]	@ (10042c14 <SystemInit+0x198>)
10042b4c:	430a      	orrs	r2, r1
10042b4e:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10042b50:	4b30      	ldr	r3, [pc, #192]	@ (10042c14 <SystemInit+0x198>)
10042b52:	68da      	ldr	r2, [r3, #12]
10042b54:	4b2f      	ldr	r3, [pc, #188]	@ (10042c14 <SystemInit+0x198>)
10042b56:	2101      	movs	r1, #1
10042b58:	430a      	orrs	r2, r1
10042b5a:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10042b5c:	4b2d      	ldr	r3, [pc, #180]	@ (10042c14 <SystemInit+0x198>)
10042b5e:	68db      	ldr	r3, [r3, #12]
10042b60:	4a35      	ldr	r2, [pc, #212]	@ (10042c38 <SystemInit+0x1bc>)
10042b62:	4013      	ands	r3, r2
10042b64:	0019      	movs	r1, r3
10042b66:	693b      	ldr	r3, [r7, #16]
10042b68:	061a      	lsls	r2, r3, #24
10042b6a:	4b2a      	ldr	r3, [pc, #168]	@ (10042c14 <SystemInit+0x198>)
10042b6c:	430a      	orrs	r2, r1
10042b6e:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10042b70:	4b28      	ldr	r3, [pc, #160]	@ (10042c14 <SystemInit+0x198>)
10042b72:	68da      	ldr	r2, [r3, #12]
10042b74:	4b27      	ldr	r3, [pc, #156]	@ (10042c14 <SystemInit+0x198>)
10042b76:	2180      	movs	r1, #128	@ 0x80
10042b78:	0409      	lsls	r1, r1, #16
10042b7a:	430a      	orrs	r2, r1
10042b7c:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10042b7e:	4a26      	ldr	r2, [pc, #152]	@ (10042c18 <SystemInit+0x19c>)
10042b80:	2394      	movs	r3, #148	@ 0x94
10042b82:	58d3      	ldr	r3, [r2, r3]
10042b84:	4a2d      	ldr	r2, [pc, #180]	@ (10042c3c <SystemInit+0x1c0>)
10042b86:	401a      	ands	r2, r3
10042b88:	68bb      	ldr	r3, [r7, #8]
10042b8a:	0199      	lsls	r1, r3, #6
10042b8c:	23f0      	movs	r3, #240	@ 0xf0
10042b8e:	009b      	lsls	r3, r3, #2
10042b90:	400b      	ands	r3, r1
10042b92:	4921      	ldr	r1, [pc, #132]	@ (10042c18 <SystemInit+0x19c>)
10042b94:	4313      	orrs	r3, r2
10042b96:	2294      	movs	r2, #148	@ 0x94
10042b98:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10042b9a:	4a1f      	ldr	r2, [pc, #124]	@ (10042c18 <SystemInit+0x19c>)
10042b9c:	2394      	movs	r3, #148	@ 0x94
10042b9e:	58d3      	ldr	r3, [r2, r3]
10042ba0:	491d      	ldr	r1, [pc, #116]	@ (10042c18 <SystemInit+0x19c>)
10042ba2:	2220      	movs	r2, #32
10042ba4:	4313      	orrs	r3, r2
10042ba6:	2294      	movs	r2, #148	@ 0x94
10042ba8:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10042baa:	4a1b      	ldr	r2, [pc, #108]	@ (10042c18 <SystemInit+0x19c>)
10042bac:	2394      	movs	r3, #148	@ 0x94
10042bae:	58d3      	ldr	r3, [r2, r3]
10042bb0:	4a23      	ldr	r2, [pc, #140]	@ (10042c40 <SystemInit+0x1c4>)
10042bb2:	401a      	ands	r2, r3
10042bb4:	687b      	ldr	r3, [r7, #4]
10042bb6:	02d9      	lsls	r1, r3, #11
10042bb8:	23e0      	movs	r3, #224	@ 0xe0
10042bba:	019b      	lsls	r3, r3, #6
10042bbc:	400b      	ands	r3, r1
10042bbe:	4916      	ldr	r1, [pc, #88]	@ (10042c18 <SystemInit+0x19c>)
10042bc0:	4313      	orrs	r3, r2
10042bc2:	2294      	movs	r2, #148	@ 0x94
10042bc4:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10042bc6:	4a14      	ldr	r2, [pc, #80]	@ (10042c18 <SystemInit+0x19c>)
10042bc8:	2394      	movs	r3, #148	@ 0x94
10042bca:	58d3      	ldr	r3, [r2, r3]
10042bcc:	4912      	ldr	r1, [pc, #72]	@ (10042c18 <SystemInit+0x19c>)
10042bce:	2280      	movs	r2, #128	@ 0x80
10042bd0:	00d2      	lsls	r2, r2, #3
10042bd2:	4313      	orrs	r3, r2
10042bd4:	2294      	movs	r2, #148	@ 0x94
10042bd6:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10042bd8:	2317      	movs	r3, #23
10042bda:	18fb      	adds	r3, r7, r3
10042bdc:	2200      	movs	r2, #0
10042bde:	701a      	strb	r2, [r3, #0]
10042be0:	e00d      	b.n	10042bfe <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10042be2:	2417      	movs	r4, #23
10042be4:	193b      	adds	r3, r7, r4
10042be6:	781b      	ldrb	r3, [r3, #0]
10042be8:	b25b      	sxtb	r3, r3
10042bea:	2103      	movs	r1, #3
10042bec:	0018      	movs	r0, r3
10042bee:	f7ff fec5 	bl	1004297c <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10042bf2:	0021      	movs	r1, r4
10042bf4:	187b      	adds	r3, r7, r1
10042bf6:	781a      	ldrb	r2, [r3, #0]
10042bf8:	187b      	adds	r3, r7, r1
10042bfa:	3201      	adds	r2, #1
10042bfc:	701a      	strb	r2, [r3, #0]
10042bfe:	2317      	movs	r3, #23
10042c00:	18fb      	adds	r3, r7, r3
10042c02:	781b      	ldrb	r3, [r3, #0]
10042c04:	2b1f      	cmp	r3, #31
10042c06:	d9ec      	bls.n	10042be2 <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10042c08:	b662      	cpsie	i
}
10042c0a:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10042c0c:	46c0      	nop			@ (mov r8, r8)
10042c0e:	46bd      	mov	sp, r7
10042c10:	b007      	add	sp, #28
10042c12:	bd90      	pop	{r4, r7, pc}
10042c14:	48400000 	.word	0x48400000
10042c18:	48500000 	.word	0x48500000
10042c1c:	20000004 	.word	0x20000004
10042c20:	e000ed00 	.word	0xe000ed00
10042c24:	10040000 	.word	0x10040000
10042c28:	fffffeff 	.word	0xfffffeff
10042c2c:	fffffbff 	.word	0xfffffbff
10042c30:	10001ef8 	.word	0x10001ef8
10042c34:	fcbceccc 	.word	0xfcbceccc
10042c38:	c0ffffff 	.word	0xc0ffffff
10042c3c:	fffffc3f 	.word	0xfffffc3f
10042c40:	ffffc7ff 	.word	0xffffc7ff

10042c44 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10042c44:	b580      	push	{r7, lr}
10042c46:	b082      	sub	sp, #8
10042c48:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10042c4a:	4b13      	ldr	r3, [pc, #76]	@ (10042c98 <SystemCoreClockUpdate+0x54>)
10042c4c:	689b      	ldr	r3, [r3, #8]
10042c4e:	085b      	lsrs	r3, r3, #1
10042c50:	b2da      	uxtb	r2, r3
10042c52:	1dfb      	adds	r3, r7, #7
10042c54:	2101      	movs	r1, #1
10042c56:	400a      	ands	r2, r1
10042c58:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10042c5a:	4b0f      	ldr	r3, [pc, #60]	@ (10042c98 <SystemCoreClockUpdate+0x54>)
10042c5c:	689b      	ldr	r3, [r3, #8]
10042c5e:	0a1b      	lsrs	r3, r3, #8
10042c60:	b2da      	uxtb	r2, r3
10042c62:	1dbb      	adds	r3, r7, #6
10042c64:	2107      	movs	r1, #7
10042c66:	400a      	ands	r2, r1
10042c68:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10042c6a:	1dfb      	adds	r3, r7, #7
10042c6c:	781b      	ldrb	r3, [r3, #0]
10042c6e:	2b00      	cmp	r3, #0
10042c70:	d007      	beq.n	10042c82 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10042c72:	1dbb      	adds	r3, r7, #6
10042c74:	781b      	ldrb	r3, [r3, #0]
10042c76:	3b01      	subs	r3, #1
10042c78:	4a08      	ldr	r2, [pc, #32]	@ (10042c9c <SystemCoreClockUpdate+0x58>)
10042c7a:	40da      	lsrs	r2, r3
10042c7c:	4b08      	ldr	r3, [pc, #32]	@ (10042ca0 <SystemCoreClockUpdate+0x5c>)
10042c7e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10042c80:	e005      	b.n	10042c8e <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10042c82:	1dbb      	adds	r3, r7, #6
10042c84:	781b      	ldrb	r3, [r3, #0]
10042c86:	4a07      	ldr	r2, [pc, #28]	@ (10042ca4 <SystemCoreClockUpdate+0x60>)
10042c88:	40da      	lsrs	r2, r3
10042c8a:	4b05      	ldr	r3, [pc, #20]	@ (10042ca0 <SystemCoreClockUpdate+0x5c>)
10042c8c:	601a      	str	r2, [r3, #0]
}
10042c8e:	46c0      	nop			@ (mov r8, r8)
10042c90:	46bd      	mov	sp, r7
10042c92:	b002      	add	sp, #8
10042c94:	bd80      	pop	{r7, pc}
10042c96:	46c0      	nop			@ (mov r8, r8)
10042c98:	48400000 	.word	0x48400000
10042c9c:	01e84800 	.word	0x01e84800
10042ca0:	2000011c 	.word	0x2000011c
10042ca4:	03d09000 	.word	0x03d09000

10042ca8 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10042ca8:	b580      	push	{r7, lr}
10042caa:	af00      	add	r7, sp, #0
}
10042cac:	46c0      	nop			@ (mov r8, r8)
10042cae:	46bd      	mov	sp, r7
10042cb0:	bd80      	pop	{r7, pc}
	...

10042cb4 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10042cb4:	4810      	ldr	r0, [pc, #64]	@ (10042cf8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10042cb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10042cb8:	f7ff fee0 	bl	10042a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10042cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10042cbe:	e003      	b.n	10042cc8 <LoopCopyDataInit>

10042cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10042cc0:	4b0e      	ldr	r3, [pc, #56]	@ (10042cfc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10042cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10042cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10042cc6:	3104      	adds	r1, #4

10042cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10042cc8:	480d      	ldr	r0, [pc, #52]	@ (10042d00 <LoopForever+0xa>)
  ldr  r3, =_edata
10042cca:	4b0e      	ldr	r3, [pc, #56]	@ (10042d04 <LoopForever+0xe>)
  adds  r2, r0, r1
10042ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10042cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10042cd0:	d3f6      	bcc.n	10042cc0 <CopyDataInit>
  ldr  r2, =_sbss
10042cd2:	4a0d      	ldr	r2, [pc, #52]	@ (10042d08 <LoopForever+0x12>)
  b  LoopFillZerobss
10042cd4:	e002      	b.n	10042cdc <LoopFillZerobss>

10042cd6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10042cd6:	2300      	movs	r3, #0
  str  r3, [r2]
10042cd8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10042cda:	3204      	adds	r2, #4

10042cdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10042cdc:	4b0b      	ldr	r3, [pc, #44]	@ (10042d0c <LoopForever+0x16>)
  cmp  r2, r3
10042cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
10042ce0:	d3f9      	bcc.n	10042cd6 <FillZerobss>
  ldr  r2, =_sbssblue
10042ce2:	4a0b      	ldr	r2, [pc, #44]	@ (10042d10 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10042ce4:	e002      	b.n	10042cec <LoopFillZeroBlueRam>

10042ce6 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10042ce6:	2300      	movs	r3, #0
  str  r3, [r2]
10042ce8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10042cea:	3204      	adds	r2, #4

10042cec <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10042cec:	4b09      	ldr	r3, [pc, #36]	@ (10042d14 <LoopForever+0x1e>)
  cmp  r2, r3
10042cee:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10042cf0:	d3f9      	bcc.n	10042ce6 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10042cf2:	f7ff fc5b 	bl	100425ac <main>

10042cf6 <LoopForever>:

LoopForever:
    b LoopForever
10042cf6:	e7fe      	b.n	10042cf6 <LoopForever>
   ldr   r0, =_estack
10042cf8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10042cfc:	100444bc 	.word	0x100444bc
  ldr  r0, =_sdata
10042d00:	2000011c 	.word	0x2000011c
  ldr  r3, =_edata
10042d04:	20000128 	.word	0x20000128
  ldr  r2, =_sbss
10042d08:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
10042d0c:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbssblue
10042d10:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10042d14:	200000c0 	.word	0x200000c0

10042d18 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10042d18:	e7fe      	b.n	10042d18 <ADC_IRQHandler>

10042d1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10042d1a:	b580      	push	{r7, lr}
10042d1c:	b082      	sub	sp, #8
10042d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10042d20:	1dfb      	adds	r3, r7, #7
10042d22:	2200      	movs	r2, #0
10042d24:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10042d26:	2003      	movs	r0, #3
10042d28:	f000 f80e 	bl	10042d48 <HAL_InitTick>
10042d2c:	1e03      	subs	r3, r0, #0
10042d2e:	d003      	beq.n	10042d38 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10042d30:	1dfb      	adds	r3, r7, #7
10042d32:	2201      	movs	r2, #1
10042d34:	701a      	strb	r2, [r3, #0]
10042d36:	e001      	b.n	10042d3c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10042d38:	f7ff fda6 	bl	10042888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
10042d3c:	1dfb      	adds	r3, r7, #7
10042d3e:	781b      	ldrb	r3, [r3, #0]
}
10042d40:	0018      	movs	r0, r3
10042d42:	46bd      	mov	sp, r7
10042d44:	b002      	add	sp, #8
10042d46:	bd80      	pop	{r7, pc}

10042d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10042d48:	b590      	push	{r4, r7, lr}
10042d4a:	b085      	sub	sp, #20
10042d4c:	af00      	add	r7, sp, #0
10042d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10042d50:	230f      	movs	r3, #15
10042d52:	18fb      	adds	r3, r7, r3
10042d54:	2200      	movs	r2, #0
10042d56:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10042d58:	4b1d      	ldr	r3, [pc, #116]	@ (10042dd0 <HAL_InitTick+0x88>)
10042d5a:	781b      	ldrb	r3, [r3, #0]
10042d5c:	2b00      	cmp	r3, #0
10042d5e:	d02c      	beq.n	10042dba <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10042d60:	f001 face 	bl	10044300 <HAL_RCC_GetSysClockFreq>
10042d64:	0004      	movs	r4, r0
10042d66:	4b1a      	ldr	r3, [pc, #104]	@ (10042dd0 <HAL_InitTick+0x88>)
10042d68:	781b      	ldrb	r3, [r3, #0]
10042d6a:	0019      	movs	r1, r3
10042d6c:	23fa      	movs	r3, #250	@ 0xfa
10042d6e:	0098      	lsls	r0, r3, #2
10042d70:	f7fd f9a6 	bl	100400c0 <__udivsi3>
10042d74:	0003      	movs	r3, r0
10042d76:	0019      	movs	r1, r3
10042d78:	0020      	movs	r0, r4
10042d7a:	f7fd f9a1 	bl	100400c0 <__udivsi3>
10042d7e:	0003      	movs	r3, r0
10042d80:	0018      	movs	r0, r3
10042d82:	f000 f91a 	bl	10042fba <HAL_SYSTICK_Config>
10042d86:	1e03      	subs	r3, r0, #0
10042d88:	d112      	bne.n	10042db0 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10042d8a:	687b      	ldr	r3, [r7, #4]
10042d8c:	2b03      	cmp	r3, #3
10042d8e:	d80a      	bhi.n	10042da6 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10042d90:	6879      	ldr	r1, [r7, #4]
10042d92:	2301      	movs	r3, #1
10042d94:	425b      	negs	r3, r3
10042d96:	2200      	movs	r2, #0
10042d98:	0018      	movs	r0, r3
10042d9a:	f000 f8f9 	bl	10042f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10042d9e:	4b0d      	ldr	r3, [pc, #52]	@ (10042dd4 <HAL_InitTick+0x8c>)
10042da0:	687a      	ldr	r2, [r7, #4]
10042da2:	601a      	str	r2, [r3, #0]
10042da4:	e00d      	b.n	10042dc2 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10042da6:	230f      	movs	r3, #15
10042da8:	18fb      	adds	r3, r7, r3
10042daa:	2201      	movs	r2, #1
10042dac:	701a      	strb	r2, [r3, #0]
10042dae:	e008      	b.n	10042dc2 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10042db0:	230f      	movs	r3, #15
10042db2:	18fb      	adds	r3, r7, r3
10042db4:	2201      	movs	r2, #1
10042db6:	701a      	strb	r2, [r3, #0]
10042db8:	e003      	b.n	10042dc2 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10042dba:	230f      	movs	r3, #15
10042dbc:	18fb      	adds	r3, r7, r3
10042dbe:	2201      	movs	r2, #1
10042dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10042dc2:	230f      	movs	r3, #15
10042dc4:	18fb      	adds	r3, r7, r3
10042dc6:	781b      	ldrb	r3, [r3, #0]
}
10042dc8:	0018      	movs	r0, r3
10042dca:	46bd      	mov	sp, r7
10042dcc:	b005      	add	sp, #20
10042dce:	bd90      	pop	{r4, r7, pc}
10042dd0:	20000124 	.word	0x20000124
10042dd4:	20000120 	.word	0x20000120

10042dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10042dd8:	b580      	push	{r7, lr}
10042dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10042ddc:	4b05      	ldr	r3, [pc, #20]	@ (10042df4 <HAL_IncTick+0x1c>)
10042dde:	781b      	ldrb	r3, [r3, #0]
10042de0:	001a      	movs	r2, r3
10042de2:	4b05      	ldr	r3, [pc, #20]	@ (10042df8 <HAL_IncTick+0x20>)
10042de4:	681b      	ldr	r3, [r3, #0]
10042de6:	18d2      	adds	r2, r2, r3
10042de8:	4b03      	ldr	r3, [pc, #12]	@ (10042df8 <HAL_IncTick+0x20>)
10042dea:	601a      	str	r2, [r3, #0]
}
10042dec:	46c0      	nop			@ (mov r8, r8)
10042dee:	46bd      	mov	sp, r7
10042df0:	bd80      	pop	{r7, pc}
10042df2:	46c0      	nop			@ (mov r8, r8)
10042df4:	20000124 	.word	0x20000124
10042df8:	20000118 	.word	0x20000118

10042dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10042dfc:	b580      	push	{r7, lr}
10042dfe:	af00      	add	r7, sp, #0
  return uwTick;
10042e00:	4b02      	ldr	r3, [pc, #8]	@ (10042e0c <HAL_GetTick+0x10>)
10042e02:	681b      	ldr	r3, [r3, #0]
}
10042e04:	0018      	movs	r0, r3
10042e06:	46bd      	mov	sp, r7
10042e08:	bd80      	pop	{r7, pc}
10042e0a:	46c0      	nop			@ (mov r8, r8)
10042e0c:	20000118 	.word	0x20000118

10042e10 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10042e10:	b580      	push	{r7, lr}
10042e12:	af00      	add	r7, sp, #0
  return uwTickPrio;
10042e14:	4b02      	ldr	r3, [pc, #8]	@ (10042e20 <HAL_GetTickPrio+0x10>)
10042e16:	681b      	ldr	r3, [r3, #0]
}
10042e18:	0018      	movs	r0, r3
10042e1a:	46bd      	mov	sp, r7
10042e1c:	bd80      	pop	{r7, pc}
10042e1e:	46c0      	nop			@ (mov r8, r8)
10042e20:	20000120 	.word	0x20000120

10042e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10042e24:	b580      	push	{r7, lr}
10042e26:	b084      	sub	sp, #16
10042e28:	af00      	add	r7, sp, #0
10042e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10042e2c:	f7ff ffe6 	bl	10042dfc <HAL_GetTick>
10042e30:	0003      	movs	r3, r0
10042e32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
10042e34:	687b      	ldr	r3, [r7, #4]
10042e36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10042e38:	68fb      	ldr	r3, [r7, #12]
10042e3a:	3301      	adds	r3, #1
10042e3c:	d005      	beq.n	10042e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10042e3e:	4b0a      	ldr	r3, [pc, #40]	@ (10042e68 <HAL_Delay+0x44>)
10042e40:	781b      	ldrb	r3, [r3, #0]
10042e42:	001a      	movs	r2, r3
10042e44:	68fb      	ldr	r3, [r7, #12]
10042e46:	189b      	adds	r3, r3, r2
10042e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10042e4a:	46c0      	nop			@ (mov r8, r8)
10042e4c:	f7ff ffd6 	bl	10042dfc <HAL_GetTick>
10042e50:	0002      	movs	r2, r0
10042e52:	68bb      	ldr	r3, [r7, #8]
10042e54:	1ad3      	subs	r3, r2, r3
10042e56:	68fa      	ldr	r2, [r7, #12]
10042e58:	429a      	cmp	r2, r3
10042e5a:	d8f7      	bhi.n	10042e4c <HAL_Delay+0x28>
  {
  }
}
10042e5c:	46c0      	nop			@ (mov r8, r8)
10042e5e:	46c0      	nop			@ (mov r8, r8)
10042e60:	46bd      	mov	sp, r7
10042e62:	b004      	add	sp, #16
10042e64:	bd80      	pop	{r7, pc}
10042e66:	46c0      	nop			@ (mov r8, r8)
10042e68:	20000124 	.word	0x20000124

10042e6c <__NVIC_SetPriority>:
{
10042e6c:	b590      	push	{r4, r7, lr}
10042e6e:	b083      	sub	sp, #12
10042e70:	af00      	add	r7, sp, #0
10042e72:	0002      	movs	r2, r0
10042e74:	6039      	str	r1, [r7, #0]
10042e76:	1dfb      	adds	r3, r7, #7
10042e78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10042e7a:	1dfb      	adds	r3, r7, #7
10042e7c:	781b      	ldrb	r3, [r3, #0]
10042e7e:	2b7f      	cmp	r3, #127	@ 0x7f
10042e80:	d828      	bhi.n	10042ed4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042e82:	4a2f      	ldr	r2, [pc, #188]	@ (10042f40 <__NVIC_SetPriority+0xd4>)
10042e84:	1dfb      	adds	r3, r7, #7
10042e86:	781b      	ldrb	r3, [r3, #0]
10042e88:	b25b      	sxtb	r3, r3
10042e8a:	089b      	lsrs	r3, r3, #2
10042e8c:	33c0      	adds	r3, #192	@ 0xc0
10042e8e:	009b      	lsls	r3, r3, #2
10042e90:	589b      	ldr	r3, [r3, r2]
10042e92:	1dfa      	adds	r2, r7, #7
10042e94:	7812      	ldrb	r2, [r2, #0]
10042e96:	0011      	movs	r1, r2
10042e98:	2203      	movs	r2, #3
10042e9a:	400a      	ands	r2, r1
10042e9c:	00d2      	lsls	r2, r2, #3
10042e9e:	21ff      	movs	r1, #255	@ 0xff
10042ea0:	4091      	lsls	r1, r2
10042ea2:	000a      	movs	r2, r1
10042ea4:	43d2      	mvns	r2, r2
10042ea6:	401a      	ands	r2, r3
10042ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10042eaa:	683b      	ldr	r3, [r7, #0]
10042eac:	019b      	lsls	r3, r3, #6
10042eae:	22ff      	movs	r2, #255	@ 0xff
10042eb0:	401a      	ands	r2, r3
10042eb2:	1dfb      	adds	r3, r7, #7
10042eb4:	781b      	ldrb	r3, [r3, #0]
10042eb6:	0018      	movs	r0, r3
10042eb8:	2303      	movs	r3, #3
10042eba:	4003      	ands	r3, r0
10042ebc:	00db      	lsls	r3, r3, #3
10042ebe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042ec0:	481f      	ldr	r0, [pc, #124]	@ (10042f40 <__NVIC_SetPriority+0xd4>)
10042ec2:	1dfb      	adds	r3, r7, #7
10042ec4:	781b      	ldrb	r3, [r3, #0]
10042ec6:	b25b      	sxtb	r3, r3
10042ec8:	089b      	lsrs	r3, r3, #2
10042eca:	430a      	orrs	r2, r1
10042ecc:	33c0      	adds	r3, #192	@ 0xc0
10042ece:	009b      	lsls	r3, r3, #2
10042ed0:	501a      	str	r2, [r3, r0]
}
10042ed2:	e031      	b.n	10042f38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042ed4:	4a1b      	ldr	r2, [pc, #108]	@ (10042f44 <__NVIC_SetPriority+0xd8>)
10042ed6:	1dfb      	adds	r3, r7, #7
10042ed8:	781b      	ldrb	r3, [r3, #0]
10042eda:	0019      	movs	r1, r3
10042edc:	230f      	movs	r3, #15
10042ede:	400b      	ands	r3, r1
10042ee0:	3b08      	subs	r3, #8
10042ee2:	089b      	lsrs	r3, r3, #2
10042ee4:	3306      	adds	r3, #6
10042ee6:	009b      	lsls	r3, r3, #2
10042ee8:	18d3      	adds	r3, r2, r3
10042eea:	3304      	adds	r3, #4
10042eec:	681b      	ldr	r3, [r3, #0]
10042eee:	1dfa      	adds	r2, r7, #7
10042ef0:	7812      	ldrb	r2, [r2, #0]
10042ef2:	0011      	movs	r1, r2
10042ef4:	2203      	movs	r2, #3
10042ef6:	400a      	ands	r2, r1
10042ef8:	00d2      	lsls	r2, r2, #3
10042efa:	21ff      	movs	r1, #255	@ 0xff
10042efc:	4091      	lsls	r1, r2
10042efe:	000a      	movs	r2, r1
10042f00:	43d2      	mvns	r2, r2
10042f02:	401a      	ands	r2, r3
10042f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10042f06:	683b      	ldr	r3, [r7, #0]
10042f08:	019b      	lsls	r3, r3, #6
10042f0a:	22ff      	movs	r2, #255	@ 0xff
10042f0c:	401a      	ands	r2, r3
10042f0e:	1dfb      	adds	r3, r7, #7
10042f10:	781b      	ldrb	r3, [r3, #0]
10042f12:	0018      	movs	r0, r3
10042f14:	2303      	movs	r3, #3
10042f16:	4003      	ands	r3, r0
10042f18:	00db      	lsls	r3, r3, #3
10042f1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042f1c:	4809      	ldr	r0, [pc, #36]	@ (10042f44 <__NVIC_SetPriority+0xd8>)
10042f1e:	1dfb      	adds	r3, r7, #7
10042f20:	781b      	ldrb	r3, [r3, #0]
10042f22:	001c      	movs	r4, r3
10042f24:	230f      	movs	r3, #15
10042f26:	4023      	ands	r3, r4
10042f28:	3b08      	subs	r3, #8
10042f2a:	089b      	lsrs	r3, r3, #2
10042f2c:	430a      	orrs	r2, r1
10042f2e:	3306      	adds	r3, #6
10042f30:	009b      	lsls	r3, r3, #2
10042f32:	18c3      	adds	r3, r0, r3
10042f34:	3304      	adds	r3, #4
10042f36:	601a      	str	r2, [r3, #0]
}
10042f38:	46c0      	nop			@ (mov r8, r8)
10042f3a:	46bd      	mov	sp, r7
10042f3c:	b003      	add	sp, #12
10042f3e:	bd90      	pop	{r4, r7, pc}
10042f40:	e000e100 	.word	0xe000e100
10042f44:	e000ed00 	.word	0xe000ed00

10042f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10042f48:	b580      	push	{r7, lr}
10042f4a:	b082      	sub	sp, #8
10042f4c:	af00      	add	r7, sp, #0
10042f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10042f50:	687b      	ldr	r3, [r7, #4]
10042f52:	1e5a      	subs	r2, r3, #1
10042f54:	2380      	movs	r3, #128	@ 0x80
10042f56:	045b      	lsls	r3, r3, #17
10042f58:	429a      	cmp	r2, r3
10042f5a:	d301      	bcc.n	10042f60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10042f5c:	2301      	movs	r3, #1
10042f5e:	e010      	b.n	10042f82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10042f60:	4b0a      	ldr	r3, [pc, #40]	@ (10042f8c <SysTick_Config+0x44>)
10042f62:	687a      	ldr	r2, [r7, #4]
10042f64:	3a01      	subs	r2, #1
10042f66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10042f68:	2301      	movs	r3, #1
10042f6a:	425b      	negs	r3, r3
10042f6c:	2103      	movs	r1, #3
10042f6e:	0018      	movs	r0, r3
10042f70:	f7ff ff7c 	bl	10042e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10042f74:	4b05      	ldr	r3, [pc, #20]	@ (10042f8c <SysTick_Config+0x44>)
10042f76:	2200      	movs	r2, #0
10042f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10042f7a:	4b04      	ldr	r3, [pc, #16]	@ (10042f8c <SysTick_Config+0x44>)
10042f7c:	2207      	movs	r2, #7
10042f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10042f80:	2300      	movs	r3, #0
}
10042f82:	0018      	movs	r0, r3
10042f84:	46bd      	mov	sp, r7
10042f86:	b002      	add	sp, #8
10042f88:	bd80      	pop	{r7, pc}
10042f8a:	46c0      	nop			@ (mov r8, r8)
10042f8c:	e000e010 	.word	0xe000e010

10042f90 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10042f90:	b580      	push	{r7, lr}
10042f92:	b084      	sub	sp, #16
10042f94:	af00      	add	r7, sp, #0
10042f96:	60b9      	str	r1, [r7, #8]
10042f98:	607a      	str	r2, [r7, #4]
10042f9a:	210f      	movs	r1, #15
10042f9c:	187b      	adds	r3, r7, r1
10042f9e:	1c02      	adds	r2, r0, #0
10042fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10042fa2:	68ba      	ldr	r2, [r7, #8]
10042fa4:	187b      	adds	r3, r7, r1
10042fa6:	781b      	ldrb	r3, [r3, #0]
10042fa8:	b25b      	sxtb	r3, r3
10042faa:	0011      	movs	r1, r2
10042fac:	0018      	movs	r0, r3
10042fae:	f7ff ff5d 	bl	10042e6c <__NVIC_SetPriority>
}
10042fb2:	46c0      	nop			@ (mov r8, r8)
10042fb4:	46bd      	mov	sp, r7
10042fb6:	b004      	add	sp, #16
10042fb8:	bd80      	pop	{r7, pc}

10042fba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10042fba:	b580      	push	{r7, lr}
10042fbc:	b082      	sub	sp, #8
10042fbe:	af00      	add	r7, sp, #0
10042fc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10042fc2:	687b      	ldr	r3, [r7, #4]
10042fc4:	0018      	movs	r0, r3
10042fc6:	f7ff ffbf 	bl	10042f48 <SysTick_Config>
10042fca:	0003      	movs	r3, r0
}
10042fcc:	0018      	movs	r0, r3
10042fce:	46bd      	mov	sp, r7
10042fd0:	b002      	add	sp, #8
10042fd2:	bd80      	pop	{r7, pc}

10042fd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10042fd4:	b580      	push	{r7, lr}
10042fd6:	b086      	sub	sp, #24
10042fd8:	af00      	add	r7, sp, #0
10042fda:	6078      	str	r0, [r7, #4]
10042fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10042fde:	2300      	movs	r3, #0
10042fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10042fe2:	e190      	b.n	10043306 <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10042fe4:	683b      	ldr	r3, [r7, #0]
10042fe6:	681b      	ldr	r3, [r3, #0]
10042fe8:	2101      	movs	r1, #1
10042fea:	697a      	ldr	r2, [r7, #20]
10042fec:	4091      	lsls	r1, r2
10042fee:	000a      	movs	r2, r1
10042ff0:	4013      	ands	r3, r2
10042ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10042ff4:	68fb      	ldr	r3, [r7, #12]
10042ff6:	2b00      	cmp	r3, #0
10042ff8:	d100      	bne.n	10042ffc <HAL_GPIO_Init+0x28>
10042ffa:	e181      	b.n	10043300 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10042ffc:	683b      	ldr	r3, [r7, #0]
10042ffe:	685b      	ldr	r3, [r3, #4]
10043000:	2203      	movs	r2, #3
10043002:	4013      	ands	r3, r2
10043004:	2b01      	cmp	r3, #1
10043006:	d005      	beq.n	10043014 <HAL_GPIO_Init+0x40>
10043008:	683b      	ldr	r3, [r7, #0]
1004300a:	685b      	ldr	r3, [r3, #4]
1004300c:	2203      	movs	r2, #3
1004300e:	4013      	ands	r3, r2
10043010:	2b02      	cmp	r3, #2
10043012:	d130      	bne.n	10043076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10043014:	687b      	ldr	r3, [r7, #4]
10043016:	689b      	ldr	r3, [r3, #8]
10043018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004301a:	697b      	ldr	r3, [r7, #20]
1004301c:	005b      	lsls	r3, r3, #1
1004301e:	2203      	movs	r2, #3
10043020:	409a      	lsls	r2, r3
10043022:	0013      	movs	r3, r2
10043024:	43da      	mvns	r2, r3
10043026:	693b      	ldr	r3, [r7, #16]
10043028:	4013      	ands	r3, r2
1004302a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004302c:	683b      	ldr	r3, [r7, #0]
1004302e:	68da      	ldr	r2, [r3, #12]
10043030:	697b      	ldr	r3, [r7, #20]
10043032:	005b      	lsls	r3, r3, #1
10043034:	409a      	lsls	r2, r3
10043036:	0013      	movs	r3, r2
10043038:	693a      	ldr	r2, [r7, #16]
1004303a:	4313      	orrs	r3, r2
1004303c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004303e:	687b      	ldr	r3, [r7, #4]
10043040:	693a      	ldr	r2, [r7, #16]
10043042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10043044:	687b      	ldr	r3, [r7, #4]
10043046:	685b      	ldr	r3, [r3, #4]
10043048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004304a:	2201      	movs	r2, #1
1004304c:	697b      	ldr	r3, [r7, #20]
1004304e:	409a      	lsls	r2, r3
10043050:	0013      	movs	r3, r2
10043052:	43da      	mvns	r2, r3
10043054:	693b      	ldr	r3, [r7, #16]
10043056:	4013      	ands	r3, r2
10043058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004305a:	683b      	ldr	r3, [r7, #0]
1004305c:	685b      	ldr	r3, [r3, #4]
1004305e:	091b      	lsrs	r3, r3, #4
10043060:	2201      	movs	r2, #1
10043062:	401a      	ands	r2, r3
10043064:	697b      	ldr	r3, [r7, #20]
10043066:	409a      	lsls	r2, r3
10043068:	0013      	movs	r3, r2
1004306a:	693a      	ldr	r2, [r7, #16]
1004306c:	4313      	orrs	r3, r2
1004306e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10043070:	687b      	ldr	r3, [r7, #4]
10043072:	693a      	ldr	r2, [r7, #16]
10043074:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10043076:	683b      	ldr	r3, [r7, #0]
10043078:	685b      	ldr	r3, [r3, #4]
1004307a:	2203      	movs	r2, #3
1004307c:	4013      	ands	r3, r2
1004307e:	2b03      	cmp	r3, #3
10043080:	d017      	beq.n	100430b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10043082:	687b      	ldr	r3, [r7, #4]
10043084:	68db      	ldr	r3, [r3, #12]
10043086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10043088:	697b      	ldr	r3, [r7, #20]
1004308a:	005b      	lsls	r3, r3, #1
1004308c:	2203      	movs	r2, #3
1004308e:	409a      	lsls	r2, r3
10043090:	0013      	movs	r3, r2
10043092:	43da      	mvns	r2, r3
10043094:	693b      	ldr	r3, [r7, #16]
10043096:	4013      	ands	r3, r2
10043098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004309a:	683b      	ldr	r3, [r7, #0]
1004309c:	689a      	ldr	r2, [r3, #8]
1004309e:	697b      	ldr	r3, [r7, #20]
100430a0:	005b      	lsls	r3, r3, #1
100430a2:	409a      	lsls	r2, r3
100430a4:	0013      	movs	r3, r2
100430a6:	693a      	ldr	r2, [r7, #16]
100430a8:	4313      	orrs	r3, r2
100430aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
100430ac:	687b      	ldr	r3, [r7, #4]
100430ae:	693a      	ldr	r2, [r7, #16]
100430b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100430b2:	683b      	ldr	r3, [r7, #0]
100430b4:	685b      	ldr	r3, [r3, #4]
100430b6:	2203      	movs	r2, #3
100430b8:	4013      	ands	r3, r2
100430ba:	2b02      	cmp	r3, #2
100430bc:	d123      	bne.n	10043106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100430be:	697b      	ldr	r3, [r7, #20]
100430c0:	08da      	lsrs	r2, r3, #3
100430c2:	687b      	ldr	r3, [r7, #4]
100430c4:	3208      	adds	r2, #8
100430c6:	0092      	lsls	r2, r2, #2
100430c8:	58d3      	ldr	r3, [r2, r3]
100430ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100430cc:	697b      	ldr	r3, [r7, #20]
100430ce:	2207      	movs	r2, #7
100430d0:	4013      	ands	r3, r2
100430d2:	009b      	lsls	r3, r3, #2
100430d4:	220f      	movs	r2, #15
100430d6:	409a      	lsls	r2, r3
100430d8:	0013      	movs	r3, r2
100430da:	43da      	mvns	r2, r3
100430dc:	693b      	ldr	r3, [r7, #16]
100430de:	4013      	ands	r3, r2
100430e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100430e2:	683b      	ldr	r3, [r7, #0]
100430e4:	691a      	ldr	r2, [r3, #16]
100430e6:	697b      	ldr	r3, [r7, #20]
100430e8:	2107      	movs	r1, #7
100430ea:	400b      	ands	r3, r1
100430ec:	009b      	lsls	r3, r3, #2
100430ee:	409a      	lsls	r2, r3
100430f0:	0013      	movs	r3, r2
100430f2:	693a      	ldr	r2, [r7, #16]
100430f4:	4313      	orrs	r3, r2
100430f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100430f8:	697b      	ldr	r3, [r7, #20]
100430fa:	08da      	lsrs	r2, r3, #3
100430fc:	687b      	ldr	r3, [r7, #4]
100430fe:	3208      	adds	r2, #8
10043100:	0092      	lsls	r2, r2, #2
10043102:	6939      	ldr	r1, [r7, #16]
10043104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10043106:	687b      	ldr	r3, [r7, #4]
10043108:	681b      	ldr	r3, [r3, #0]
1004310a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
1004310c:	697b      	ldr	r3, [r7, #20]
1004310e:	005b      	lsls	r3, r3, #1
10043110:	2203      	movs	r2, #3
10043112:	409a      	lsls	r2, r3
10043114:	0013      	movs	r3, r2
10043116:	43da      	mvns	r2, r3
10043118:	693b      	ldr	r3, [r7, #16]
1004311a:	4013      	ands	r3, r2
1004311c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004311e:	683b      	ldr	r3, [r7, #0]
10043120:	685b      	ldr	r3, [r3, #4]
10043122:	2203      	movs	r2, #3
10043124:	401a      	ands	r2, r3
10043126:	697b      	ldr	r3, [r7, #20]
10043128:	005b      	lsls	r3, r3, #1
1004312a:	409a      	lsls	r2, r3
1004312c:	0013      	movs	r3, r2
1004312e:	693a      	ldr	r2, [r7, #16]
10043130:	4313      	orrs	r3, r2
10043132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10043134:	687b      	ldr	r3, [r7, #4]
10043136:	693a      	ldr	r2, [r7, #16]
10043138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004313a:	683b      	ldr	r3, [r7, #0]
1004313c:	685a      	ldr	r2, [r3, #4]
1004313e:	23c0      	movs	r3, #192	@ 0xc0
10043140:	029b      	lsls	r3, r3, #10
10043142:	4013      	ands	r3, r2
10043144:	d100      	bne.n	10043148 <HAL_GPIO_Init+0x174>
10043146:	e0db      	b.n	10043300 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10043148:	683b      	ldr	r3, [r7, #0]
1004314a:	685a      	ldr	r2, [r3, #4]
1004314c:	2380      	movs	r3, #128	@ 0x80
1004314e:	02db      	lsls	r3, r3, #11
10043150:	4013      	ands	r3, r2
10043152:	d030      	beq.n	100431b6 <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
10043154:	2380      	movs	r3, #128	@ 0x80
10043156:	05db      	lsls	r3, r3, #23
10043158:	68db      	ldr	r3, [r3, #12]
1004315a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004315c:	687a      	ldr	r2, [r7, #4]
1004315e:	2390      	movs	r3, #144	@ 0x90
10043160:	05db      	lsls	r3, r3, #23
10043162:	429a      	cmp	r2, r3
10043164:	d111      	bne.n	1004318a <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10043166:	2201      	movs	r2, #1
10043168:	697b      	ldr	r3, [r7, #20]
1004316a:	409a      	lsls	r2, r3
1004316c:	0013      	movs	r3, r2
1004316e:	43db      	mvns	r3, r3
10043170:	001a      	movs	r2, r3
10043172:	693b      	ldr	r3, [r7, #16]
10043174:	4013      	ands	r3, r2
10043176:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10043178:	2201      	movs	r2, #1
1004317a:	697b      	ldr	r3, [r7, #20]
1004317c:	409a      	lsls	r2, r3
1004317e:	0013      	movs	r3, r2
10043180:	001a      	movs	r2, r3
10043182:	693b      	ldr	r3, [r7, #16]
10043184:	4313      	orrs	r3, r2
10043186:	613b      	str	r3, [r7, #16]
10043188:	e011      	b.n	100431ae <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004318a:	2201      	movs	r2, #1
1004318c:	697b      	ldr	r3, [r7, #20]
1004318e:	409a      	lsls	r2, r3
10043190:	0013      	movs	r3, r2
10043192:	041b      	lsls	r3, r3, #16
10043194:	43db      	mvns	r3, r3
10043196:	001a      	movs	r2, r3
10043198:	693b      	ldr	r3, [r7, #16]
1004319a:	4013      	ands	r3, r2
1004319c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004319e:	2201      	movs	r2, #1
100431a0:	697b      	ldr	r3, [r7, #20]
100431a2:	409a      	lsls	r2, r3
100431a4:	0013      	movs	r3, r2
100431a6:	041b      	lsls	r3, r3, #16
100431a8:	693a      	ldr	r2, [r7, #16]
100431aa:	4313      	orrs	r3, r2
100431ac:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
100431ae:	2380      	movs	r3, #128	@ 0x80
100431b0:	05db      	lsls	r3, r3, #23
100431b2:	693a      	ldr	r2, [r7, #16]
100431b4:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100431b6:	683b      	ldr	r3, [r7, #0]
100431b8:	685a      	ldr	r2, [r3, #4]
100431ba:	2380      	movs	r3, #128	@ 0x80
100431bc:	035b      	lsls	r3, r3, #13
100431be:	4013      	ands	r3, r2
100431c0:	d030      	beq.n	10043224 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
100431c2:	2380      	movs	r3, #128	@ 0x80
100431c4:	05db      	lsls	r3, r3, #23
100431c6:	691b      	ldr	r3, [r3, #16]
100431c8:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100431ca:	687a      	ldr	r2, [r7, #4]
100431cc:	2390      	movs	r3, #144	@ 0x90
100431ce:	05db      	lsls	r3, r3, #23
100431d0:	429a      	cmp	r2, r3
100431d2:	d111      	bne.n	100431f8 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
100431d4:	2201      	movs	r2, #1
100431d6:	697b      	ldr	r3, [r7, #20]
100431d8:	409a      	lsls	r2, r3
100431da:	0013      	movs	r3, r2
100431dc:	43db      	mvns	r3, r3
100431de:	001a      	movs	r2, r3
100431e0:	693b      	ldr	r3, [r7, #16]
100431e2:	4013      	ands	r3, r2
100431e4:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100431e6:	2201      	movs	r2, #1
100431e8:	697b      	ldr	r3, [r7, #20]
100431ea:	409a      	lsls	r2, r3
100431ec:	0013      	movs	r3, r2
100431ee:	001a      	movs	r2, r3
100431f0:	693b      	ldr	r3, [r7, #16]
100431f2:	4313      	orrs	r3, r2
100431f4:	613b      	str	r3, [r7, #16]
100431f6:	e011      	b.n	1004321c <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100431f8:	2201      	movs	r2, #1
100431fa:	697b      	ldr	r3, [r7, #20]
100431fc:	409a      	lsls	r2, r3
100431fe:	0013      	movs	r3, r2
10043200:	041b      	lsls	r3, r3, #16
10043202:	43db      	mvns	r3, r3
10043204:	001a      	movs	r2, r3
10043206:	693b      	ldr	r3, [r7, #16]
10043208:	4013      	ands	r3, r2
1004320a:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004320c:	2201      	movs	r2, #1
1004320e:	697b      	ldr	r3, [r7, #20]
10043210:	409a      	lsls	r2, r3
10043212:	0013      	movs	r3, r2
10043214:	041b      	lsls	r3, r3, #16
10043216:	693a      	ldr	r2, [r7, #16]
10043218:	4313      	orrs	r3, r2
1004321a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
1004321c:	2380      	movs	r3, #128	@ 0x80
1004321e:	05db      	lsls	r3, r3, #23
10043220:	693a      	ldr	r2, [r7, #16]
10043222:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10043224:	683b      	ldr	r3, [r7, #0]
10043226:	685a      	ldr	r2, [r3, #4]
10043228:	2380      	movs	r3, #128	@ 0x80
1004322a:	03db      	lsls	r3, r3, #15
1004322c:	4013      	ands	r3, r2
1004322e:	d030      	beq.n	10043292 <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
10043230:	2380      	movs	r3, #128	@ 0x80
10043232:	05db      	lsls	r3, r3, #23
10043234:	695b      	ldr	r3, [r3, #20]
10043236:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10043238:	687a      	ldr	r2, [r7, #4]
1004323a:	2390      	movs	r3, #144	@ 0x90
1004323c:	05db      	lsls	r3, r3, #23
1004323e:	429a      	cmp	r2, r3
10043240:	d111      	bne.n	10043266 <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
10043242:	2201      	movs	r2, #1
10043244:	697b      	ldr	r3, [r7, #20]
10043246:	409a      	lsls	r2, r3
10043248:	0013      	movs	r3, r2
1004324a:	43db      	mvns	r3, r3
1004324c:	001a      	movs	r2, r3
1004324e:	693b      	ldr	r3, [r7, #16]
10043250:	4013      	ands	r3, r2
10043252:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10043254:	2201      	movs	r2, #1
10043256:	697b      	ldr	r3, [r7, #20]
10043258:	409a      	lsls	r2, r3
1004325a:	0013      	movs	r3, r2
1004325c:	001a      	movs	r2, r3
1004325e:	693b      	ldr	r3, [r7, #16]
10043260:	4313      	orrs	r3, r2
10043262:	613b      	str	r3, [r7, #16]
10043264:	e011      	b.n	1004328a <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10043266:	2201      	movs	r2, #1
10043268:	697b      	ldr	r3, [r7, #20]
1004326a:	409a      	lsls	r2, r3
1004326c:	0013      	movs	r3, r2
1004326e:	041b      	lsls	r3, r3, #16
10043270:	43db      	mvns	r3, r3
10043272:	001a      	movs	r2, r3
10043274:	693b      	ldr	r3, [r7, #16]
10043276:	4013      	ands	r3, r2
10043278:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004327a:	2201      	movs	r2, #1
1004327c:	697b      	ldr	r3, [r7, #20]
1004327e:	409a      	lsls	r2, r3
10043280:	0013      	movs	r3, r2
10043282:	041b      	lsls	r3, r3, #16
10043284:	693a      	ldr	r2, [r7, #16]
10043286:	4313      	orrs	r3, r2
10043288:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
1004328a:	2380      	movs	r3, #128	@ 0x80
1004328c:	05db      	lsls	r3, r3, #23
1004328e:	693a      	ldr	r2, [r7, #16]
10043290:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10043292:	683b      	ldr	r3, [r7, #0]
10043294:	685a      	ldr	r2, [r3, #4]
10043296:	2380      	movs	r3, #128	@ 0x80
10043298:	025b      	lsls	r3, r3, #9
1004329a:	4013      	ands	r3, r2
1004329c:	d030      	beq.n	10043300 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
1004329e:	2380      	movs	r3, #128	@ 0x80
100432a0:	05db      	lsls	r3, r3, #23
100432a2:	699b      	ldr	r3, [r3, #24]
100432a4:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100432a6:	687a      	ldr	r2, [r7, #4]
100432a8:	2390      	movs	r3, #144	@ 0x90
100432aa:	05db      	lsls	r3, r3, #23
100432ac:	429a      	cmp	r2, r3
100432ae:	d111      	bne.n	100432d4 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
100432b0:	2201      	movs	r2, #1
100432b2:	697b      	ldr	r3, [r7, #20]
100432b4:	409a      	lsls	r2, r3
100432b6:	0013      	movs	r3, r2
100432b8:	43db      	mvns	r3, r3
100432ba:	001a      	movs	r2, r3
100432bc:	693b      	ldr	r3, [r7, #16]
100432be:	4013      	ands	r3, r2
100432c0:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100432c2:	2201      	movs	r2, #1
100432c4:	697b      	ldr	r3, [r7, #20]
100432c6:	409a      	lsls	r2, r3
100432c8:	0013      	movs	r3, r2
100432ca:	001a      	movs	r2, r3
100432cc:	693b      	ldr	r3, [r7, #16]
100432ce:	4313      	orrs	r3, r2
100432d0:	613b      	str	r3, [r7, #16]
100432d2:	e011      	b.n	100432f8 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100432d4:	2201      	movs	r2, #1
100432d6:	697b      	ldr	r3, [r7, #20]
100432d8:	409a      	lsls	r2, r3
100432da:	0013      	movs	r3, r2
100432dc:	041b      	lsls	r3, r3, #16
100432de:	43db      	mvns	r3, r3
100432e0:	001a      	movs	r2, r3
100432e2:	693b      	ldr	r3, [r7, #16]
100432e4:	4013      	ands	r3, r2
100432e6:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100432e8:	2201      	movs	r2, #1
100432ea:	697b      	ldr	r3, [r7, #20]
100432ec:	409a      	lsls	r2, r3
100432ee:	0013      	movs	r3, r2
100432f0:	041b      	lsls	r3, r3, #16
100432f2:	693a      	ldr	r2, [r7, #16]
100432f4:	4313      	orrs	r3, r2
100432f6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100432f8:	2380      	movs	r3, #128	@ 0x80
100432fa:	05db      	lsls	r3, r3, #23
100432fc:	693a      	ldr	r2, [r7, #16]
100432fe:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10043300:	697b      	ldr	r3, [r7, #20]
10043302:	3301      	adds	r3, #1
10043304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10043306:	683b      	ldr	r3, [r7, #0]
10043308:	681a      	ldr	r2, [r3, #0]
1004330a:	697b      	ldr	r3, [r7, #20]
1004330c:	40da      	lsrs	r2, r3
1004330e:	1e13      	subs	r3, r2, #0
10043310:	d000      	beq.n	10043314 <HAL_GPIO_Init+0x340>
10043312:	e667      	b.n	10042fe4 <HAL_GPIO_Init+0x10>
  }
}
10043314:	46c0      	nop			@ (mov r8, r8)
10043316:	46c0      	nop			@ (mov r8, r8)
10043318:	46bd      	mov	sp, r7
1004331a:	b006      	add	sp, #24
1004331c:	bd80      	pop	{r7, pc}
	...

10043320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10043320:	b580      	push	{r7, lr}
10043322:	b082      	sub	sp, #8
10043324:	af00      	add	r7, sp, #0
10043326:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10043328:	687b      	ldr	r3, [r7, #4]
1004332a:	2b00      	cmp	r3, #0
1004332c:	d101      	bne.n	10043332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
1004332e:	2301      	movs	r3, #1
10043330:	e08f      	b.n	10043452 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10043332:	687b      	ldr	r3, [r7, #4]
10043334:	2241      	movs	r2, #65	@ 0x41
10043336:	5c9b      	ldrb	r3, [r3, r2]
10043338:	b2db      	uxtb	r3, r3
1004333a:	2b00      	cmp	r3, #0
1004333c:	d107      	bne.n	1004334e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
1004333e:	687b      	ldr	r3, [r7, #4]
10043340:	2240      	movs	r2, #64	@ 0x40
10043342:	2100      	movs	r1, #0
10043344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10043346:	687b      	ldr	r3, [r7, #4]
10043348:	0018      	movs	r0, r3
1004334a:	f7ff faa7 	bl	1004289c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
1004334e:	687b      	ldr	r3, [r7, #4]
10043350:	2241      	movs	r2, #65	@ 0x41
10043352:	2124      	movs	r1, #36	@ 0x24
10043354:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10043356:	687b      	ldr	r3, [r7, #4]
10043358:	681b      	ldr	r3, [r3, #0]
1004335a:	681a      	ldr	r2, [r3, #0]
1004335c:	687b      	ldr	r3, [r7, #4]
1004335e:	681b      	ldr	r3, [r3, #0]
10043360:	2101      	movs	r1, #1
10043362:	438a      	bics	r2, r1
10043364:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10043366:	687b      	ldr	r3, [r7, #4]
10043368:	685a      	ldr	r2, [r3, #4]
1004336a:	687b      	ldr	r3, [r7, #4]
1004336c:	681b      	ldr	r3, [r3, #0]
1004336e:	493b      	ldr	r1, [pc, #236]	@ (1004345c <HAL_I2C_Init+0x13c>)
10043370:	400a      	ands	r2, r1
10043372:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10043374:	687b      	ldr	r3, [r7, #4]
10043376:	681b      	ldr	r3, [r3, #0]
10043378:	689a      	ldr	r2, [r3, #8]
1004337a:	687b      	ldr	r3, [r7, #4]
1004337c:	681b      	ldr	r3, [r3, #0]
1004337e:	4938      	ldr	r1, [pc, #224]	@ (10043460 <HAL_I2C_Init+0x140>)
10043380:	400a      	ands	r2, r1
10043382:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10043384:	687b      	ldr	r3, [r7, #4]
10043386:	68db      	ldr	r3, [r3, #12]
10043388:	2b01      	cmp	r3, #1
1004338a:	d108      	bne.n	1004339e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
1004338c:	687b      	ldr	r3, [r7, #4]
1004338e:	689a      	ldr	r2, [r3, #8]
10043390:	687b      	ldr	r3, [r7, #4]
10043392:	681b      	ldr	r3, [r3, #0]
10043394:	2180      	movs	r1, #128	@ 0x80
10043396:	0209      	lsls	r1, r1, #8
10043398:	430a      	orrs	r2, r1
1004339a:	609a      	str	r2, [r3, #8]
1004339c:	e007      	b.n	100433ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
1004339e:	687b      	ldr	r3, [r7, #4]
100433a0:	689a      	ldr	r2, [r3, #8]
100433a2:	687b      	ldr	r3, [r7, #4]
100433a4:	681b      	ldr	r3, [r3, #0]
100433a6:	2184      	movs	r1, #132	@ 0x84
100433a8:	0209      	lsls	r1, r1, #8
100433aa:	430a      	orrs	r2, r1
100433ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
100433ae:	687b      	ldr	r3, [r7, #4]
100433b0:	68db      	ldr	r3, [r3, #12]
100433b2:	2b02      	cmp	r3, #2
100433b4:	d109      	bne.n	100433ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
100433b6:	687b      	ldr	r3, [r7, #4]
100433b8:	681b      	ldr	r3, [r3, #0]
100433ba:	685a      	ldr	r2, [r3, #4]
100433bc:	687b      	ldr	r3, [r7, #4]
100433be:	681b      	ldr	r3, [r3, #0]
100433c0:	2180      	movs	r1, #128	@ 0x80
100433c2:	0109      	lsls	r1, r1, #4
100433c4:	430a      	orrs	r2, r1
100433c6:	605a      	str	r2, [r3, #4]
100433c8:	e007      	b.n	100433da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
100433ca:	687b      	ldr	r3, [r7, #4]
100433cc:	681b      	ldr	r3, [r3, #0]
100433ce:	685a      	ldr	r2, [r3, #4]
100433d0:	687b      	ldr	r3, [r7, #4]
100433d2:	681b      	ldr	r3, [r3, #0]
100433d4:	4923      	ldr	r1, [pc, #140]	@ (10043464 <HAL_I2C_Init+0x144>)
100433d6:	400a      	ands	r2, r1
100433d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
100433da:	687b      	ldr	r3, [r7, #4]
100433dc:	681b      	ldr	r3, [r3, #0]
100433de:	685a      	ldr	r2, [r3, #4]
100433e0:	687b      	ldr	r3, [r7, #4]
100433e2:	681b      	ldr	r3, [r3, #0]
100433e4:	4920      	ldr	r1, [pc, #128]	@ (10043468 <HAL_I2C_Init+0x148>)
100433e6:	430a      	orrs	r2, r1
100433e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
100433ea:	687b      	ldr	r3, [r7, #4]
100433ec:	681b      	ldr	r3, [r3, #0]
100433ee:	68da      	ldr	r2, [r3, #12]
100433f0:	687b      	ldr	r3, [r7, #4]
100433f2:	681b      	ldr	r3, [r3, #0]
100433f4:	491a      	ldr	r1, [pc, #104]	@ (10043460 <HAL_I2C_Init+0x140>)
100433f6:	400a      	ands	r2, r1
100433f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100433fa:	687b      	ldr	r3, [r7, #4]
100433fc:	691a      	ldr	r2, [r3, #16]
100433fe:	687b      	ldr	r3, [r7, #4]
10043400:	695b      	ldr	r3, [r3, #20]
10043402:	431a      	orrs	r2, r3
10043404:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
10043406:	687b      	ldr	r3, [r7, #4]
10043408:	699b      	ldr	r3, [r3, #24]
1004340a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
1004340c:	687b      	ldr	r3, [r7, #4]
1004340e:	681b      	ldr	r3, [r3, #0]
10043410:	430a      	orrs	r2, r1
10043412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10043414:	687b      	ldr	r3, [r7, #4]
10043416:	69d9      	ldr	r1, [r3, #28]
10043418:	687b      	ldr	r3, [r7, #4]
1004341a:	6a1a      	ldr	r2, [r3, #32]
1004341c:	687b      	ldr	r3, [r7, #4]
1004341e:	681b      	ldr	r3, [r3, #0]
10043420:	430a      	orrs	r2, r1
10043422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
10043424:	687b      	ldr	r3, [r7, #4]
10043426:	681b      	ldr	r3, [r3, #0]
10043428:	681a      	ldr	r2, [r3, #0]
1004342a:	687b      	ldr	r3, [r7, #4]
1004342c:	681b      	ldr	r3, [r3, #0]
1004342e:	2101      	movs	r1, #1
10043430:	430a      	orrs	r2, r1
10043432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10043434:	687b      	ldr	r3, [r7, #4]
10043436:	2200      	movs	r2, #0
10043438:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
1004343a:	687b      	ldr	r3, [r7, #4]
1004343c:	2241      	movs	r2, #65	@ 0x41
1004343e:	2120      	movs	r1, #32
10043440:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
10043442:	687b      	ldr	r3, [r7, #4]
10043444:	2200      	movs	r2, #0
10043446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10043448:	687b      	ldr	r3, [r7, #4]
1004344a:	2242      	movs	r2, #66	@ 0x42
1004344c:	2100      	movs	r1, #0
1004344e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10043450:	2300      	movs	r3, #0
}
10043452:	0018      	movs	r0, r3
10043454:	46bd      	mov	sp, r7
10043456:	b002      	add	sp, #8
10043458:	bd80      	pop	{r7, pc}
1004345a:	46c0      	nop			@ (mov r8, r8)
1004345c:	f0ffffff 	.word	0xf0ffffff
10043460:	ffff7fff 	.word	0xffff7fff
10043464:	fffff7ff 	.word	0xfffff7ff
10043468:	02008000 	.word	0x02008000

1004346c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
1004346c:	b590      	push	{r4, r7, lr}
1004346e:	b089      	sub	sp, #36	@ 0x24
10043470:	af02      	add	r7, sp, #8
10043472:	60f8      	str	r0, [r7, #12]
10043474:	000c      	movs	r4, r1
10043476:	0010      	movs	r0, r2
10043478:	0019      	movs	r1, r3
1004347a:	230a      	movs	r3, #10
1004347c:	18fb      	adds	r3, r7, r3
1004347e:	1c22      	adds	r2, r4, #0
10043480:	801a      	strh	r2, [r3, #0]
10043482:	2308      	movs	r3, #8
10043484:	18fb      	adds	r3, r7, r3
10043486:	1c02      	adds	r2, r0, #0
10043488:	801a      	strh	r2, [r3, #0]
1004348a:	1dbb      	adds	r3, r7, #6
1004348c:	1c0a      	adds	r2, r1, #0
1004348e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10043490:	68fb      	ldr	r3, [r7, #12]
10043492:	2241      	movs	r2, #65	@ 0x41
10043494:	5c9b      	ldrb	r3, [r3, r2]
10043496:	b2db      	uxtb	r3, r3
10043498:	2b20      	cmp	r3, #32
1004349a:	d000      	beq.n	1004349e <HAL_I2C_Mem_Write+0x32>
1004349c:	e10c      	b.n	100436b8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
1004349e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100434a0:	2b00      	cmp	r3, #0
100434a2:	d004      	beq.n	100434ae <HAL_I2C_Mem_Write+0x42>
100434a4:	232c      	movs	r3, #44	@ 0x2c
100434a6:	18fb      	adds	r3, r7, r3
100434a8:	881b      	ldrh	r3, [r3, #0]
100434aa:	2b00      	cmp	r3, #0
100434ac:	d105      	bne.n	100434ba <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100434ae:	68fb      	ldr	r3, [r7, #12]
100434b0:	2280      	movs	r2, #128	@ 0x80
100434b2:	0092      	lsls	r2, r2, #2
100434b4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
100434b6:	2301      	movs	r3, #1
100434b8:	e0ff      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100434ba:	68fb      	ldr	r3, [r7, #12]
100434bc:	2240      	movs	r2, #64	@ 0x40
100434be:	5c9b      	ldrb	r3, [r3, r2]
100434c0:	2b01      	cmp	r3, #1
100434c2:	d101      	bne.n	100434c8 <HAL_I2C_Mem_Write+0x5c>
100434c4:	2302      	movs	r3, #2
100434c6:	e0f8      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
100434c8:	68fb      	ldr	r3, [r7, #12]
100434ca:	2240      	movs	r2, #64	@ 0x40
100434cc:	2101      	movs	r1, #1
100434ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
100434d0:	f7ff fc94 	bl	10042dfc <HAL_GetTick>
100434d4:	0003      	movs	r3, r0
100434d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
100434d8:	2380      	movs	r3, #128	@ 0x80
100434da:	0219      	lsls	r1, r3, #8
100434dc:	68f8      	ldr	r0, [r7, #12]
100434de:	697b      	ldr	r3, [r7, #20]
100434e0:	9300      	str	r3, [sp, #0]
100434e2:	2319      	movs	r3, #25
100434e4:	2201      	movs	r2, #1
100434e6:	f000 fb0b 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
100434ea:	1e03      	subs	r3, r0, #0
100434ec:	d001      	beq.n	100434f2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
100434ee:	2301      	movs	r3, #1
100434f0:	e0e3      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
100434f2:	68fb      	ldr	r3, [r7, #12]
100434f4:	2241      	movs	r2, #65	@ 0x41
100434f6:	2121      	movs	r1, #33	@ 0x21
100434f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
100434fa:	68fb      	ldr	r3, [r7, #12]
100434fc:	2242      	movs	r2, #66	@ 0x42
100434fe:	2140      	movs	r1, #64	@ 0x40
10043500:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10043502:	68fb      	ldr	r3, [r7, #12]
10043504:	2200      	movs	r2, #0
10043506:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
10043508:	68fb      	ldr	r3, [r7, #12]
1004350a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004350c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
1004350e:	68fb      	ldr	r3, [r7, #12]
10043510:	222c      	movs	r2, #44	@ 0x2c
10043512:	18ba      	adds	r2, r7, r2
10043514:	8812      	ldrh	r2, [r2, #0]
10043516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
10043518:	68fb      	ldr	r3, [r7, #12]
1004351a:	2200      	movs	r2, #0
1004351c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
1004351e:	1dbb      	adds	r3, r7, #6
10043520:	881c      	ldrh	r4, [r3, #0]
10043522:	2308      	movs	r3, #8
10043524:	18fb      	adds	r3, r7, r3
10043526:	881a      	ldrh	r2, [r3, #0]
10043528:	230a      	movs	r3, #10
1004352a:	18fb      	adds	r3, r7, r3
1004352c:	8819      	ldrh	r1, [r3, #0]
1004352e:	68f8      	ldr	r0, [r7, #12]
10043530:	697b      	ldr	r3, [r7, #20]
10043532:	9301      	str	r3, [sp, #4]
10043534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10043536:	9300      	str	r3, [sp, #0]
10043538:	0023      	movs	r3, r4
1004353a:	f000 f9f9 	bl	10043930 <I2C_RequestMemoryWrite>
1004353e:	1e03      	subs	r3, r0, #0
10043540:	d005      	beq.n	1004354e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10043542:	68fb      	ldr	r3, [r7, #12]
10043544:	2240      	movs	r2, #64	@ 0x40
10043546:	2100      	movs	r1, #0
10043548:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
1004354a:	2301      	movs	r3, #1
1004354c:	e0b5      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
1004354e:	68fb      	ldr	r3, [r7, #12]
10043550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10043552:	b29b      	uxth	r3, r3
10043554:	2bff      	cmp	r3, #255	@ 0xff
10043556:	d911      	bls.n	1004357c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10043558:	68fb      	ldr	r3, [r7, #12]
1004355a:	22ff      	movs	r2, #255	@ 0xff
1004355c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
1004355e:	68fb      	ldr	r3, [r7, #12]
10043560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10043562:	b2da      	uxtb	r2, r3
10043564:	2380      	movs	r3, #128	@ 0x80
10043566:	045c      	lsls	r4, r3, #17
10043568:	230a      	movs	r3, #10
1004356a:	18fb      	adds	r3, r7, r3
1004356c:	8819      	ldrh	r1, [r3, #0]
1004356e:	68f8      	ldr	r0, [r7, #12]
10043570:	2300      	movs	r3, #0
10043572:	9300      	str	r3, [sp, #0]
10043574:	0023      	movs	r3, r4
10043576:	f000 fc9d 	bl	10043eb4 <I2C_TransferConfig>
1004357a:	e012      	b.n	100435a2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
1004357c:	68fb      	ldr	r3, [r7, #12]
1004357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10043580:	b29a      	uxth	r2, r3
10043582:	68fb      	ldr	r3, [r7, #12]
10043584:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
10043586:	68fb      	ldr	r3, [r7, #12]
10043588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004358a:	b2da      	uxtb	r2, r3
1004358c:	2380      	movs	r3, #128	@ 0x80
1004358e:	049c      	lsls	r4, r3, #18
10043590:	230a      	movs	r3, #10
10043592:	18fb      	adds	r3, r7, r3
10043594:	8819      	ldrh	r1, [r3, #0]
10043596:	68f8      	ldr	r0, [r7, #12]
10043598:	2300      	movs	r3, #0
1004359a:	9300      	str	r3, [sp, #0]
1004359c:	0023      	movs	r3, r4
1004359e:	f000 fc89 	bl	10043eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
100435a2:	697a      	ldr	r2, [r7, #20]
100435a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
100435a6:	68fb      	ldr	r3, [r7, #12]
100435a8:	0018      	movs	r0, r3
100435aa:	f000 fb01 	bl	10043bb0 <I2C_WaitOnTXISFlagUntilTimeout>
100435ae:	1e03      	subs	r3, r0, #0
100435b0:	d001      	beq.n	100435b6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
100435b2:	2301      	movs	r3, #1
100435b4:	e081      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
100435b6:	68fb      	ldr	r3, [r7, #12]
100435b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100435ba:	781a      	ldrb	r2, [r3, #0]
100435bc:	68fb      	ldr	r3, [r7, #12]
100435be:	681b      	ldr	r3, [r3, #0]
100435c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100435c2:	68fb      	ldr	r3, [r7, #12]
100435c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100435c6:	1c5a      	adds	r2, r3, #1
100435c8:	68fb      	ldr	r3, [r7, #12]
100435ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
100435cc:	68fb      	ldr	r3, [r7, #12]
100435ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100435d0:	b29b      	uxth	r3, r3
100435d2:	3b01      	subs	r3, #1
100435d4:	b29a      	uxth	r2, r3
100435d6:	68fb      	ldr	r3, [r7, #12]
100435d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
100435da:	68fb      	ldr	r3, [r7, #12]
100435dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100435de:	3b01      	subs	r3, #1
100435e0:	b29a      	uxth	r2, r3
100435e2:	68fb      	ldr	r3, [r7, #12]
100435e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100435e6:	68fb      	ldr	r3, [r7, #12]
100435e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100435ea:	b29b      	uxth	r3, r3
100435ec:	2b00      	cmp	r3, #0
100435ee:	d03a      	beq.n	10043666 <HAL_I2C_Mem_Write+0x1fa>
100435f0:	68fb      	ldr	r3, [r7, #12]
100435f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100435f4:	2b00      	cmp	r3, #0
100435f6:	d136      	bne.n	10043666 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
100435f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100435fa:	68f8      	ldr	r0, [r7, #12]
100435fc:	697b      	ldr	r3, [r7, #20]
100435fe:	9300      	str	r3, [sp, #0]
10043600:	0013      	movs	r3, r2
10043602:	2200      	movs	r2, #0
10043604:	2180      	movs	r1, #128	@ 0x80
10043606:	f000 fa7b 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
1004360a:	1e03      	subs	r3, r0, #0
1004360c:	d001      	beq.n	10043612 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
1004360e:	2301      	movs	r3, #1
10043610:	e053      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10043612:	68fb      	ldr	r3, [r7, #12]
10043614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10043616:	b29b      	uxth	r3, r3
10043618:	2bff      	cmp	r3, #255	@ 0xff
1004361a:	d911      	bls.n	10043640 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
1004361c:	68fb      	ldr	r3, [r7, #12]
1004361e:	22ff      	movs	r2, #255	@ 0xff
10043620:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
10043622:	68fb      	ldr	r3, [r7, #12]
10043624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10043626:	b2da      	uxtb	r2, r3
10043628:	2380      	movs	r3, #128	@ 0x80
1004362a:	045c      	lsls	r4, r3, #17
1004362c:	230a      	movs	r3, #10
1004362e:	18fb      	adds	r3, r7, r3
10043630:	8819      	ldrh	r1, [r3, #0]
10043632:	68f8      	ldr	r0, [r7, #12]
10043634:	2300      	movs	r3, #0
10043636:	9300      	str	r3, [sp, #0]
10043638:	0023      	movs	r3, r4
1004363a:	f000 fc3b 	bl	10043eb4 <I2C_TransferConfig>
1004363e:	e012      	b.n	10043666 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
10043640:	68fb      	ldr	r3, [r7, #12]
10043642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10043644:	b29a      	uxth	r2, r3
10043646:	68fb      	ldr	r3, [r7, #12]
10043648:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
1004364a:	68fb      	ldr	r3, [r7, #12]
1004364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004364e:	b2da      	uxtb	r2, r3
10043650:	2380      	movs	r3, #128	@ 0x80
10043652:	049c      	lsls	r4, r3, #18
10043654:	230a      	movs	r3, #10
10043656:	18fb      	adds	r3, r7, r3
10043658:	8819      	ldrh	r1, [r3, #0]
1004365a:	68f8      	ldr	r0, [r7, #12]
1004365c:	2300      	movs	r3, #0
1004365e:	9300      	str	r3, [sp, #0]
10043660:	0023      	movs	r3, r4
10043662:	f000 fc27 	bl	10043eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
10043666:	68fb      	ldr	r3, [r7, #12]
10043668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004366a:	b29b      	uxth	r3, r3
1004366c:	2b00      	cmp	r3, #0
1004366e:	d198      	bne.n	100435a2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10043670:	697a      	ldr	r2, [r7, #20]
10043672:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10043674:	68fb      	ldr	r3, [r7, #12]
10043676:	0018      	movs	r0, r3
10043678:	f000 fae0 	bl	10043c3c <I2C_WaitOnSTOPFlagUntilTimeout>
1004367c:	1e03      	subs	r3, r0, #0
1004367e:	d001      	beq.n	10043684 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
10043680:	2301      	movs	r3, #1
10043682:	e01a      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10043684:	68fb      	ldr	r3, [r7, #12]
10043686:	681b      	ldr	r3, [r3, #0]
10043688:	2220      	movs	r2, #32
1004368a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
1004368c:	68fb      	ldr	r3, [r7, #12]
1004368e:	681b      	ldr	r3, [r3, #0]
10043690:	685a      	ldr	r2, [r3, #4]
10043692:	68fb      	ldr	r3, [r7, #12]
10043694:	681b      	ldr	r3, [r3, #0]
10043696:	490b      	ldr	r1, [pc, #44]	@ (100436c4 <HAL_I2C_Mem_Write+0x258>)
10043698:	400a      	ands	r2, r1
1004369a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
1004369c:	68fb      	ldr	r3, [r7, #12]
1004369e:	2241      	movs	r2, #65	@ 0x41
100436a0:	2120      	movs	r1, #32
100436a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
100436a4:	68fb      	ldr	r3, [r7, #12]
100436a6:	2242      	movs	r2, #66	@ 0x42
100436a8:	2100      	movs	r1, #0
100436aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100436ac:	68fb      	ldr	r3, [r7, #12]
100436ae:	2240      	movs	r2, #64	@ 0x40
100436b0:	2100      	movs	r1, #0
100436b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
100436b4:	2300      	movs	r3, #0
100436b6:	e000      	b.n	100436ba <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
100436b8:	2302      	movs	r3, #2
  }
}
100436ba:	0018      	movs	r0, r3
100436bc:	46bd      	mov	sp, r7
100436be:	b007      	add	sp, #28
100436c0:	bd90      	pop	{r4, r7, pc}
100436c2:	46c0      	nop			@ (mov r8, r8)
100436c4:	fe00e800 	.word	0xfe00e800

100436c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100436c8:	b590      	push	{r4, r7, lr}
100436ca:	b089      	sub	sp, #36	@ 0x24
100436cc:	af02      	add	r7, sp, #8
100436ce:	60f8      	str	r0, [r7, #12]
100436d0:	000c      	movs	r4, r1
100436d2:	0010      	movs	r0, r2
100436d4:	0019      	movs	r1, r3
100436d6:	230a      	movs	r3, #10
100436d8:	18fb      	adds	r3, r7, r3
100436da:	1c22      	adds	r2, r4, #0
100436dc:	801a      	strh	r2, [r3, #0]
100436de:	2308      	movs	r3, #8
100436e0:	18fb      	adds	r3, r7, r3
100436e2:	1c02      	adds	r2, r0, #0
100436e4:	801a      	strh	r2, [r3, #0]
100436e6:	1dbb      	adds	r3, r7, #6
100436e8:	1c0a      	adds	r2, r1, #0
100436ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100436ec:	68fb      	ldr	r3, [r7, #12]
100436ee:	2241      	movs	r2, #65	@ 0x41
100436f0:	5c9b      	ldrb	r3, [r3, r2]
100436f2:	b2db      	uxtb	r3, r3
100436f4:	2b20      	cmp	r3, #32
100436f6:	d000      	beq.n	100436fa <HAL_I2C_Mem_Read+0x32>
100436f8:	e110      	b.n	1004391c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
100436fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100436fc:	2b00      	cmp	r3, #0
100436fe:	d004      	beq.n	1004370a <HAL_I2C_Mem_Read+0x42>
10043700:	232c      	movs	r3, #44	@ 0x2c
10043702:	18fb      	adds	r3, r7, r3
10043704:	881b      	ldrh	r3, [r3, #0]
10043706:	2b00      	cmp	r3, #0
10043708:	d105      	bne.n	10043716 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
1004370a:	68fb      	ldr	r3, [r7, #12]
1004370c:	2280      	movs	r2, #128	@ 0x80
1004370e:	0092      	lsls	r2, r2, #2
10043710:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10043712:	2301      	movs	r3, #1
10043714:	e103      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10043716:	68fb      	ldr	r3, [r7, #12]
10043718:	2240      	movs	r2, #64	@ 0x40
1004371a:	5c9b      	ldrb	r3, [r3, r2]
1004371c:	2b01      	cmp	r3, #1
1004371e:	d101      	bne.n	10043724 <HAL_I2C_Mem_Read+0x5c>
10043720:	2302      	movs	r3, #2
10043722:	e0fc      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
10043724:	68fb      	ldr	r3, [r7, #12]
10043726:	2240      	movs	r2, #64	@ 0x40
10043728:	2101      	movs	r1, #1
1004372a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
1004372c:	f7ff fb66 	bl	10042dfc <HAL_GetTick>
10043730:	0003      	movs	r3, r0
10043732:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
10043734:	2380      	movs	r3, #128	@ 0x80
10043736:	0219      	lsls	r1, r3, #8
10043738:	68f8      	ldr	r0, [r7, #12]
1004373a:	697b      	ldr	r3, [r7, #20]
1004373c:	9300      	str	r3, [sp, #0]
1004373e:	2319      	movs	r3, #25
10043740:	2201      	movs	r2, #1
10043742:	f000 f9dd 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
10043746:	1e03      	subs	r3, r0, #0
10043748:	d001      	beq.n	1004374e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
1004374a:	2301      	movs	r3, #1
1004374c:	e0e7      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
1004374e:	68fb      	ldr	r3, [r7, #12]
10043750:	2241      	movs	r2, #65	@ 0x41
10043752:	2122      	movs	r1, #34	@ 0x22
10043754:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10043756:	68fb      	ldr	r3, [r7, #12]
10043758:	2242      	movs	r2, #66	@ 0x42
1004375a:	2140      	movs	r1, #64	@ 0x40
1004375c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
1004375e:	68fb      	ldr	r3, [r7, #12]
10043760:	2200      	movs	r2, #0
10043762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
10043764:	68fb      	ldr	r3, [r7, #12]
10043766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10043768:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
1004376a:	68fb      	ldr	r3, [r7, #12]
1004376c:	222c      	movs	r2, #44	@ 0x2c
1004376e:	18ba      	adds	r2, r7, r2
10043770:	8812      	ldrh	r2, [r2, #0]
10043772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
10043774:	68fb      	ldr	r3, [r7, #12]
10043776:	2200      	movs	r2, #0
10043778:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
1004377a:	1dbb      	adds	r3, r7, #6
1004377c:	881c      	ldrh	r4, [r3, #0]
1004377e:	2308      	movs	r3, #8
10043780:	18fb      	adds	r3, r7, r3
10043782:	881a      	ldrh	r2, [r3, #0]
10043784:	230a      	movs	r3, #10
10043786:	18fb      	adds	r3, r7, r3
10043788:	8819      	ldrh	r1, [r3, #0]
1004378a:	68f8      	ldr	r0, [r7, #12]
1004378c:	697b      	ldr	r3, [r7, #20]
1004378e:	9301      	str	r3, [sp, #4]
10043790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10043792:	9300      	str	r3, [sp, #0]
10043794:	0023      	movs	r3, r4
10043796:	f000 f92f 	bl	100439f8 <I2C_RequestMemoryRead>
1004379a:	1e03      	subs	r3, r0, #0
1004379c:	d005      	beq.n	100437aa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004379e:	68fb      	ldr	r3, [r7, #12]
100437a0:	2240      	movs	r2, #64	@ 0x40
100437a2:	2100      	movs	r1, #0
100437a4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
100437a6:	2301      	movs	r3, #1
100437a8:	e0b9      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
100437aa:	68fb      	ldr	r3, [r7, #12]
100437ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100437ae:	b29b      	uxth	r3, r3
100437b0:	2bff      	cmp	r3, #255	@ 0xff
100437b2:	d911      	bls.n	100437d8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
100437b4:	68fb      	ldr	r3, [r7, #12]
100437b6:	22ff      	movs	r2, #255	@ 0xff
100437b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
100437ba:	68fb      	ldr	r3, [r7, #12]
100437bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100437be:	b2da      	uxtb	r2, r3
100437c0:	2380      	movs	r3, #128	@ 0x80
100437c2:	045c      	lsls	r4, r3, #17
100437c4:	230a      	movs	r3, #10
100437c6:	18fb      	adds	r3, r7, r3
100437c8:	8819      	ldrh	r1, [r3, #0]
100437ca:	68f8      	ldr	r0, [r7, #12]
100437cc:	4b56      	ldr	r3, [pc, #344]	@ (10043928 <HAL_I2C_Mem_Read+0x260>)
100437ce:	9300      	str	r3, [sp, #0]
100437d0:	0023      	movs	r3, r4
100437d2:	f000 fb6f 	bl	10043eb4 <I2C_TransferConfig>
100437d6:	e012      	b.n	100437fe <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
100437d8:	68fb      	ldr	r3, [r7, #12]
100437da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100437dc:	b29a      	uxth	r2, r3
100437de:	68fb      	ldr	r3, [r7, #12]
100437e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
100437e2:	68fb      	ldr	r3, [r7, #12]
100437e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100437e6:	b2da      	uxtb	r2, r3
100437e8:	2380      	movs	r3, #128	@ 0x80
100437ea:	049c      	lsls	r4, r3, #18
100437ec:	230a      	movs	r3, #10
100437ee:	18fb      	adds	r3, r7, r3
100437f0:	8819      	ldrh	r1, [r3, #0]
100437f2:	68f8      	ldr	r0, [r7, #12]
100437f4:	4b4c      	ldr	r3, [pc, #304]	@ (10043928 <HAL_I2C_Mem_Read+0x260>)
100437f6:	9300      	str	r3, [sp, #0]
100437f8:	0023      	movs	r3, r4
100437fa:	f000 fb5b 	bl	10043eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
100437fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10043800:	68f8      	ldr	r0, [r7, #12]
10043802:	697b      	ldr	r3, [r7, #20]
10043804:	9300      	str	r3, [sp, #0]
10043806:	0013      	movs	r3, r2
10043808:	2200      	movs	r2, #0
1004380a:	2104      	movs	r1, #4
1004380c:	f000 f978 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
10043810:	1e03      	subs	r3, r0, #0
10043812:	d001      	beq.n	10043818 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
10043814:	2301      	movs	r3, #1
10043816:	e082      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10043818:	68fb      	ldr	r3, [r7, #12]
1004381a:	681b      	ldr	r3, [r3, #0]
1004381c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004381e:	68fb      	ldr	r3, [r7, #12]
10043820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10043822:	b2d2      	uxtb	r2, r2
10043824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10043826:	68fb      	ldr	r3, [r7, #12]
10043828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004382a:	1c5a      	adds	r2, r3, #1
1004382c:	68fb      	ldr	r3, [r7, #12]
1004382e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10043830:	68fb      	ldr	r3, [r7, #12]
10043832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10043834:	3b01      	subs	r3, #1
10043836:	b29a      	uxth	r2, r3
10043838:	68fb      	ldr	r3, [r7, #12]
1004383a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1004383c:	68fb      	ldr	r3, [r7, #12]
1004383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10043840:	b29b      	uxth	r3, r3
10043842:	3b01      	subs	r3, #1
10043844:	b29a      	uxth	r2, r3
10043846:	68fb      	ldr	r3, [r7, #12]
10043848:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
1004384a:	68fb      	ldr	r3, [r7, #12]
1004384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004384e:	b29b      	uxth	r3, r3
10043850:	2b00      	cmp	r3, #0
10043852:	d03a      	beq.n	100438ca <HAL_I2C_Mem_Read+0x202>
10043854:	68fb      	ldr	r3, [r7, #12]
10043856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10043858:	2b00      	cmp	r3, #0
1004385a:	d136      	bne.n	100438ca <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
1004385c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004385e:	68f8      	ldr	r0, [r7, #12]
10043860:	697b      	ldr	r3, [r7, #20]
10043862:	9300      	str	r3, [sp, #0]
10043864:	0013      	movs	r3, r2
10043866:	2200      	movs	r2, #0
10043868:	2180      	movs	r1, #128	@ 0x80
1004386a:	f000 f949 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
1004386e:	1e03      	subs	r3, r0, #0
10043870:	d001      	beq.n	10043876 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
10043872:	2301      	movs	r3, #1
10043874:	e053      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10043876:	68fb      	ldr	r3, [r7, #12]
10043878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004387a:	b29b      	uxth	r3, r3
1004387c:	2bff      	cmp	r3, #255	@ 0xff
1004387e:	d911      	bls.n	100438a4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
10043880:	68fb      	ldr	r3, [r7, #12]
10043882:	22ff      	movs	r2, #255	@ 0xff
10043884:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
10043886:	68fb      	ldr	r3, [r7, #12]
10043888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004388a:	b2da      	uxtb	r2, r3
1004388c:	2380      	movs	r3, #128	@ 0x80
1004388e:	045c      	lsls	r4, r3, #17
10043890:	230a      	movs	r3, #10
10043892:	18fb      	adds	r3, r7, r3
10043894:	8819      	ldrh	r1, [r3, #0]
10043896:	68f8      	ldr	r0, [r7, #12]
10043898:	2300      	movs	r3, #0
1004389a:	9300      	str	r3, [sp, #0]
1004389c:	0023      	movs	r3, r4
1004389e:	f000 fb09 	bl	10043eb4 <I2C_TransferConfig>
100438a2:	e012      	b.n	100438ca <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
100438a4:	68fb      	ldr	r3, [r7, #12]
100438a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100438a8:	b29a      	uxth	r2, r3
100438aa:	68fb      	ldr	r3, [r7, #12]
100438ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
100438ae:	68fb      	ldr	r3, [r7, #12]
100438b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100438b2:	b2da      	uxtb	r2, r3
100438b4:	2380      	movs	r3, #128	@ 0x80
100438b6:	049c      	lsls	r4, r3, #18
100438b8:	230a      	movs	r3, #10
100438ba:	18fb      	adds	r3, r7, r3
100438bc:	8819      	ldrh	r1, [r3, #0]
100438be:	68f8      	ldr	r0, [r7, #12]
100438c0:	2300      	movs	r3, #0
100438c2:	9300      	str	r3, [sp, #0]
100438c4:	0023      	movs	r3, r4
100438c6:	f000 faf5 	bl	10043eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
100438ca:	68fb      	ldr	r3, [r7, #12]
100438cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100438ce:	b29b      	uxth	r3, r3
100438d0:	2b00      	cmp	r3, #0
100438d2:	d194      	bne.n	100437fe <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
100438d4:	697a      	ldr	r2, [r7, #20]
100438d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
100438d8:	68fb      	ldr	r3, [r7, #12]
100438da:	0018      	movs	r0, r3
100438dc:	f000 f9ae 	bl	10043c3c <I2C_WaitOnSTOPFlagUntilTimeout>
100438e0:	1e03      	subs	r3, r0, #0
100438e2:	d001      	beq.n	100438e8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
100438e4:	2301      	movs	r3, #1
100438e6:	e01a      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100438e8:	68fb      	ldr	r3, [r7, #12]
100438ea:	681b      	ldr	r3, [r3, #0]
100438ec:	2220      	movs	r2, #32
100438ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
100438f0:	68fb      	ldr	r3, [r7, #12]
100438f2:	681b      	ldr	r3, [r3, #0]
100438f4:	685a      	ldr	r2, [r3, #4]
100438f6:	68fb      	ldr	r3, [r7, #12]
100438f8:	681b      	ldr	r3, [r3, #0]
100438fa:	490c      	ldr	r1, [pc, #48]	@ (1004392c <HAL_I2C_Mem_Read+0x264>)
100438fc:	400a      	ands	r2, r1
100438fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
10043900:	68fb      	ldr	r3, [r7, #12]
10043902:	2241      	movs	r2, #65	@ 0x41
10043904:	2120      	movs	r1, #32
10043906:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
10043908:	68fb      	ldr	r3, [r7, #12]
1004390a:	2242      	movs	r2, #66	@ 0x42
1004390c:	2100      	movs	r1, #0
1004390e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10043910:	68fb      	ldr	r3, [r7, #12]
10043912:	2240      	movs	r2, #64	@ 0x40
10043914:	2100      	movs	r1, #0
10043916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10043918:	2300      	movs	r3, #0
1004391a:	e000      	b.n	1004391e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
1004391c:	2302      	movs	r3, #2
  }
}
1004391e:	0018      	movs	r0, r3
10043920:	46bd      	mov	sp, r7
10043922:	b007      	add	sp, #28
10043924:	bd90      	pop	{r4, r7, pc}
10043926:	46c0      	nop			@ (mov r8, r8)
10043928:	80002400 	.word	0x80002400
1004392c:	fe00e800 	.word	0xfe00e800

10043930 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
10043930:	b5b0      	push	{r4, r5, r7, lr}
10043932:	b086      	sub	sp, #24
10043934:	af02      	add	r7, sp, #8
10043936:	60f8      	str	r0, [r7, #12]
10043938:	000c      	movs	r4, r1
1004393a:	0010      	movs	r0, r2
1004393c:	0019      	movs	r1, r3
1004393e:	250a      	movs	r5, #10
10043940:	197b      	adds	r3, r7, r5
10043942:	1c22      	adds	r2, r4, #0
10043944:	801a      	strh	r2, [r3, #0]
10043946:	2308      	movs	r3, #8
10043948:	18fb      	adds	r3, r7, r3
1004394a:	1c02      	adds	r2, r0, #0
1004394c:	801a      	strh	r2, [r3, #0]
1004394e:	1dbb      	adds	r3, r7, #6
10043950:	1c0a      	adds	r2, r1, #0
10043952:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10043954:	1dbb      	adds	r3, r7, #6
10043956:	881b      	ldrh	r3, [r3, #0]
10043958:	b2da      	uxtb	r2, r3
1004395a:	2380      	movs	r3, #128	@ 0x80
1004395c:	045c      	lsls	r4, r3, #17
1004395e:	197b      	adds	r3, r7, r5
10043960:	8819      	ldrh	r1, [r3, #0]
10043962:	68f8      	ldr	r0, [r7, #12]
10043964:	4b23      	ldr	r3, [pc, #140]	@ (100439f4 <I2C_RequestMemoryWrite+0xc4>)
10043966:	9300      	str	r3, [sp, #0]
10043968:	0023      	movs	r3, r4
1004396a:	f000 faa3 	bl	10043eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
1004396e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043970:	6a39      	ldr	r1, [r7, #32]
10043972:	68fb      	ldr	r3, [r7, #12]
10043974:	0018      	movs	r0, r3
10043976:	f000 f91b 	bl	10043bb0 <I2C_WaitOnTXISFlagUntilTimeout>
1004397a:	1e03      	subs	r3, r0, #0
1004397c:	d001      	beq.n	10043982 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
1004397e:	2301      	movs	r3, #1
10043980:	e033      	b.n	100439ea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10043982:	1dbb      	adds	r3, r7, #6
10043984:	881b      	ldrh	r3, [r3, #0]
10043986:	2b01      	cmp	r3, #1
10043988:	d107      	bne.n	1004399a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
1004398a:	2308      	movs	r3, #8
1004398c:	18fb      	adds	r3, r7, r3
1004398e:	881b      	ldrh	r3, [r3, #0]
10043990:	b2da      	uxtb	r2, r3
10043992:	68fb      	ldr	r3, [r7, #12]
10043994:	681b      	ldr	r3, [r3, #0]
10043996:	629a      	str	r2, [r3, #40]	@ 0x28
10043998:	e019      	b.n	100439ce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
1004399a:	2308      	movs	r3, #8
1004399c:	18fb      	adds	r3, r7, r3
1004399e:	881b      	ldrh	r3, [r3, #0]
100439a0:	0a1b      	lsrs	r3, r3, #8
100439a2:	b29b      	uxth	r3, r3
100439a4:	b2da      	uxtb	r2, r3
100439a6:	68fb      	ldr	r3, [r7, #12]
100439a8:	681b      	ldr	r3, [r3, #0]
100439aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
100439ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100439ae:	6a39      	ldr	r1, [r7, #32]
100439b0:	68fb      	ldr	r3, [r7, #12]
100439b2:	0018      	movs	r0, r3
100439b4:	f000 f8fc 	bl	10043bb0 <I2C_WaitOnTXISFlagUntilTimeout>
100439b8:	1e03      	subs	r3, r0, #0
100439ba:	d001      	beq.n	100439c0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
100439bc:	2301      	movs	r3, #1
100439be:	e014      	b.n	100439ea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
100439c0:	2308      	movs	r3, #8
100439c2:	18fb      	adds	r3, r7, r3
100439c4:	881b      	ldrh	r3, [r3, #0]
100439c6:	b2da      	uxtb	r2, r3
100439c8:	68fb      	ldr	r3, [r7, #12]
100439ca:	681b      	ldr	r3, [r3, #0]
100439cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
100439ce:	6a3a      	ldr	r2, [r7, #32]
100439d0:	68f8      	ldr	r0, [r7, #12]
100439d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100439d4:	9300      	str	r3, [sp, #0]
100439d6:	0013      	movs	r3, r2
100439d8:	2200      	movs	r2, #0
100439da:	2180      	movs	r1, #128	@ 0x80
100439dc:	f000 f890 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
100439e0:	1e03      	subs	r3, r0, #0
100439e2:	d001      	beq.n	100439e8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
100439e4:	2301      	movs	r3, #1
100439e6:	e000      	b.n	100439ea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
100439e8:	2300      	movs	r3, #0
}
100439ea:	0018      	movs	r0, r3
100439ec:	46bd      	mov	sp, r7
100439ee:	b004      	add	sp, #16
100439f0:	bdb0      	pop	{r4, r5, r7, pc}
100439f2:	46c0      	nop			@ (mov r8, r8)
100439f4:	80002000 	.word	0x80002000

100439f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
100439f8:	b5b0      	push	{r4, r5, r7, lr}
100439fa:	b086      	sub	sp, #24
100439fc:	af02      	add	r7, sp, #8
100439fe:	60f8      	str	r0, [r7, #12]
10043a00:	000c      	movs	r4, r1
10043a02:	0010      	movs	r0, r2
10043a04:	0019      	movs	r1, r3
10043a06:	250a      	movs	r5, #10
10043a08:	197b      	adds	r3, r7, r5
10043a0a:	1c22      	adds	r2, r4, #0
10043a0c:	801a      	strh	r2, [r3, #0]
10043a0e:	2308      	movs	r3, #8
10043a10:	18fb      	adds	r3, r7, r3
10043a12:	1c02      	adds	r2, r0, #0
10043a14:	801a      	strh	r2, [r3, #0]
10043a16:	1dbb      	adds	r3, r7, #6
10043a18:	1c0a      	adds	r2, r1, #0
10043a1a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
10043a1c:	1dbb      	adds	r3, r7, #6
10043a1e:	881b      	ldrh	r3, [r3, #0]
10043a20:	b2da      	uxtb	r2, r3
10043a22:	197b      	adds	r3, r7, r5
10043a24:	8819      	ldrh	r1, [r3, #0]
10043a26:	68f8      	ldr	r0, [r7, #12]
10043a28:	4b23      	ldr	r3, [pc, #140]	@ (10043ab8 <I2C_RequestMemoryRead+0xc0>)
10043a2a:	9300      	str	r3, [sp, #0]
10043a2c:	2300      	movs	r3, #0
10043a2e:	f000 fa41 	bl	10043eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10043a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043a34:	6a39      	ldr	r1, [r7, #32]
10043a36:	68fb      	ldr	r3, [r7, #12]
10043a38:	0018      	movs	r0, r3
10043a3a:	f000 f8b9 	bl	10043bb0 <I2C_WaitOnTXISFlagUntilTimeout>
10043a3e:	1e03      	subs	r3, r0, #0
10043a40:	d001      	beq.n	10043a46 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
10043a42:	2301      	movs	r3, #1
10043a44:	e033      	b.n	10043aae <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10043a46:	1dbb      	adds	r3, r7, #6
10043a48:	881b      	ldrh	r3, [r3, #0]
10043a4a:	2b01      	cmp	r3, #1
10043a4c:	d107      	bne.n	10043a5e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10043a4e:	2308      	movs	r3, #8
10043a50:	18fb      	adds	r3, r7, r3
10043a52:	881b      	ldrh	r3, [r3, #0]
10043a54:	b2da      	uxtb	r2, r3
10043a56:	68fb      	ldr	r3, [r7, #12]
10043a58:	681b      	ldr	r3, [r3, #0]
10043a5a:	629a      	str	r2, [r3, #40]	@ 0x28
10043a5c:	e019      	b.n	10043a92 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10043a5e:	2308      	movs	r3, #8
10043a60:	18fb      	adds	r3, r7, r3
10043a62:	881b      	ldrh	r3, [r3, #0]
10043a64:	0a1b      	lsrs	r3, r3, #8
10043a66:	b29b      	uxth	r3, r3
10043a68:	b2da      	uxtb	r2, r3
10043a6a:	68fb      	ldr	r3, [r7, #12]
10043a6c:	681b      	ldr	r3, [r3, #0]
10043a6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10043a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043a72:	6a39      	ldr	r1, [r7, #32]
10043a74:	68fb      	ldr	r3, [r7, #12]
10043a76:	0018      	movs	r0, r3
10043a78:	f000 f89a 	bl	10043bb0 <I2C_WaitOnTXISFlagUntilTimeout>
10043a7c:	1e03      	subs	r3, r0, #0
10043a7e:	d001      	beq.n	10043a84 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
10043a80:	2301      	movs	r3, #1
10043a82:	e014      	b.n	10043aae <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10043a84:	2308      	movs	r3, #8
10043a86:	18fb      	adds	r3, r7, r3
10043a88:	881b      	ldrh	r3, [r3, #0]
10043a8a:	b2da      	uxtb	r2, r3
10043a8c:	68fb      	ldr	r3, [r7, #12]
10043a8e:	681b      	ldr	r3, [r3, #0]
10043a90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
10043a92:	6a3a      	ldr	r2, [r7, #32]
10043a94:	68f8      	ldr	r0, [r7, #12]
10043a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043a98:	9300      	str	r3, [sp, #0]
10043a9a:	0013      	movs	r3, r2
10043a9c:	2200      	movs	r2, #0
10043a9e:	2140      	movs	r1, #64	@ 0x40
10043aa0:	f000 f82e 	bl	10043b00 <I2C_WaitOnFlagUntilTimeout>
10043aa4:	1e03      	subs	r3, r0, #0
10043aa6:	d001      	beq.n	10043aac <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
10043aa8:	2301      	movs	r3, #1
10043aaa:	e000      	b.n	10043aae <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
10043aac:	2300      	movs	r3, #0
}
10043aae:	0018      	movs	r0, r3
10043ab0:	46bd      	mov	sp, r7
10043ab2:	b004      	add	sp, #16
10043ab4:	bdb0      	pop	{r4, r5, r7, pc}
10043ab6:	46c0      	nop			@ (mov r8, r8)
10043ab8:	80002000 	.word	0x80002000

10043abc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10043abc:	b580      	push	{r7, lr}
10043abe:	b082      	sub	sp, #8
10043ac0:	af00      	add	r7, sp, #0
10043ac2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10043ac4:	687b      	ldr	r3, [r7, #4]
10043ac6:	681b      	ldr	r3, [r3, #0]
10043ac8:	699b      	ldr	r3, [r3, #24]
10043aca:	2202      	movs	r2, #2
10043acc:	4013      	ands	r3, r2
10043ace:	2b02      	cmp	r3, #2
10043ad0:	d103      	bne.n	10043ada <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10043ad2:	687b      	ldr	r3, [r7, #4]
10043ad4:	681b      	ldr	r3, [r3, #0]
10043ad6:	2200      	movs	r2, #0
10043ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10043ada:	687b      	ldr	r3, [r7, #4]
10043adc:	681b      	ldr	r3, [r3, #0]
10043ade:	699b      	ldr	r3, [r3, #24]
10043ae0:	2201      	movs	r2, #1
10043ae2:	4013      	ands	r3, r2
10043ae4:	2b01      	cmp	r3, #1
10043ae6:	d007      	beq.n	10043af8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10043ae8:	687b      	ldr	r3, [r7, #4]
10043aea:	681b      	ldr	r3, [r3, #0]
10043aec:	699a      	ldr	r2, [r3, #24]
10043aee:	687b      	ldr	r3, [r7, #4]
10043af0:	681b      	ldr	r3, [r3, #0]
10043af2:	2101      	movs	r1, #1
10043af4:	430a      	orrs	r2, r1
10043af6:	619a      	str	r2, [r3, #24]
  }
}
10043af8:	46c0      	nop			@ (mov r8, r8)
10043afa:	46bd      	mov	sp, r7
10043afc:	b002      	add	sp, #8
10043afe:	bd80      	pop	{r7, pc}

10043b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
10043b00:	b580      	push	{r7, lr}
10043b02:	b084      	sub	sp, #16
10043b04:	af00      	add	r7, sp, #0
10043b06:	60f8      	str	r0, [r7, #12]
10043b08:	60b9      	str	r1, [r7, #8]
10043b0a:	603b      	str	r3, [r7, #0]
10043b0c:	1dfb      	adds	r3, r7, #7
10043b0e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10043b10:	e03a      	b.n	10043b88 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10043b12:	69ba      	ldr	r2, [r7, #24]
10043b14:	6839      	ldr	r1, [r7, #0]
10043b16:	68fb      	ldr	r3, [r7, #12]
10043b18:	0018      	movs	r0, r3
10043b1a:	f000 f8d3 	bl	10043cc4 <I2C_IsErrorOccurred>
10043b1e:	1e03      	subs	r3, r0, #0
10043b20:	d001      	beq.n	10043b26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
10043b22:	2301      	movs	r3, #1
10043b24:	e040      	b.n	10043ba8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10043b26:	683b      	ldr	r3, [r7, #0]
10043b28:	3301      	adds	r3, #1
10043b2a:	d02d      	beq.n	10043b88 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10043b2c:	f7ff f966 	bl	10042dfc <HAL_GetTick>
10043b30:	0002      	movs	r2, r0
10043b32:	69bb      	ldr	r3, [r7, #24]
10043b34:	1ad3      	subs	r3, r2, r3
10043b36:	683a      	ldr	r2, [r7, #0]
10043b38:	429a      	cmp	r2, r3
10043b3a:	d302      	bcc.n	10043b42 <I2C_WaitOnFlagUntilTimeout+0x42>
10043b3c:	683b      	ldr	r3, [r7, #0]
10043b3e:	2b00      	cmp	r3, #0
10043b40:	d122      	bne.n	10043b88 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10043b42:	68fb      	ldr	r3, [r7, #12]
10043b44:	681b      	ldr	r3, [r3, #0]
10043b46:	699b      	ldr	r3, [r3, #24]
10043b48:	68ba      	ldr	r2, [r7, #8]
10043b4a:	4013      	ands	r3, r2
10043b4c:	68ba      	ldr	r2, [r7, #8]
10043b4e:	1ad3      	subs	r3, r2, r3
10043b50:	425a      	negs	r2, r3
10043b52:	4153      	adcs	r3, r2
10043b54:	b2db      	uxtb	r3, r3
10043b56:	001a      	movs	r2, r3
10043b58:	1dfb      	adds	r3, r7, #7
10043b5a:	781b      	ldrb	r3, [r3, #0]
10043b5c:	429a      	cmp	r2, r3
10043b5e:	d113      	bne.n	10043b88 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10043b60:	68fb      	ldr	r3, [r7, #12]
10043b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10043b64:	2220      	movs	r2, #32
10043b66:	431a      	orrs	r2, r3
10043b68:	68fb      	ldr	r3, [r7, #12]
10043b6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
10043b6c:	68fb      	ldr	r3, [r7, #12]
10043b6e:	2241      	movs	r2, #65	@ 0x41
10043b70:	2120      	movs	r1, #32
10043b72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
10043b74:	68fb      	ldr	r3, [r7, #12]
10043b76:	2242      	movs	r2, #66	@ 0x42
10043b78:	2100      	movs	r1, #0
10043b7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10043b7c:	68fb      	ldr	r3, [r7, #12]
10043b7e:	2240      	movs	r2, #64	@ 0x40
10043b80:	2100      	movs	r1, #0
10043b82:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
10043b84:	2301      	movs	r3, #1
10043b86:	e00f      	b.n	10043ba8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10043b88:	68fb      	ldr	r3, [r7, #12]
10043b8a:	681b      	ldr	r3, [r3, #0]
10043b8c:	699b      	ldr	r3, [r3, #24]
10043b8e:	68ba      	ldr	r2, [r7, #8]
10043b90:	4013      	ands	r3, r2
10043b92:	68ba      	ldr	r2, [r7, #8]
10043b94:	1ad3      	subs	r3, r2, r3
10043b96:	425a      	negs	r2, r3
10043b98:	4153      	adcs	r3, r2
10043b9a:	b2db      	uxtb	r3, r3
10043b9c:	001a      	movs	r2, r3
10043b9e:	1dfb      	adds	r3, r7, #7
10043ba0:	781b      	ldrb	r3, [r3, #0]
10043ba2:	429a      	cmp	r2, r3
10043ba4:	d0b5      	beq.n	10043b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10043ba6:	2300      	movs	r3, #0
}
10043ba8:	0018      	movs	r0, r3
10043baa:	46bd      	mov	sp, r7
10043bac:	b004      	add	sp, #16
10043bae:	bd80      	pop	{r7, pc}

10043bb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10043bb0:	b580      	push	{r7, lr}
10043bb2:	b084      	sub	sp, #16
10043bb4:	af00      	add	r7, sp, #0
10043bb6:	60f8      	str	r0, [r7, #12]
10043bb8:	60b9      	str	r1, [r7, #8]
10043bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10043bbc:	e032      	b.n	10043c24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10043bbe:	687a      	ldr	r2, [r7, #4]
10043bc0:	68b9      	ldr	r1, [r7, #8]
10043bc2:	68fb      	ldr	r3, [r7, #12]
10043bc4:	0018      	movs	r0, r3
10043bc6:	f000 f87d 	bl	10043cc4 <I2C_IsErrorOccurred>
10043bca:	1e03      	subs	r3, r0, #0
10043bcc:	d001      	beq.n	10043bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10043bce:	2301      	movs	r3, #1
10043bd0:	e030      	b.n	10043c34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10043bd2:	68bb      	ldr	r3, [r7, #8]
10043bd4:	3301      	adds	r3, #1
10043bd6:	d025      	beq.n	10043c24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10043bd8:	f7ff f910 	bl	10042dfc <HAL_GetTick>
10043bdc:	0002      	movs	r2, r0
10043bde:	687b      	ldr	r3, [r7, #4]
10043be0:	1ad3      	subs	r3, r2, r3
10043be2:	68ba      	ldr	r2, [r7, #8]
10043be4:	429a      	cmp	r2, r3
10043be6:	d302      	bcc.n	10043bee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
10043be8:	68bb      	ldr	r3, [r7, #8]
10043bea:	2b00      	cmp	r3, #0
10043bec:	d11a      	bne.n	10043c24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10043bee:	68fb      	ldr	r3, [r7, #12]
10043bf0:	681b      	ldr	r3, [r3, #0]
10043bf2:	699b      	ldr	r3, [r3, #24]
10043bf4:	2202      	movs	r2, #2
10043bf6:	4013      	ands	r3, r2
10043bf8:	2b02      	cmp	r3, #2
10043bfa:	d013      	beq.n	10043c24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10043bfc:	68fb      	ldr	r3, [r7, #12]
10043bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10043c00:	2220      	movs	r2, #32
10043c02:	431a      	orrs	r2, r3
10043c04:	68fb      	ldr	r3, [r7, #12]
10043c06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
10043c08:	68fb      	ldr	r3, [r7, #12]
10043c0a:	2241      	movs	r2, #65	@ 0x41
10043c0c:	2120      	movs	r1, #32
10043c0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
10043c10:	68fb      	ldr	r3, [r7, #12]
10043c12:	2242      	movs	r2, #66	@ 0x42
10043c14:	2100      	movs	r1, #0
10043c16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10043c18:	68fb      	ldr	r3, [r7, #12]
10043c1a:	2240      	movs	r2, #64	@ 0x40
10043c1c:	2100      	movs	r1, #0
10043c1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10043c20:	2301      	movs	r3, #1
10043c22:	e007      	b.n	10043c34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10043c24:	68fb      	ldr	r3, [r7, #12]
10043c26:	681b      	ldr	r3, [r3, #0]
10043c28:	699b      	ldr	r3, [r3, #24]
10043c2a:	2202      	movs	r2, #2
10043c2c:	4013      	ands	r3, r2
10043c2e:	2b02      	cmp	r3, #2
10043c30:	d1c5      	bne.n	10043bbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
10043c32:	2300      	movs	r3, #0
}
10043c34:	0018      	movs	r0, r3
10043c36:	46bd      	mov	sp, r7
10043c38:	b004      	add	sp, #16
10043c3a:	bd80      	pop	{r7, pc}

10043c3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10043c3c:	b580      	push	{r7, lr}
10043c3e:	b084      	sub	sp, #16
10043c40:	af00      	add	r7, sp, #0
10043c42:	60f8      	str	r0, [r7, #12]
10043c44:	60b9      	str	r1, [r7, #8]
10043c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10043c48:	e02f      	b.n	10043caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10043c4a:	687a      	ldr	r2, [r7, #4]
10043c4c:	68b9      	ldr	r1, [r7, #8]
10043c4e:	68fb      	ldr	r3, [r7, #12]
10043c50:	0018      	movs	r0, r3
10043c52:	f000 f837 	bl	10043cc4 <I2C_IsErrorOccurred>
10043c56:	1e03      	subs	r3, r0, #0
10043c58:	d001      	beq.n	10043c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10043c5a:	2301      	movs	r3, #1
10043c5c:	e02d      	b.n	10043cba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10043c5e:	f7ff f8cd 	bl	10042dfc <HAL_GetTick>
10043c62:	0002      	movs	r2, r0
10043c64:	687b      	ldr	r3, [r7, #4]
10043c66:	1ad3      	subs	r3, r2, r3
10043c68:	68ba      	ldr	r2, [r7, #8]
10043c6a:	429a      	cmp	r2, r3
10043c6c:	d302      	bcc.n	10043c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
10043c6e:	68bb      	ldr	r3, [r7, #8]
10043c70:	2b00      	cmp	r3, #0
10043c72:	d11a      	bne.n	10043caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10043c74:	68fb      	ldr	r3, [r7, #12]
10043c76:	681b      	ldr	r3, [r3, #0]
10043c78:	699b      	ldr	r3, [r3, #24]
10043c7a:	2220      	movs	r2, #32
10043c7c:	4013      	ands	r3, r2
10043c7e:	2b20      	cmp	r3, #32
10043c80:	d013      	beq.n	10043caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10043c82:	68fb      	ldr	r3, [r7, #12]
10043c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10043c86:	2220      	movs	r2, #32
10043c88:	431a      	orrs	r2, r3
10043c8a:	68fb      	ldr	r3, [r7, #12]
10043c8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
10043c8e:	68fb      	ldr	r3, [r7, #12]
10043c90:	2241      	movs	r2, #65	@ 0x41
10043c92:	2120      	movs	r1, #32
10043c94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
10043c96:	68fb      	ldr	r3, [r7, #12]
10043c98:	2242      	movs	r2, #66	@ 0x42
10043c9a:	2100      	movs	r1, #0
10043c9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10043c9e:	68fb      	ldr	r3, [r7, #12]
10043ca0:	2240      	movs	r2, #64	@ 0x40
10043ca2:	2100      	movs	r1, #0
10043ca4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
10043ca6:	2301      	movs	r3, #1
10043ca8:	e007      	b.n	10043cba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10043caa:	68fb      	ldr	r3, [r7, #12]
10043cac:	681b      	ldr	r3, [r3, #0]
10043cae:	699b      	ldr	r3, [r3, #24]
10043cb0:	2220      	movs	r2, #32
10043cb2:	4013      	ands	r3, r2
10043cb4:	2b20      	cmp	r3, #32
10043cb6:	d1c8      	bne.n	10043c4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
10043cb8:	2300      	movs	r3, #0
}
10043cba:	0018      	movs	r0, r3
10043cbc:	46bd      	mov	sp, r7
10043cbe:	b004      	add	sp, #16
10043cc0:	bd80      	pop	{r7, pc}
	...

10043cc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
10043cc4:	b580      	push	{r7, lr}
10043cc6:	b08a      	sub	sp, #40	@ 0x28
10043cc8:	af00      	add	r7, sp, #0
10043cca:	60f8      	str	r0, [r7, #12]
10043ccc:	60b9      	str	r1, [r7, #8]
10043cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10043cd0:	2327      	movs	r3, #39	@ 0x27
10043cd2:	18fb      	adds	r3, r7, r3
10043cd4:	2200      	movs	r2, #0
10043cd6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
10043cd8:	68fb      	ldr	r3, [r7, #12]
10043cda:	681b      	ldr	r3, [r3, #0]
10043cdc:	699b      	ldr	r3, [r3, #24]
10043cde:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
10043ce0:	2300      	movs	r3, #0
10043ce2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
10043ce4:	687b      	ldr	r3, [r7, #4]
10043ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
10043ce8:	69bb      	ldr	r3, [r7, #24]
10043cea:	2210      	movs	r2, #16
10043cec:	4013      	ands	r3, r2
10043cee:	d100      	bne.n	10043cf2 <I2C_IsErrorOccurred+0x2e>
10043cf0:	e079      	b.n	10043de6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10043cf2:	68fb      	ldr	r3, [r7, #12]
10043cf4:	681b      	ldr	r3, [r3, #0]
10043cf6:	2210      	movs	r2, #16
10043cf8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10043cfa:	e057      	b.n	10043dac <I2C_IsErrorOccurred+0xe8>
10043cfc:	2227      	movs	r2, #39	@ 0x27
10043cfe:	18bb      	adds	r3, r7, r2
10043d00:	18ba      	adds	r2, r7, r2
10043d02:	7812      	ldrb	r2, [r2, #0]
10043d04:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
10043d06:	68bb      	ldr	r3, [r7, #8]
10043d08:	3301      	adds	r3, #1
10043d0a:	d04f      	beq.n	10043dac <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
10043d0c:	f7ff f876 	bl	10042dfc <HAL_GetTick>
10043d10:	0002      	movs	r2, r0
10043d12:	69fb      	ldr	r3, [r7, #28]
10043d14:	1ad3      	subs	r3, r2, r3
10043d16:	68ba      	ldr	r2, [r7, #8]
10043d18:	429a      	cmp	r2, r3
10043d1a:	d302      	bcc.n	10043d22 <I2C_IsErrorOccurred+0x5e>
10043d1c:	68bb      	ldr	r3, [r7, #8]
10043d1e:	2b00      	cmp	r3, #0
10043d20:	d144      	bne.n	10043dac <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
10043d22:	68fb      	ldr	r3, [r7, #12]
10043d24:	681b      	ldr	r3, [r3, #0]
10043d26:	685a      	ldr	r2, [r3, #4]
10043d28:	2380      	movs	r3, #128	@ 0x80
10043d2a:	01db      	lsls	r3, r3, #7
10043d2c:	4013      	ands	r3, r2
10043d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
10043d30:	2013      	movs	r0, #19
10043d32:	183b      	adds	r3, r7, r0
10043d34:	68fa      	ldr	r2, [r7, #12]
10043d36:	2142      	movs	r1, #66	@ 0x42
10043d38:	5c52      	ldrb	r2, [r2, r1]
10043d3a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
10043d3c:	68fb      	ldr	r3, [r7, #12]
10043d3e:	681b      	ldr	r3, [r3, #0]
10043d40:	699a      	ldr	r2, [r3, #24]
10043d42:	2380      	movs	r3, #128	@ 0x80
10043d44:	021b      	lsls	r3, r3, #8
10043d46:	401a      	ands	r2, r3
10043d48:	2380      	movs	r3, #128	@ 0x80
10043d4a:	021b      	lsls	r3, r3, #8
10043d4c:	429a      	cmp	r2, r3
10043d4e:	d126      	bne.n	10043d9e <I2C_IsErrorOccurred+0xda>
10043d50:	697a      	ldr	r2, [r7, #20]
10043d52:	2380      	movs	r3, #128	@ 0x80
10043d54:	01db      	lsls	r3, r3, #7
10043d56:	429a      	cmp	r2, r3
10043d58:	d021      	beq.n	10043d9e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
10043d5a:	183b      	adds	r3, r7, r0
10043d5c:	781b      	ldrb	r3, [r3, #0]
10043d5e:	2b20      	cmp	r3, #32
10043d60:	d01d      	beq.n	10043d9e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
10043d62:	68fb      	ldr	r3, [r7, #12]
10043d64:	681b      	ldr	r3, [r3, #0]
10043d66:	685a      	ldr	r2, [r3, #4]
10043d68:	68fb      	ldr	r3, [r7, #12]
10043d6a:	681b      	ldr	r3, [r3, #0]
10043d6c:	2180      	movs	r1, #128	@ 0x80
10043d6e:	01c9      	lsls	r1, r1, #7
10043d70:	430a      	orrs	r2, r1
10043d72:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
10043d74:	f7ff f842 	bl	10042dfc <HAL_GetTick>
10043d78:	0003      	movs	r3, r0
10043d7a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10043d7c:	e00f      	b.n	10043d9e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
10043d7e:	f7ff f83d 	bl	10042dfc <HAL_GetTick>
10043d82:	0002      	movs	r2, r0
10043d84:	69fb      	ldr	r3, [r7, #28]
10043d86:	1ad3      	subs	r3, r2, r3
10043d88:	2b19      	cmp	r3, #25
10043d8a:	d908      	bls.n	10043d9e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
10043d8c:	6a3b      	ldr	r3, [r7, #32]
10043d8e:	2220      	movs	r2, #32
10043d90:	4313      	orrs	r3, r2
10043d92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
10043d94:	2327      	movs	r3, #39	@ 0x27
10043d96:	18fb      	adds	r3, r7, r3
10043d98:	2201      	movs	r2, #1
10043d9a:	701a      	strb	r2, [r3, #0]

              break;
10043d9c:	e006      	b.n	10043dac <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10043d9e:	68fb      	ldr	r3, [r7, #12]
10043da0:	681b      	ldr	r3, [r3, #0]
10043da2:	699b      	ldr	r3, [r3, #24]
10043da4:	2220      	movs	r2, #32
10043da6:	4013      	ands	r3, r2
10043da8:	2b20      	cmp	r3, #32
10043daa:	d1e8      	bne.n	10043d7e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10043dac:	68fb      	ldr	r3, [r7, #12]
10043dae:	681b      	ldr	r3, [r3, #0]
10043db0:	699b      	ldr	r3, [r3, #24]
10043db2:	2220      	movs	r2, #32
10043db4:	4013      	ands	r3, r2
10043db6:	2b20      	cmp	r3, #32
10043db8:	d004      	beq.n	10043dc4 <I2C_IsErrorOccurred+0x100>
10043dba:	2327      	movs	r3, #39	@ 0x27
10043dbc:	18fb      	adds	r3, r7, r3
10043dbe:	781b      	ldrb	r3, [r3, #0]
10043dc0:	2b00      	cmp	r3, #0
10043dc2:	d09b      	beq.n	10043cfc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
10043dc4:	2327      	movs	r3, #39	@ 0x27
10043dc6:	18fb      	adds	r3, r7, r3
10043dc8:	781b      	ldrb	r3, [r3, #0]
10043dca:	2b00      	cmp	r3, #0
10043dcc:	d103      	bne.n	10043dd6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10043dce:	68fb      	ldr	r3, [r7, #12]
10043dd0:	681b      	ldr	r3, [r3, #0]
10043dd2:	2220      	movs	r2, #32
10043dd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
10043dd6:	6a3b      	ldr	r3, [r7, #32]
10043dd8:	2204      	movs	r2, #4
10043dda:	4313      	orrs	r3, r2
10043ddc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
10043dde:	2327      	movs	r3, #39	@ 0x27
10043de0:	18fb      	adds	r3, r7, r3
10043de2:	2201      	movs	r2, #1
10043de4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
10043de6:	68fb      	ldr	r3, [r7, #12]
10043de8:	681b      	ldr	r3, [r3, #0]
10043dea:	699b      	ldr	r3, [r3, #24]
10043dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
10043dee:	69ba      	ldr	r2, [r7, #24]
10043df0:	2380      	movs	r3, #128	@ 0x80
10043df2:	005b      	lsls	r3, r3, #1
10043df4:	4013      	ands	r3, r2
10043df6:	d00c      	beq.n	10043e12 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
10043df8:	6a3b      	ldr	r3, [r7, #32]
10043dfa:	2201      	movs	r2, #1
10043dfc:	4313      	orrs	r3, r2
10043dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10043e00:	68fb      	ldr	r3, [r7, #12]
10043e02:	681b      	ldr	r3, [r3, #0]
10043e04:	2280      	movs	r2, #128	@ 0x80
10043e06:	0052      	lsls	r2, r2, #1
10043e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
10043e0a:	2327      	movs	r3, #39	@ 0x27
10043e0c:	18fb      	adds	r3, r7, r3
10043e0e:	2201      	movs	r2, #1
10043e10:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
10043e12:	69ba      	ldr	r2, [r7, #24]
10043e14:	2380      	movs	r3, #128	@ 0x80
10043e16:	00db      	lsls	r3, r3, #3
10043e18:	4013      	ands	r3, r2
10043e1a:	d00c      	beq.n	10043e36 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
10043e1c:	6a3b      	ldr	r3, [r7, #32]
10043e1e:	2208      	movs	r2, #8
10043e20:	4313      	orrs	r3, r2
10043e22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10043e24:	68fb      	ldr	r3, [r7, #12]
10043e26:	681b      	ldr	r3, [r3, #0]
10043e28:	2280      	movs	r2, #128	@ 0x80
10043e2a:	00d2      	lsls	r2, r2, #3
10043e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
10043e2e:	2327      	movs	r3, #39	@ 0x27
10043e30:	18fb      	adds	r3, r7, r3
10043e32:	2201      	movs	r2, #1
10043e34:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
10043e36:	69ba      	ldr	r2, [r7, #24]
10043e38:	2380      	movs	r3, #128	@ 0x80
10043e3a:	009b      	lsls	r3, r3, #2
10043e3c:	4013      	ands	r3, r2
10043e3e:	d00c      	beq.n	10043e5a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
10043e40:	6a3b      	ldr	r3, [r7, #32]
10043e42:	2202      	movs	r2, #2
10043e44:	4313      	orrs	r3, r2
10043e46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10043e48:	68fb      	ldr	r3, [r7, #12]
10043e4a:	681b      	ldr	r3, [r3, #0]
10043e4c:	2280      	movs	r2, #128	@ 0x80
10043e4e:	0092      	lsls	r2, r2, #2
10043e50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
10043e52:	2327      	movs	r3, #39	@ 0x27
10043e54:	18fb      	adds	r3, r7, r3
10043e56:	2201      	movs	r2, #1
10043e58:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
10043e5a:	2327      	movs	r3, #39	@ 0x27
10043e5c:	18fb      	adds	r3, r7, r3
10043e5e:	781b      	ldrb	r3, [r3, #0]
10043e60:	2b00      	cmp	r3, #0
10043e62:	d01d      	beq.n	10043ea0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10043e64:	68fb      	ldr	r3, [r7, #12]
10043e66:	0018      	movs	r0, r3
10043e68:	f7ff fe28 	bl	10043abc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10043e6c:	68fb      	ldr	r3, [r7, #12]
10043e6e:	681b      	ldr	r3, [r3, #0]
10043e70:	685a      	ldr	r2, [r3, #4]
10043e72:	68fb      	ldr	r3, [r7, #12]
10043e74:	681b      	ldr	r3, [r3, #0]
10043e76:	490e      	ldr	r1, [pc, #56]	@ (10043eb0 <I2C_IsErrorOccurred+0x1ec>)
10043e78:	400a      	ands	r2, r1
10043e7a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
10043e7c:	68fb      	ldr	r3, [r7, #12]
10043e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10043e80:	6a3b      	ldr	r3, [r7, #32]
10043e82:	431a      	orrs	r2, r3
10043e84:	68fb      	ldr	r3, [r7, #12]
10043e86:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
10043e88:	68fb      	ldr	r3, [r7, #12]
10043e8a:	2241      	movs	r2, #65	@ 0x41
10043e8c:	2120      	movs	r1, #32
10043e8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
10043e90:	68fb      	ldr	r3, [r7, #12]
10043e92:	2242      	movs	r2, #66	@ 0x42
10043e94:	2100      	movs	r1, #0
10043e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10043e98:	68fb      	ldr	r3, [r7, #12]
10043e9a:	2240      	movs	r2, #64	@ 0x40
10043e9c:	2100      	movs	r1, #0
10043e9e:	5499      	strb	r1, [r3, r2]
  }

  return status;
10043ea0:	2327      	movs	r3, #39	@ 0x27
10043ea2:	18fb      	adds	r3, r7, r3
10043ea4:	781b      	ldrb	r3, [r3, #0]
}
10043ea6:	0018      	movs	r0, r3
10043ea8:	46bd      	mov	sp, r7
10043eaa:	b00a      	add	sp, #40	@ 0x28
10043eac:	bd80      	pop	{r7, pc}
10043eae:	46c0      	nop			@ (mov r8, r8)
10043eb0:	fe00e800 	.word	0xfe00e800

10043eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10043eb4:	b590      	push	{r4, r7, lr}
10043eb6:	b087      	sub	sp, #28
10043eb8:	af00      	add	r7, sp, #0
10043eba:	60f8      	str	r0, [r7, #12]
10043ebc:	0008      	movs	r0, r1
10043ebe:	0011      	movs	r1, r2
10043ec0:	607b      	str	r3, [r7, #4]
10043ec2:	240a      	movs	r4, #10
10043ec4:	193b      	adds	r3, r7, r4
10043ec6:	1c02      	adds	r2, r0, #0
10043ec8:	801a      	strh	r2, [r3, #0]
10043eca:	2009      	movs	r0, #9
10043ecc:	183b      	adds	r3, r7, r0
10043ece:	1c0a      	adds	r2, r1, #0
10043ed0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10043ed2:	193b      	adds	r3, r7, r4
10043ed4:	881b      	ldrh	r3, [r3, #0]
10043ed6:	059b      	lsls	r3, r3, #22
10043ed8:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10043eda:	183b      	adds	r3, r7, r0
10043edc:	781b      	ldrb	r3, [r3, #0]
10043ede:	0419      	lsls	r1, r3, #16
10043ee0:	23ff      	movs	r3, #255	@ 0xff
10043ee2:	041b      	lsls	r3, r3, #16
10043ee4:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10043ee6:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10043ee8:	687b      	ldr	r3, [r7, #4]
10043eea:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10043eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043eee:	4313      	orrs	r3, r2
10043ef0:	005b      	lsls	r3, r3, #1
10043ef2:	085b      	lsrs	r3, r3, #1
10043ef4:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10043ef6:	68fb      	ldr	r3, [r7, #12]
10043ef8:	681b      	ldr	r3, [r3, #0]
10043efa:	685b      	ldr	r3, [r3, #4]
10043efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10043efe:	0d51      	lsrs	r1, r2, #21
10043f00:	2280      	movs	r2, #128	@ 0x80
10043f02:	00d2      	lsls	r2, r2, #3
10043f04:	400a      	ands	r2, r1
10043f06:	4907      	ldr	r1, [pc, #28]	@ (10043f24 <I2C_TransferConfig+0x70>)
10043f08:	430a      	orrs	r2, r1
10043f0a:	43d2      	mvns	r2, r2
10043f0c:	401a      	ands	r2, r3
10043f0e:	0011      	movs	r1, r2
10043f10:	68fb      	ldr	r3, [r7, #12]
10043f12:	681b      	ldr	r3, [r3, #0]
10043f14:	697a      	ldr	r2, [r7, #20]
10043f16:	430a      	orrs	r2, r1
10043f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10043f1a:	46c0      	nop			@ (mov r8, r8)
10043f1c:	46bd      	mov	sp, r7
10043f1e:	b007      	add	sp, #28
10043f20:	bd90      	pop	{r4, r7, pc}
10043f22:	46c0      	nop			@ (mov r8, r8)
10043f24:	03ff63ff 	.word	0x03ff63ff

10043f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10043f28:	b580      	push	{r7, lr}
10043f2a:	b082      	sub	sp, #8
10043f2c:	af00      	add	r7, sp, #0
10043f2e:	6078      	str	r0, [r7, #4]
10043f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10043f32:	687b      	ldr	r3, [r7, #4]
10043f34:	2241      	movs	r2, #65	@ 0x41
10043f36:	5c9b      	ldrb	r3, [r3, r2]
10043f38:	b2db      	uxtb	r3, r3
10043f3a:	2b20      	cmp	r3, #32
10043f3c:	d138      	bne.n	10043fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10043f3e:	687b      	ldr	r3, [r7, #4]
10043f40:	2240      	movs	r2, #64	@ 0x40
10043f42:	5c9b      	ldrb	r3, [r3, r2]
10043f44:	2b01      	cmp	r3, #1
10043f46:	d101      	bne.n	10043f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
10043f48:	2302      	movs	r3, #2
10043f4a:	e032      	b.n	10043fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
10043f4c:	687b      	ldr	r3, [r7, #4]
10043f4e:	2240      	movs	r2, #64	@ 0x40
10043f50:	2101      	movs	r1, #1
10043f52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10043f54:	687b      	ldr	r3, [r7, #4]
10043f56:	2241      	movs	r2, #65	@ 0x41
10043f58:	2124      	movs	r1, #36	@ 0x24
10043f5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10043f5c:	687b      	ldr	r3, [r7, #4]
10043f5e:	681b      	ldr	r3, [r3, #0]
10043f60:	681a      	ldr	r2, [r3, #0]
10043f62:	687b      	ldr	r3, [r7, #4]
10043f64:	681b      	ldr	r3, [r3, #0]
10043f66:	2101      	movs	r1, #1
10043f68:	438a      	bics	r2, r1
10043f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
10043f6c:	687b      	ldr	r3, [r7, #4]
10043f6e:	681b      	ldr	r3, [r3, #0]
10043f70:	681a      	ldr	r2, [r3, #0]
10043f72:	687b      	ldr	r3, [r7, #4]
10043f74:	681b      	ldr	r3, [r3, #0]
10043f76:	4911      	ldr	r1, [pc, #68]	@ (10043fbc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
10043f78:	400a      	ands	r2, r1
10043f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
10043f7c:	687b      	ldr	r3, [r7, #4]
10043f7e:	681b      	ldr	r3, [r3, #0]
10043f80:	6819      	ldr	r1, [r3, #0]
10043f82:	687b      	ldr	r3, [r7, #4]
10043f84:	681b      	ldr	r3, [r3, #0]
10043f86:	683a      	ldr	r2, [r7, #0]
10043f88:	430a      	orrs	r2, r1
10043f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10043f8c:	687b      	ldr	r3, [r7, #4]
10043f8e:	681b      	ldr	r3, [r3, #0]
10043f90:	681a      	ldr	r2, [r3, #0]
10043f92:	687b      	ldr	r3, [r7, #4]
10043f94:	681b      	ldr	r3, [r3, #0]
10043f96:	2101      	movs	r1, #1
10043f98:	430a      	orrs	r2, r1
10043f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10043f9c:	687b      	ldr	r3, [r7, #4]
10043f9e:	2241      	movs	r2, #65	@ 0x41
10043fa0:	2120      	movs	r1, #32
10043fa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10043fa4:	687b      	ldr	r3, [r7, #4]
10043fa6:	2240      	movs	r2, #64	@ 0x40
10043fa8:	2100      	movs	r1, #0
10043faa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10043fac:	2300      	movs	r3, #0
10043fae:	e000      	b.n	10043fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
10043fb0:	2302      	movs	r3, #2
  }
}
10043fb2:	0018      	movs	r0, r3
10043fb4:	46bd      	mov	sp, r7
10043fb6:	b002      	add	sp, #8
10043fb8:	bd80      	pop	{r7, pc}
10043fba:	46c0      	nop			@ (mov r8, r8)
10043fbc:	ffffefff 	.word	0xffffefff

10043fc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
10043fc0:	b580      	push	{r7, lr}
10043fc2:	b084      	sub	sp, #16
10043fc4:	af00      	add	r7, sp, #0
10043fc6:	6078      	str	r0, [r7, #4]
10043fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10043fca:	687b      	ldr	r3, [r7, #4]
10043fcc:	2241      	movs	r2, #65	@ 0x41
10043fce:	5c9b      	ldrb	r3, [r3, r2]
10043fd0:	b2db      	uxtb	r3, r3
10043fd2:	2b20      	cmp	r3, #32
10043fd4:	d139      	bne.n	1004404a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10043fd6:	687b      	ldr	r3, [r7, #4]
10043fd8:	2240      	movs	r2, #64	@ 0x40
10043fda:	5c9b      	ldrb	r3, [r3, r2]
10043fdc:	2b01      	cmp	r3, #1
10043fde:	d101      	bne.n	10043fe4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
10043fe0:	2302      	movs	r3, #2
10043fe2:	e033      	b.n	1004404c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10043fe4:	687b      	ldr	r3, [r7, #4]
10043fe6:	2240      	movs	r2, #64	@ 0x40
10043fe8:	2101      	movs	r1, #1
10043fea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10043fec:	687b      	ldr	r3, [r7, #4]
10043fee:	2241      	movs	r2, #65	@ 0x41
10043ff0:	2124      	movs	r1, #36	@ 0x24
10043ff2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10043ff4:	687b      	ldr	r3, [r7, #4]
10043ff6:	681b      	ldr	r3, [r3, #0]
10043ff8:	681a      	ldr	r2, [r3, #0]
10043ffa:	687b      	ldr	r3, [r7, #4]
10043ffc:	681b      	ldr	r3, [r3, #0]
10043ffe:	2101      	movs	r1, #1
10044000:	438a      	bics	r2, r1
10044002:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10044004:	687b      	ldr	r3, [r7, #4]
10044006:	681b      	ldr	r3, [r3, #0]
10044008:	681b      	ldr	r3, [r3, #0]
1004400a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
1004400c:	68fb      	ldr	r3, [r7, #12]
1004400e:	4a11      	ldr	r2, [pc, #68]	@ (10044054 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
10044010:	4013      	ands	r3, r2
10044012:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10044014:	683b      	ldr	r3, [r7, #0]
10044016:	021b      	lsls	r3, r3, #8
10044018:	68fa      	ldr	r2, [r7, #12]
1004401a:	4313      	orrs	r3, r2
1004401c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
1004401e:	687b      	ldr	r3, [r7, #4]
10044020:	681b      	ldr	r3, [r3, #0]
10044022:	68fa      	ldr	r2, [r7, #12]
10044024:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10044026:	687b      	ldr	r3, [r7, #4]
10044028:	681b      	ldr	r3, [r3, #0]
1004402a:	681a      	ldr	r2, [r3, #0]
1004402c:	687b      	ldr	r3, [r7, #4]
1004402e:	681b      	ldr	r3, [r3, #0]
10044030:	2101      	movs	r1, #1
10044032:	430a      	orrs	r2, r1
10044034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10044036:	687b      	ldr	r3, [r7, #4]
10044038:	2241      	movs	r2, #65	@ 0x41
1004403a:	2120      	movs	r1, #32
1004403c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004403e:	687b      	ldr	r3, [r7, #4]
10044040:	2240      	movs	r2, #64	@ 0x40
10044042:	2100      	movs	r1, #0
10044044:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10044046:	2300      	movs	r3, #0
10044048:	e000      	b.n	1004404c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
1004404a:	2302      	movs	r3, #2
  }
}
1004404c:	0018      	movs	r0, r3
1004404e:	46bd      	mov	sp, r7
10044050:	b004      	add	sp, #16
10044052:	bd80      	pop	{r7, pc}
10044054:	fffff0ff 	.word	0xfffff0ff

10044058 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10044058:	b580      	push	{r7, lr}
1004405a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004405c:	4b07      	ldr	r3, [pc, #28]	@ (1004407c <LL_RCC_HSE_IsReady+0x24>)
1004405e:	681a      	ldr	r2, [r3, #0]
10044060:	2380      	movs	r3, #128	@ 0x80
10044062:	029b      	lsls	r3, r3, #10
10044064:	401a      	ands	r2, r3
10044066:	2380      	movs	r3, #128	@ 0x80
10044068:	029b      	lsls	r3, r3, #10
1004406a:	429a      	cmp	r2, r3
1004406c:	d101      	bne.n	10044072 <LL_RCC_HSE_IsReady+0x1a>
1004406e:	2301      	movs	r3, #1
10044070:	e000      	b.n	10044074 <LL_RCC_HSE_IsReady+0x1c>
10044072:	2300      	movs	r3, #0
}
10044074:	0018      	movs	r0, r3
10044076:	46bd      	mov	sp, r7
10044078:	bd80      	pop	{r7, pc}
1004407a:	46c0      	nop			@ (mov r8, r8)
1004407c:	48400000 	.word	0x48400000

10044080 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10044080:	b580      	push	{r7, lr}
10044082:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10044084:	4b07      	ldr	r3, [pc, #28]	@ (100440a4 <LL_RCC_HSI_Enable+0x24>)
10044086:	689a      	ldr	r2, [r3, #8]
10044088:	4b06      	ldr	r3, [pc, #24]	@ (100440a4 <LL_RCC_HSI_Enable+0x24>)
1004408a:	2104      	movs	r1, #4
1004408c:	438a      	bics	r2, r1
1004408e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10044090:	4b04      	ldr	r3, [pc, #16]	@ (100440a4 <LL_RCC_HSI_Enable+0x24>)
10044092:	689a      	ldr	r2, [r3, #8]
10044094:	4b03      	ldr	r3, [pc, #12]	@ (100440a4 <LL_RCC_HSI_Enable+0x24>)
10044096:	2102      	movs	r1, #2
10044098:	438a      	bics	r2, r1
1004409a:	609a      	str	r2, [r3, #8]
}
1004409c:	46c0      	nop			@ (mov r8, r8)
1004409e:	46bd      	mov	sp, r7
100440a0:	bd80      	pop	{r7, pc}
100440a2:	46c0      	nop			@ (mov r8, r8)
100440a4:	48400000 	.word	0x48400000

100440a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
100440a8:	b580      	push	{r7, lr}
100440aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
100440ac:	4b07      	ldr	r3, [pc, #28]	@ (100440cc <LL_RCC_HSI_IsReady+0x24>)
100440ae:	681a      	ldr	r2, [r3, #0]
100440b0:	2380      	movs	r3, #128	@ 0x80
100440b2:	00db      	lsls	r3, r3, #3
100440b4:	401a      	ands	r2, r3
100440b6:	2380      	movs	r3, #128	@ 0x80
100440b8:	00db      	lsls	r3, r3, #3
100440ba:	429a      	cmp	r2, r3
100440bc:	d101      	bne.n	100440c2 <LL_RCC_HSI_IsReady+0x1a>
100440be:	2301      	movs	r3, #1
100440c0:	e000      	b.n	100440c4 <LL_RCC_HSI_IsReady+0x1c>
100440c2:	2300      	movs	r3, #0
}
100440c4:	0018      	movs	r0, r3
100440c6:	46bd      	mov	sp, r7
100440c8:	bd80      	pop	{r7, pc}
100440ca:	46c0      	nop			@ (mov r8, r8)
100440cc:	48400000 	.word	0x48400000

100440d0 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
100440d0:	b580      	push	{r7, lr}
100440d2:	b082      	sub	sp, #8
100440d4:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
100440d6:	46c0      	nop			@ (mov r8, r8)
100440d8:	4b0f      	ldr	r3, [pc, #60]	@ (10044118 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100440da:	681a      	ldr	r2, [r3, #0]
100440dc:	2380      	movs	r3, #128	@ 0x80
100440de:	029b      	lsls	r3, r3, #10
100440e0:	4013      	ands	r3, r2
100440e2:	d0f9      	beq.n	100440d8 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100440e4:	4b0c      	ldr	r3, [pc, #48]	@ (10044118 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100440e6:	689a      	ldr	r2, [r3, #8]
100440e8:	4b0b      	ldr	r3, [pc, #44]	@ (10044118 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100440ea:	2102      	movs	r1, #2
100440ec:	430a      	orrs	r2, r1
100440ee:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
100440f0:	2300      	movs	r3, #0
100440f2:	607b      	str	r3, [r7, #4]
100440f4:	e003      	b.n	100440fe <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
100440f6:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100440f8:	687b      	ldr	r3, [r7, #4]
100440fa:	3301      	adds	r3, #1
100440fc:	607b      	str	r3, [r7, #4]
100440fe:	687b      	ldr	r3, [r7, #4]
10044100:	2b05      	cmp	r3, #5
10044102:	ddf8      	ble.n	100440f6 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10044104:	4b04      	ldr	r3, [pc, #16]	@ (10044118 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10044106:	689a      	ldr	r2, [r3, #8]
10044108:	4b03      	ldr	r3, [pc, #12]	@ (10044118 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004410a:	2104      	movs	r1, #4
1004410c:	430a      	orrs	r2, r1
1004410e:	609a      	str	r2, [r3, #8]
}
10044110:	46c0      	nop			@ (mov r8, r8)
10044112:	46bd      	mov	sp, r7
10044114:	b002      	add	sp, #8
10044116:	bd80      	pop	{r7, pc}
10044118:	48400000 	.word	0x48400000

1004411c <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004411c:	b580      	push	{r7, lr}
1004411e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10044120:	4b04      	ldr	r3, [pc, #16]	@ (10044134 <LL_RCC_RC64MPLL_Enable+0x18>)
10044122:	681a      	ldr	r2, [r3, #0]
10044124:	4b03      	ldr	r3, [pc, #12]	@ (10044134 <LL_RCC_RC64MPLL_Enable+0x18>)
10044126:	2180      	movs	r1, #128	@ 0x80
10044128:	0189      	lsls	r1, r1, #6
1004412a:	430a      	orrs	r2, r1
1004412c:	601a      	str	r2, [r3, #0]
}
1004412e:	46c0      	nop			@ (mov r8, r8)
10044130:	46bd      	mov	sp, r7
10044132:	bd80      	pop	{r7, pc}
10044134:	48400000 	.word	0x48400000

10044138 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10044138:	b580      	push	{r7, lr}
1004413a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004413c:	4b04      	ldr	r3, [pc, #16]	@ (10044150 <LL_RCC_RC64MPLL_Disable+0x18>)
1004413e:	681a      	ldr	r2, [r3, #0]
10044140:	4b03      	ldr	r3, [pc, #12]	@ (10044150 <LL_RCC_RC64MPLL_Disable+0x18>)
10044142:	4904      	ldr	r1, [pc, #16]	@ (10044154 <LL_RCC_RC64MPLL_Disable+0x1c>)
10044144:	400a      	ands	r2, r1
10044146:	601a      	str	r2, [r3, #0]
}
10044148:	46c0      	nop			@ (mov r8, r8)
1004414a:	46bd      	mov	sp, r7
1004414c:	bd80      	pop	{r7, pc}
1004414e:	46c0      	nop			@ (mov r8, r8)
10044150:	48400000 	.word	0x48400000
10044154:	ffffdfff 	.word	0xffffdfff

10044158 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10044158:	b580      	push	{r7, lr}
1004415a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004415c:	4b07      	ldr	r3, [pc, #28]	@ (1004417c <LL_RCC_RC64MPLL_IsReady+0x24>)
1004415e:	681a      	ldr	r2, [r3, #0]
10044160:	2380      	movs	r3, #128	@ 0x80
10044162:	01db      	lsls	r3, r3, #7
10044164:	401a      	ands	r2, r3
10044166:	2380      	movs	r3, #128	@ 0x80
10044168:	01db      	lsls	r3, r3, #7
1004416a:	429a      	cmp	r2, r3
1004416c:	d101      	bne.n	10044172 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004416e:	2301      	movs	r3, #1
10044170:	e000      	b.n	10044174 <LL_RCC_RC64MPLL_IsReady+0x1c>
10044172:	2300      	movs	r3, #0
}
10044174:	0018      	movs	r0, r3
10044176:	46bd      	mov	sp, r7
10044178:	bd80      	pop	{r7, pc}
1004417a:	46c0      	nop			@ (mov r8, r8)
1004417c:	48400000 	.word	0x48400000

10044180 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10044180:	b580      	push	{r7, lr}
10044182:	b082      	sub	sp, #8
10044184:	af00      	add	r7, sp, #0
10044186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10044188:	4b06      	ldr	r3, [pc, #24]	@ (100441a4 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004418a:	689b      	ldr	r3, [r3, #8]
1004418c:	22e0      	movs	r2, #224	@ 0xe0
1004418e:	4393      	bics	r3, r2
10044190:	0019      	movs	r1, r3
10044192:	4b04      	ldr	r3, [pc, #16]	@ (100441a4 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10044194:	687a      	ldr	r2, [r7, #4]
10044196:	430a      	orrs	r2, r1
10044198:	609a      	str	r2, [r3, #8]
}
1004419a:	46c0      	nop			@ (mov r8, r8)
1004419c:	46bd      	mov	sp, r7
1004419e:	b002      	add	sp, #8
100441a0:	bd80      	pop	{r7, pc}
100441a2:	46c0      	nop			@ (mov r8, r8)
100441a4:	48400000 	.word	0x48400000

100441a8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100441a8:	b580      	push	{r7, lr}
100441aa:	b084      	sub	sp, #16
100441ac:	af00      	add	r7, sp, #0
100441ae:	6078      	str	r0, [r7, #4]
100441b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100441b2:	687b      	ldr	r3, [r7, #4]
100441b4:	2b00      	cmp	r3, #0
100441b6:	d101      	bne.n	100441bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100441b8:	2301      	movs	r3, #1
100441ba:	e098      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
100441bc:	4b4e      	ldr	r3, [pc, #312]	@ (100442f8 <HAL_RCC_ClockConfig+0x150>)
100441be:	685b      	ldr	r3, [r3, #4]
100441c0:	2230      	movs	r2, #48	@ 0x30
100441c2:	4393      	bics	r3, r2
100441c4:	0019      	movs	r1, r3
100441c6:	4b4c      	ldr	r3, [pc, #304]	@ (100442f8 <HAL_RCC_ClockConfig+0x150>)
100441c8:	683a      	ldr	r2, [r7, #0]
100441ca:	430a      	orrs	r2, r1
100441cc:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
100441ce:	687b      	ldr	r3, [r7, #4]
100441d0:	681b      	ldr	r3, [r3, #0]
100441d2:	2b02      	cmp	r3, #2
100441d4:	d10e      	bne.n	100441f4 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
100441d6:	f7ff ff53 	bl	10044080 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100441da:	f7ff ff65 	bl	100440a8 <LL_RCC_HSI_IsReady>
100441de:	1e03      	subs	r3, r0, #0
100441e0:	d101      	bne.n	100441e6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
100441e2:	2301      	movs	r3, #1
100441e4:	e083      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
100441e6:	f7ff ffa7 	bl	10044138 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100441ea:	687b      	ldr	r3, [r7, #4]
100441ec:	685b      	ldr	r3, [r3, #4]
100441ee:	0018      	movs	r0, r3
100441f0:	f7ff ffc6 	bl	10044180 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
100441f4:	687b      	ldr	r3, [r7, #4]
100441f6:	681b      	ldr	r3, [r3, #0]
100441f8:	2b00      	cmp	r3, #0
100441fa:	d124      	bne.n	10044246 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100441fc:	f7ff ff54 	bl	100440a8 <LL_RCC_HSI_IsReady>
10044200:	1e03      	subs	r3, r0, #0
10044202:	d101      	bne.n	10044208 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10044204:	2301      	movs	r3, #1
10044206:	e072      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10044208:	f7ff ff26 	bl	10044058 <LL_RCC_HSE_IsReady>
1004420c:	1e03      	subs	r3, r0, #0
1004420e:	d101      	bne.n	10044214 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10044210:	2301      	movs	r3, #1
10044212:	e06c      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10044214:	f7ff ff82 	bl	1004411c <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10044218:	f7fe fdf0 	bl	10042dfc <HAL_GetTick>
1004421c:	0003      	movs	r3, r0
1004421e:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10044220:	e008      	b.n	10044234 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10044222:	f7fe fdeb 	bl	10042dfc <HAL_GetTick>
10044226:	0002      	movs	r2, r0
10044228:	68fb      	ldr	r3, [r7, #12]
1004422a:	1ad3      	subs	r3, r2, r3
1004422c:	2b02      	cmp	r3, #2
1004422e:	d901      	bls.n	10044234 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10044230:	2303      	movs	r3, #3
10044232:	e05c      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10044234:	f7ff ff90 	bl	10044158 <LL_RCC_RC64MPLL_IsReady>
10044238:	1e03      	subs	r3, r0, #0
1004423a:	d0f2      	beq.n	10044222 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004423c:	687b      	ldr	r3, [r7, #4]
1004423e:	685b      	ldr	r3, [r3, #4]
10044240:	0018      	movs	r0, r3
10044242:	f7ff ff9d 	bl	10044180 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10044246:	687b      	ldr	r3, [r7, #4]
10044248:	681b      	ldr	r3, [r3, #0]
1004424a:	2b01      	cmp	r3, #1
1004424c:	d117      	bne.n	1004427e <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004424e:	f7ff ff3f 	bl	100440d0 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10044252:	f7ff ff29 	bl	100440a8 <LL_RCC_HSI_IsReady>
10044256:	1e03      	subs	r3, r0, #0
10044258:	d001      	beq.n	1004425e <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004425a:	2301      	movs	r3, #1
1004425c:	e047      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004425e:	f7ff fefb 	bl	10044058 <LL_RCC_HSE_IsReady>
10044262:	1e03      	subs	r3, r0, #0
10044264:	d101      	bne.n	1004426a <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10044266:	2301      	movs	r3, #1
10044268:	e041      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004426a:	4b24      	ldr	r3, [pc, #144]	@ (100442fc <HAL_RCC_ClockConfig+0x154>)
1004426c:	689b      	ldr	r3, [r3, #8]
1004426e:	22e0      	movs	r2, #224	@ 0xe0
10044270:	4393      	bics	r3, r2
10044272:	0019      	movs	r1, r3
10044274:	687b      	ldr	r3, [r7, #4]
10044276:	685a      	ldr	r2, [r3, #4]
10044278:	4b20      	ldr	r3, [pc, #128]	@ (100442fc <HAL_RCC_ClockConfig+0x154>)
1004427a:	430a      	orrs	r2, r1
1004427c:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004427e:	4b1e      	ldr	r3, [pc, #120]	@ (100442f8 <HAL_RCC_ClockConfig+0x150>)
10044280:	685b      	ldr	r3, [r3, #4]
10044282:	2230      	movs	r2, #48	@ 0x30
10044284:	4013      	ands	r3, r2
10044286:	683a      	ldr	r2, [r7, #0]
10044288:	429a      	cmp	r2, r3
1004428a:	d01d      	beq.n	100442c8 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004428c:	4b1a      	ldr	r3, [pc, #104]	@ (100442f8 <HAL_RCC_ClockConfig+0x150>)
1004428e:	685b      	ldr	r3, [r3, #4]
10044290:	2230      	movs	r2, #48	@ 0x30
10044292:	4393      	bics	r3, r2
10044294:	0019      	movs	r1, r3
10044296:	4b18      	ldr	r3, [pc, #96]	@ (100442f8 <HAL_RCC_ClockConfig+0x150>)
10044298:	683a      	ldr	r2, [r7, #0]
1004429a:	430a      	orrs	r2, r1
1004429c:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004429e:	f7fe fdad 	bl	10042dfc <HAL_GetTick>
100442a2:	0003      	movs	r3, r0
100442a4:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100442a6:	e008      	b.n	100442ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
100442a8:	f7fe fda8 	bl	10042dfc <HAL_GetTick>
100442ac:	0002      	movs	r2, r0
100442ae:	68fb      	ldr	r3, [r7, #12]
100442b0:	1ad3      	subs	r3, r2, r3
100442b2:	2b02      	cmp	r3, #2
100442b4:	d901      	bls.n	100442ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
100442b6:	2303      	movs	r3, #3
100442b8:	e019      	b.n	100442ee <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100442ba:	4b0f      	ldr	r3, [pc, #60]	@ (100442f8 <HAL_RCC_ClockConfig+0x150>)
100442bc:	685b      	ldr	r3, [r3, #4]
100442be:	2230      	movs	r2, #48	@ 0x30
100442c0:	4013      	ands	r3, r2
100442c2:	683a      	ldr	r2, [r7, #0]
100442c4:	429a      	cmp	r2, r3
100442c6:	d1ef      	bne.n	100442a8 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
100442c8:	2300      	movs	r3, #0
100442ca:	60bb      	str	r3, [r7, #8]
100442cc:	e003      	b.n	100442d6 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
100442ce:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100442d0:	68bb      	ldr	r3, [r7, #8]
100442d2:	3301      	adds	r3, #1
100442d4:	60bb      	str	r3, [r7, #8]
100442d6:	68bb      	ldr	r3, [r7, #8]
100442d8:	2b05      	cmp	r3, #5
100442da:	ddf8      	ble.n	100442ce <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
100442dc:	f7fe fcb2 	bl	10042c44 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
100442e0:	f7fe fd96 	bl	10042e10 <HAL_GetTickPrio>
100442e4:	0003      	movs	r3, r0
100442e6:	0018      	movs	r0, r3
100442e8:	f7fe fd2e 	bl	10042d48 <HAL_InitTick>
100442ec:	0003      	movs	r3, r0
}
100442ee:	0018      	movs	r0, r3
100442f0:	46bd      	mov	sp, r7
100442f2:	b004      	add	sp, #16
100442f4:	bd80      	pop	{r7, pc}
100442f6:	46c0      	nop			@ (mov r8, r8)
100442f8:	40001000 	.word	0x40001000
100442fc:	48400000 	.word	0x48400000

10044300 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10044300:	b580      	push	{r7, lr}
10044302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10044304:	4b02      	ldr	r3, [pc, #8]	@ (10044310 <HAL_RCC_GetSysClockFreq+0x10>)
10044306:	681b      	ldr	r3, [r3, #0]
}
10044308:	0018      	movs	r0, r3
1004430a:	46bd      	mov	sp, r7
1004430c:	bd80      	pop	{r7, pc}
1004430e:	46c0      	nop			@ (mov r8, r8)
10044310:	2000011c 	.word	0x2000011c

10044314 <LL_RCC_LSCO_SetSource>:
{
10044314:	b580      	push	{r7, lr}
10044316:	b082      	sub	sp, #8
10044318:	af00      	add	r7, sp, #0
1004431a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004431c:	4b06      	ldr	r3, [pc, #24]	@ (10044338 <LL_RCC_LSCO_SetSource+0x24>)
1004431e:	689b      	ldr	r3, [r3, #8]
10044320:	4a06      	ldr	r2, [pc, #24]	@ (1004433c <LL_RCC_LSCO_SetSource+0x28>)
10044322:	4013      	ands	r3, r2
10044324:	0019      	movs	r1, r3
10044326:	4b04      	ldr	r3, [pc, #16]	@ (10044338 <LL_RCC_LSCO_SetSource+0x24>)
10044328:	687a      	ldr	r2, [r7, #4]
1004432a:	430a      	orrs	r2, r1
1004432c:	609a      	str	r2, [r3, #8]
}
1004432e:	46c0      	nop			@ (mov r8, r8)
10044330:	46bd      	mov	sp, r7
10044332:	b002      	add	sp, #8
10044334:	bd80      	pop	{r7, pc}
10044336:	46c0      	nop			@ (mov r8, r8)
10044338:	48400000 	.word	0x48400000
1004433c:	fffe7fff 	.word	0xfffe7fff

10044340 <LL_RCC_SetRFClock>:
{
10044340:	b580      	push	{r7, lr}
10044342:	b082      	sub	sp, #8
10044344:	af00      	add	r7, sp, #0
10044346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10044348:	4b06      	ldr	r3, [pc, #24]	@ (10044364 <LL_RCC_SetRFClock+0x24>)
1004434a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004434c:	2204      	movs	r2, #4
1004434e:	4393      	bics	r3, r2
10044350:	0019      	movs	r1, r3
10044352:	4b04      	ldr	r3, [pc, #16]	@ (10044364 <LL_RCC_SetRFClock+0x24>)
10044354:	687a      	ldr	r2, [r7, #4]
10044356:	430a      	orrs	r2, r1
10044358:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004435a:	46c0      	nop			@ (mov r8, r8)
1004435c:	46bd      	mov	sp, r7
1004435e:	b002      	add	sp, #8
10044360:	bd80      	pop	{r7, pc}
10044362:	46c0      	nop			@ (mov r8, r8)
10044364:	48400000 	.word	0x48400000

10044368 <LL_RCC_SetSMPSPrescaler>:
{
10044368:	b580      	push	{r7, lr}
1004436a:	b082      	sub	sp, #8
1004436c:	af00      	add	r7, sp, #0
1004436e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10044370:	4b06      	ldr	r3, [pc, #24]	@ (1004438c <LL_RCC_SetSMPSPrescaler+0x24>)
10044372:	689b      	ldr	r3, [r3, #8]
10044374:	4a06      	ldr	r2, [pc, #24]	@ (10044390 <LL_RCC_SetSMPSPrescaler+0x28>)
10044376:	4013      	ands	r3, r2
10044378:	0019      	movs	r1, r3
1004437a:	4b04      	ldr	r3, [pc, #16]	@ (1004438c <LL_RCC_SetSMPSPrescaler+0x24>)
1004437c:	687a      	ldr	r2, [r7, #4]
1004437e:	430a      	orrs	r2, r1
10044380:	609a      	str	r2, [r3, #8]
}
10044382:	46c0      	nop			@ (mov r8, r8)
10044384:	46bd      	mov	sp, r7
10044386:	b002      	add	sp, #8
10044388:	bd80      	pop	{r7, pc}
1004438a:	46c0      	nop			@ (mov r8, r8)
1004438c:	48400000 	.word	0x48400000
10044390:	ffffefff 	.word	0xffffefff

10044394 <LL_RCC_SetLPUARTClockSource>:
{
10044394:	b580      	push	{r7, lr}
10044396:	b082      	sub	sp, #8
10044398:	af00      	add	r7, sp, #0
1004439a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004439c:	4b06      	ldr	r3, [pc, #24]	@ (100443b8 <LL_RCC_SetLPUARTClockSource+0x24>)
1004439e:	689b      	ldr	r3, [r3, #8]
100443a0:	4a06      	ldr	r2, [pc, #24]	@ (100443bc <LL_RCC_SetLPUARTClockSource+0x28>)
100443a2:	4013      	ands	r3, r2
100443a4:	0019      	movs	r1, r3
100443a6:	4b04      	ldr	r3, [pc, #16]	@ (100443b8 <LL_RCC_SetLPUARTClockSource+0x24>)
100443a8:	687a      	ldr	r2, [r7, #4]
100443aa:	430a      	orrs	r2, r1
100443ac:	609a      	str	r2, [r3, #8]
}
100443ae:	46c0      	nop			@ (mov r8, r8)
100443b0:	46bd      	mov	sp, r7
100443b2:	b002      	add	sp, #8
100443b4:	bd80      	pop	{r7, pc}
100443b6:	46c0      	nop			@ (mov r8, r8)
100443b8:	48400000 	.word	0x48400000
100443bc:	ffffdfff 	.word	0xffffdfff

100443c0 <LL_RCC_SetSPI3I2SClockSource>:
{
100443c0:	b580      	push	{r7, lr}
100443c2:	b082      	sub	sp, #8
100443c4:	af00      	add	r7, sp, #0
100443c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100443c8:	4b06      	ldr	r3, [pc, #24]	@ (100443e4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100443ca:	689b      	ldr	r3, [r3, #8]
100443cc:	4a06      	ldr	r2, [pc, #24]	@ (100443e8 <LL_RCC_SetSPI3I2SClockSource+0x28>)
100443ce:	4013      	ands	r3, r2
100443d0:	0019      	movs	r1, r3
100443d2:	4b04      	ldr	r3, [pc, #16]	@ (100443e4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100443d4:	687a      	ldr	r2, [r7, #4]
100443d6:	430a      	orrs	r2, r1
100443d8:	609a      	str	r2, [r3, #8]
}
100443da:	46c0      	nop			@ (mov r8, r8)
100443dc:	46bd      	mov	sp, r7
100443de:	b002      	add	sp, #8
100443e0:	bd80      	pop	{r7, pc}
100443e2:	46c0      	nop			@ (mov r8, r8)
100443e4:	48400000 	.word	0x48400000
100443e8:	ff3fffff 	.word	0xff3fffff

100443ec <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
100443ec:	b580      	push	{r7, lr}
100443ee:	b082      	sub	sp, #8
100443f0:	af00      	add	r7, sp, #0
100443f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
100443f4:	687b      	ldr	r3, [r7, #4]
100443f6:	681b      	ldr	r3, [r3, #0]
100443f8:	2201      	movs	r2, #1
100443fa:	4013      	ands	r3, r2
100443fc:	d004      	beq.n	10044408 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
100443fe:	687b      	ldr	r3, [r7, #4]
10044400:	691b      	ldr	r3, [r3, #16]
10044402:	0018      	movs	r0, r3
10044404:	f7ff ff9c 	bl	10044340 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10044408:	687b      	ldr	r3, [r7, #4]
1004440a:	681b      	ldr	r3, [r3, #0]
1004440c:	2202      	movs	r2, #2
1004440e:	4013      	ands	r3, r2
10044410:	d004      	beq.n	1004441c <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10044412:	687b      	ldr	r3, [r7, #4]
10044414:	695b      	ldr	r3, [r3, #20]
10044416:	0018      	movs	r0, r3
10044418:	f7ff ffa6 	bl	10044368 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004441c:	687b      	ldr	r3, [r7, #4]
1004441e:	681b      	ldr	r3, [r3, #0]
10044420:	2208      	movs	r2, #8
10044422:	4013      	ands	r3, r2
10044424:	d004      	beq.n	10044430 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10044426:	687b      	ldr	r3, [r7, #4]
10044428:	685b      	ldr	r3, [r3, #4]
1004442a:	0018      	movs	r0, r3
1004442c:	f7ff ffc8 	bl	100443c0 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10044430:	687b      	ldr	r3, [r7, #4]
10044432:	681b      	ldr	r3, [r3, #0]
10044434:	2210      	movs	r2, #16
10044436:	4013      	ands	r3, r2
10044438:	d004      	beq.n	10044444 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004443a:	687b      	ldr	r3, [r7, #4]
1004443c:	68db      	ldr	r3, [r3, #12]
1004443e:	0018      	movs	r0, r3
10044440:	f7ff ffa8 	bl	10044394 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10044444:	687b      	ldr	r3, [r7, #4]
10044446:	689b      	ldr	r3, [r3, #8]
10044448:	2220      	movs	r2, #32
1004444a:	4013      	ands	r3, r2
1004444c:	d004      	beq.n	10044458 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004444e:	687b      	ldr	r3, [r7, #4]
10044450:	689b      	ldr	r3, [r3, #8]
10044452:	0018      	movs	r0, r3
10044454:	f7ff ff5e 	bl	10044314 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10044458:	2300      	movs	r3, #0
}
1004445a:	0018      	movs	r0, r3
1004445c:	46bd      	mov	sp, r7
1004445e:	b002      	add	sp, #8
10044460:	bd80      	pop	{r7, pc}

10044462 <memset>:
10044462:	0003      	movs	r3, r0
10044464:	1882      	adds	r2, r0, r2
10044466:	4293      	cmp	r3, r2
10044468:	d100      	bne.n	1004446c <memset+0xa>
1004446a:	4770      	bx	lr
1004446c:	7019      	strb	r1, [r3, #0]
1004446e:	3301      	adds	r3, #1
10044470:	e7f9      	b.n	10044466 <memset+0x4>
	...

Disassembly of section .init:

10044474 <_init>:
10044474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10044476:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10044478 <_fini>:
10044478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004447a:	46c0      	nop			@ (mov r8, r8)
