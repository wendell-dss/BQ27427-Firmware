
BQ27427_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004243c  1004243c  0000343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10042440  10042440  00003440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000000  10042444  10042444  00004128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  2000011c  10042444  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram_preamble 0000002c  20000004  20000004  00005004  2**2
                  ALLOC
  7 .bss.blueRAM  00000000  200000c0  200000c0  00000000  2**0
                  ALLOC
  8 .bss          0000005c  200000c0  200000c0  00005004  2**2
                  ALLOC
  9 .noinit       00000000  20000128  10042450  00000000  2**0
                  ALLOC
 10 .ota_region_end 00000000  10042450  10042450  00004128  2**0
                  CONTENTS
 11 .heap         00000000  20000128  20000128  00004128  2**0
                  CONTENTS
 12 .stack        00000c00  2000f400  2000f400  00004400  2**0
                  ALLOC
 13 .rom_info     00000000  10000000  10000000  00004128  2**0
                  CONTENTS
 14 .ARM.attributes 00000028  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY
 15 .debug_info   000086f3  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001a46  00000000  00000000  0000c843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009b0  00000000  00000000  0000e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000074f  00000000  00000000  0000ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017c3c  00000000  00000000  0000f38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000afbb  00000000  00000000  00026fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0009d81f  00000000  00000000  00031f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000cf7a5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000021e0  00000000  00000000  000cf7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000067  00000000  00000000  000d19c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <__udivsi3>:
100400c0:	2200      	movs	r2, #0
100400c2:	0843      	lsrs	r3, r0, #1
100400c4:	428b      	cmp	r3, r1
100400c6:	d374      	bcc.n	100401b2 <__udivsi3+0xf2>
100400c8:	0903      	lsrs	r3, r0, #4
100400ca:	428b      	cmp	r3, r1
100400cc:	d35f      	bcc.n	1004018e <__udivsi3+0xce>
100400ce:	0a03      	lsrs	r3, r0, #8
100400d0:	428b      	cmp	r3, r1
100400d2:	d344      	bcc.n	1004015e <__udivsi3+0x9e>
100400d4:	0b03      	lsrs	r3, r0, #12
100400d6:	428b      	cmp	r3, r1
100400d8:	d328      	bcc.n	1004012c <__udivsi3+0x6c>
100400da:	0c03      	lsrs	r3, r0, #16
100400dc:	428b      	cmp	r3, r1
100400de:	d30d      	bcc.n	100400fc <__udivsi3+0x3c>
100400e0:	22ff      	movs	r2, #255	@ 0xff
100400e2:	0209      	lsls	r1, r1, #8
100400e4:	ba12      	rev	r2, r2
100400e6:	0c03      	lsrs	r3, r0, #16
100400e8:	428b      	cmp	r3, r1
100400ea:	d302      	bcc.n	100400f2 <__udivsi3+0x32>
100400ec:	1212      	asrs	r2, r2, #8
100400ee:	0209      	lsls	r1, r1, #8
100400f0:	d065      	beq.n	100401be <__udivsi3+0xfe>
100400f2:	0b03      	lsrs	r3, r0, #12
100400f4:	428b      	cmp	r3, r1
100400f6:	d319      	bcc.n	1004012c <__udivsi3+0x6c>
100400f8:	e000      	b.n	100400fc <__udivsi3+0x3c>
100400fa:	0a09      	lsrs	r1, r1, #8
100400fc:	0bc3      	lsrs	r3, r0, #15
100400fe:	428b      	cmp	r3, r1
10040100:	d301      	bcc.n	10040106 <__udivsi3+0x46>
10040102:	03cb      	lsls	r3, r1, #15
10040104:	1ac0      	subs	r0, r0, r3
10040106:	4152      	adcs	r2, r2
10040108:	0b83      	lsrs	r3, r0, #14
1004010a:	428b      	cmp	r3, r1
1004010c:	d301      	bcc.n	10040112 <__udivsi3+0x52>
1004010e:	038b      	lsls	r3, r1, #14
10040110:	1ac0      	subs	r0, r0, r3
10040112:	4152      	adcs	r2, r2
10040114:	0b43      	lsrs	r3, r0, #13
10040116:	428b      	cmp	r3, r1
10040118:	d301      	bcc.n	1004011e <__udivsi3+0x5e>
1004011a:	034b      	lsls	r3, r1, #13
1004011c:	1ac0      	subs	r0, r0, r3
1004011e:	4152      	adcs	r2, r2
10040120:	0b03      	lsrs	r3, r0, #12
10040122:	428b      	cmp	r3, r1
10040124:	d301      	bcc.n	1004012a <__udivsi3+0x6a>
10040126:	030b      	lsls	r3, r1, #12
10040128:	1ac0      	subs	r0, r0, r3
1004012a:	4152      	adcs	r2, r2
1004012c:	0ac3      	lsrs	r3, r0, #11
1004012e:	428b      	cmp	r3, r1
10040130:	d301      	bcc.n	10040136 <__udivsi3+0x76>
10040132:	02cb      	lsls	r3, r1, #11
10040134:	1ac0      	subs	r0, r0, r3
10040136:	4152      	adcs	r2, r2
10040138:	0a83      	lsrs	r3, r0, #10
1004013a:	428b      	cmp	r3, r1
1004013c:	d301      	bcc.n	10040142 <__udivsi3+0x82>
1004013e:	028b      	lsls	r3, r1, #10
10040140:	1ac0      	subs	r0, r0, r3
10040142:	4152      	adcs	r2, r2
10040144:	0a43      	lsrs	r3, r0, #9
10040146:	428b      	cmp	r3, r1
10040148:	d301      	bcc.n	1004014e <__udivsi3+0x8e>
1004014a:	024b      	lsls	r3, r1, #9
1004014c:	1ac0      	subs	r0, r0, r3
1004014e:	4152      	adcs	r2, r2
10040150:	0a03      	lsrs	r3, r0, #8
10040152:	428b      	cmp	r3, r1
10040154:	d301      	bcc.n	1004015a <__udivsi3+0x9a>
10040156:	020b      	lsls	r3, r1, #8
10040158:	1ac0      	subs	r0, r0, r3
1004015a:	4152      	adcs	r2, r2
1004015c:	d2cd      	bcs.n	100400fa <__udivsi3+0x3a>
1004015e:	09c3      	lsrs	r3, r0, #7
10040160:	428b      	cmp	r3, r1
10040162:	d301      	bcc.n	10040168 <__udivsi3+0xa8>
10040164:	01cb      	lsls	r3, r1, #7
10040166:	1ac0      	subs	r0, r0, r3
10040168:	4152      	adcs	r2, r2
1004016a:	0983      	lsrs	r3, r0, #6
1004016c:	428b      	cmp	r3, r1
1004016e:	d301      	bcc.n	10040174 <__udivsi3+0xb4>
10040170:	018b      	lsls	r3, r1, #6
10040172:	1ac0      	subs	r0, r0, r3
10040174:	4152      	adcs	r2, r2
10040176:	0943      	lsrs	r3, r0, #5
10040178:	428b      	cmp	r3, r1
1004017a:	d301      	bcc.n	10040180 <__udivsi3+0xc0>
1004017c:	014b      	lsls	r3, r1, #5
1004017e:	1ac0      	subs	r0, r0, r3
10040180:	4152      	adcs	r2, r2
10040182:	0903      	lsrs	r3, r0, #4
10040184:	428b      	cmp	r3, r1
10040186:	d301      	bcc.n	1004018c <__udivsi3+0xcc>
10040188:	010b      	lsls	r3, r1, #4
1004018a:	1ac0      	subs	r0, r0, r3
1004018c:	4152      	adcs	r2, r2
1004018e:	08c3      	lsrs	r3, r0, #3
10040190:	428b      	cmp	r3, r1
10040192:	d301      	bcc.n	10040198 <__udivsi3+0xd8>
10040194:	00cb      	lsls	r3, r1, #3
10040196:	1ac0      	subs	r0, r0, r3
10040198:	4152      	adcs	r2, r2
1004019a:	0883      	lsrs	r3, r0, #2
1004019c:	428b      	cmp	r3, r1
1004019e:	d301      	bcc.n	100401a4 <__udivsi3+0xe4>
100401a0:	008b      	lsls	r3, r1, #2
100401a2:	1ac0      	subs	r0, r0, r3
100401a4:	4152      	adcs	r2, r2
100401a6:	0843      	lsrs	r3, r0, #1
100401a8:	428b      	cmp	r3, r1
100401aa:	d301      	bcc.n	100401b0 <__udivsi3+0xf0>
100401ac:	004b      	lsls	r3, r1, #1
100401ae:	1ac0      	subs	r0, r0, r3
100401b0:	4152      	adcs	r2, r2
100401b2:	1a41      	subs	r1, r0, r1
100401b4:	d200      	bcs.n	100401b8 <__udivsi3+0xf8>
100401b6:	4601      	mov	r1, r0
100401b8:	4152      	adcs	r2, r2
100401ba:	4610      	mov	r0, r2
100401bc:	4770      	bx	lr
100401be:	e7ff      	b.n	100401c0 <__udivsi3+0x100>
100401c0:	b501      	push	{r0, lr}
100401c2:	2000      	movs	r0, #0
100401c4:	f000 f806 	bl	100401d4 <__aeabi_idiv0>
100401c8:	bd02      	pop	{r1, pc}
100401ca:	46c0      	nop			@ (mov r8, r8)

100401cc <__aeabi_uidivmod>:
100401cc:	2900      	cmp	r1, #0
100401ce:	d0f7      	beq.n	100401c0 <__udivsi3+0x100>
100401d0:	e776      	b.n	100400c0 <__udivsi3>
100401d2:	4770      	bx	lr

100401d4 <__aeabi_idiv0>:
100401d4:	4770      	bx	lr
100401d6:	46c0      	nop			@ (mov r8, r8)

100401d8 <BQ27427_Read>:
 * @brief Lê um registrador do sensor.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor.
 * @param command Endereço do registrador a ser lido.
 * @return Valor de 16 bits do registrador lido. Retorna 0xFFFF em caso de erro.
 */
static uint16_t BQ27427_Read(BQ27427_t *sensor_BQ27427, uint16_t command) {
100401d8:	b580      	push	{r7, lr}
100401da:	b088      	sub	sp, #32
100401dc:	af04      	add	r7, sp, #16
100401de:	6078      	str	r0, [r7, #4]
100401e0:	000a      	movs	r2, r1
100401e2:	1cbb      	adds	r3, r7, #2
100401e4:	801a      	strh	r2, [r3, #0]
    uint8_t aRxBuffer[2];
    uint16_t resultado;

    if (HAL_I2C_Mem_Read(sensor_BQ27427->hi2c, BQ27427_I2C_ADDR, command, I2C_MEMADD_SIZE_8BIT, aRxBuffer, 2, BQ27427_MAX_DELAY) != HAL_OK) {
100401e6:	687b      	ldr	r3, [r7, #4]
100401e8:	6818      	ldr	r0, [r3, #0]
100401ea:	1cbb      	adds	r3, r7, #2
100401ec:	881a      	ldrh	r2, [r3, #0]
100401ee:	2396      	movs	r3, #150	@ 0x96
100401f0:	009b      	lsls	r3, r3, #2
100401f2:	9302      	str	r3, [sp, #8]
100401f4:	2302      	movs	r3, #2
100401f6:	9301      	str	r3, [sp, #4]
100401f8:	230c      	movs	r3, #12
100401fa:	18fb      	adds	r3, r7, r3
100401fc:	9300      	str	r3, [sp, #0]
100401fe:	2301      	movs	r3, #1
10040200:	21aa      	movs	r1, #170	@ 0xaa
10040202:	f001 fa45 	bl	10041690 <HAL_I2C_Mem_Read>
10040206:	1e03      	subs	r3, r0, #0
10040208:	d005      	beq.n	10040216 <BQ27427_Read+0x3e>
        resultado = 0xFFFF; // Retorna um valor inválido em caso de falha
1004020a:	230e      	movs	r3, #14
1004020c:	18fb      	adds	r3, r7, r3
1004020e:	2201      	movs	r2, #1
10040210:	4252      	negs	r2, r2
10040212:	801a      	strh	r2, [r3, #0]
10040214:	e00d      	b.n	10040232 <BQ27427_Read+0x5a>
    } else {
        resultado = (aRxBuffer[1] << 8) | aRxBuffer[0]; // Concatena os bytes em um valor de 16 bits
10040216:	210c      	movs	r1, #12
10040218:	187b      	adds	r3, r7, r1
1004021a:	785b      	ldrb	r3, [r3, #1]
1004021c:	b21b      	sxth	r3, r3
1004021e:	021b      	lsls	r3, r3, #8
10040220:	b21a      	sxth	r2, r3
10040222:	187b      	adds	r3, r7, r1
10040224:	781b      	ldrb	r3, [r3, #0]
10040226:	b21b      	sxth	r3, r3
10040228:	4313      	orrs	r3, r2
1004022a:	b21a      	sxth	r2, r3
1004022c:	230e      	movs	r3, #14
1004022e:	18fb      	adds	r3, r7, r3
10040230:	801a      	strh	r2, [r3, #0]
    }
    return resultado;
10040232:	230e      	movs	r3, #14
10040234:	18fb      	adds	r3, r7, r3
10040236:	881b      	ldrh	r3, [r3, #0]
}
10040238:	0018      	movs	r0, r3
1004023a:	46bd      	mov	sp, r7
1004023c:	b004      	add	sp, #16
1004023e:	bd80      	pop	{r7, pc}

10040240 <BQ27427_Write>:
 * @param   aTxBuffer       Ponteiro para o buffer de dados a serem enviados.
 * @param   len             Quantidade de bytes a escrever.
 * @return  Código de status HAL (HAL_OK em sucesso).
 */

static HAL_StatusTypeDef BQ27427_Write(BQ27427_t *sensor_BQ27427, uint8_t command, const uint8_t *aTxBuffer, uint8_t len){
10040240:	b5b0      	push	{r4, r5, r7, lr}
10040242:	b088      	sub	sp, #32
10040244:	af04      	add	r7, sp, #16
10040246:	60f8      	str	r0, [r7, #12]
10040248:	0008      	movs	r0, r1
1004024a:	607a      	str	r2, [r7, #4]
1004024c:	0019      	movs	r1, r3
1004024e:	240b      	movs	r4, #11
10040250:	193b      	adds	r3, r7, r4
10040252:	1c02      	adds	r2, r0, #0
10040254:	701a      	strb	r2, [r3, #0]
10040256:	250a      	movs	r5, #10
10040258:	197b      	adds	r3, r7, r5
1004025a:	1c0a      	adds	r2, r1, #0
1004025c:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Write(sensor_BQ27427->hi2c, BQ27427_I2C_ADDR, command, I2C_MEMADD_SIZE_8BIT, (uint8_t*)aTxBuffer, len, BQ27427_MAX_DELAY);
1004025e:	68fb      	ldr	r3, [r7, #12]
10040260:	6818      	ldr	r0, [r3, #0]
10040262:	193b      	adds	r3, r7, r4
10040264:	781b      	ldrb	r3, [r3, #0]
10040266:	b299      	uxth	r1, r3
10040268:	197b      	adds	r3, r7, r5
1004026a:	781b      	ldrb	r3, [r3, #0]
1004026c:	b29b      	uxth	r3, r3
1004026e:	2296      	movs	r2, #150	@ 0x96
10040270:	0092      	lsls	r2, r2, #2
10040272:	9202      	str	r2, [sp, #8]
10040274:	9301      	str	r3, [sp, #4]
10040276:	687b      	ldr	r3, [r7, #4]
10040278:	9300      	str	r3, [sp, #0]
1004027a:	2301      	movs	r3, #1
1004027c:	000a      	movs	r2, r1
1004027e:	21aa      	movs	r1, #170	@ 0xaa
10040280:	f001 f8d8 	bl	10041434 <HAL_I2C_Mem_Write>
10040284:	0003      	movs	r3, r0
}
10040286:	0018      	movs	r0, r3
10040288:	46bd      	mov	sp, r7
1004028a:	b004      	add	sp, #16
1004028c:	bdb0      	pop	{r4, r5, r7, pc}

1004028e <BQ27427_Init>:
//	}
//
//	return HAL_OK;
//}

void BQ27427_Init(BQ27427_t *sensor_BQ27427, I2C_HandleTypeDef *hi2c) {
1004028e:	b580      	push	{r7, lr}
10040290:	b082      	sub	sp, #8
10040292:	af00      	add	r7, sp, #0
10040294:	6078      	str	r0, [r7, #4]
10040296:	6039      	str	r1, [r7, #0]
    sensor_BQ27427->hi2c = hi2c; // Associa a interface I2C ao sensor
10040298:	687b      	ldr	r3, [r7, #4]
1004029a:	683a      	ldr	r2, [r7, #0]
1004029c:	601a      	str	r2, [r3, #0]
}
1004029e:	46c0      	nop			@ (mov r8, r8)
100402a0:	46bd      	mov	sp, r7
100402a2:	b002      	add	sp, #8
100402a4:	bd80      	pop	{r7, pc}
	...

100402a8 <BQ27427_ReadVoltage>:

/**
 * @brief Lê a voltagem atual da bateria em mV.
 * @return Voltagem da bateria.
 */
uint16_t BQ27427_ReadVoltage(BQ27427_t *sensor_BQ27427) {
100402a8:	b580      	push	{r7, lr}
100402aa:	b082      	sub	sp, #8
100402ac:	af00      	add	r7, sp, #0
100402ae:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0504);
100402b0:	4a05      	ldr	r2, [pc, #20]	@ (100402c8 <BQ27427_ReadVoltage+0x20>)
100402b2:	687b      	ldr	r3, [r7, #4]
100402b4:	0011      	movs	r1, r2
100402b6:	0018      	movs	r0, r3
100402b8:	f7ff ff8e 	bl	100401d8 <BQ27427_Read>
100402bc:	0003      	movs	r3, r0
}
100402be:	0018      	movs	r0, r3
100402c0:	46bd      	mov	sp, r7
100402c2:	b002      	add	sp, #8
100402c4:	bd80      	pop	{r7, pc}
100402c6:	46c0      	nop			@ (mov r8, r8)
100402c8:	00000504 	.word	0x00000504

100402cc <BQ27427_ReadNominalAvailableCapacity>:
/**
 * @brief Lê a capacidade nominal disponível da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade nominal disponível em mAh.
 */
uint16_t BQ27427_ReadNominalAvailableCapacity(BQ27427_t *sensor_BQ27427) {
100402cc:	b580      	push	{r7, lr}
100402ce:	b082      	sub	sp, #8
100402d0:	af00      	add	r7, sp, #0
100402d2:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0908);
100402d4:	4a05      	ldr	r2, [pc, #20]	@ (100402ec <BQ27427_ReadNominalAvailableCapacity+0x20>)
100402d6:	687b      	ldr	r3, [r7, #4]
100402d8:	0011      	movs	r1, r2
100402da:	0018      	movs	r0, r3
100402dc:	f7ff ff7c 	bl	100401d8 <BQ27427_Read>
100402e0:	0003      	movs	r3, r0
}
100402e2:	0018      	movs	r0, r3
100402e4:	46bd      	mov	sp, r7
100402e6:	b002      	add	sp, #8
100402e8:	bd80      	pop	{r7, pc}
100402ea:	46c0      	nop			@ (mov r8, r8)
100402ec:	00000908 	.word	0x00000908

100402f0 <BQ27427_ReadFullAvailableCapacity>:
/**
 * @brief Lê a capacidade total disponível da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade total disponível em mAh.
 */
uint16_t BQ27427_ReadFullAvailableCapacity(BQ27427_t *sensor_BQ27427) {
100402f0:	b580      	push	{r7, lr}
100402f2:	b082      	sub	sp, #8
100402f4:	af00      	add	r7, sp, #0
100402f6:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0A0B);
100402f8:	4a05      	ldr	r2, [pc, #20]	@ (10040310 <BQ27427_ReadFullAvailableCapacity+0x20>)
100402fa:	687b      	ldr	r3, [r7, #4]
100402fc:	0011      	movs	r1, r2
100402fe:	0018      	movs	r0, r3
10040300:	f7ff ff6a 	bl	100401d8 <BQ27427_Read>
10040304:	0003      	movs	r3, r0
}
10040306:	0018      	movs	r0, r3
10040308:	46bd      	mov	sp, r7
1004030a:	b002      	add	sp, #8
1004030c:	bd80      	pop	{r7, pc}
1004030e:	46c0      	nop			@ (mov r8, r8)
10040310:	00000a0b 	.word	0x00000a0b

10040314 <BQ27427_ReadRemainingCapacity>:
/**
 * @brief Lê a capacidade restante da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade restante em mAh.
 */
uint16_t BQ27427_ReadRemainingCapacity(BQ27427_t *sensor_BQ27427) {
10040314:	b580      	push	{r7, lr}
10040316:	b082      	sub	sp, #8
10040318:	af00      	add	r7, sp, #0
1004031a:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0D0C);
1004031c:	4a05      	ldr	r2, [pc, #20]	@ (10040334 <BQ27427_ReadRemainingCapacity+0x20>)
1004031e:	687b      	ldr	r3, [r7, #4]
10040320:	0011      	movs	r1, r2
10040322:	0018      	movs	r0, r3
10040324:	f7ff ff58 	bl	100401d8 <BQ27427_Read>
10040328:	0003      	movs	r3, r0
}
1004032a:	0018      	movs	r0, r3
1004032c:	46bd      	mov	sp, r7
1004032e:	b002      	add	sp, #8
10040330:	bd80      	pop	{r7, pc}
10040332:	46c0      	nop			@ (mov r8, r8)
10040334:	00000d0c 	.word	0x00000d0c

10040338 <BQ27427_ReadFullChargeCapacity>:
/**
 * @brief Lê a capacidade total de carga da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade total de carga em mAh.
 */
uint16_t BQ27427_ReadFullChargeCapacity(BQ27427_t *sensor_BQ27427) {
10040338:	b580      	push	{r7, lr}
1004033a:	b082      	sub	sp, #8
1004033c:	af00      	add	r7, sp, #0
1004033e:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x0E0F);
10040340:	4a05      	ldr	r2, [pc, #20]	@ (10040358 <BQ27427_ReadFullChargeCapacity+0x20>)
10040342:	687b      	ldr	r3, [r7, #4]
10040344:	0011      	movs	r1, r2
10040346:	0018      	movs	r0, r3
10040348:	f7ff ff46 	bl	100401d8 <BQ27427_Read>
1004034c:	0003      	movs	r3, r0
}
1004034e:	0018      	movs	r0, r3
10040350:	46bd      	mov	sp, r7
10040352:	b002      	add	sp, #8
10040354:	bd80      	pop	{r7, pc}
10040356:	46c0      	nop			@ (mov r8, r8)
10040358:	00000e0f 	.word	0x00000e0f

1004035c <BQ27427_ReadAverageCurrent>:
/**
 * @brief Lê a corrente média consumida pela bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Corrente média em mA.
 */
uint16_t BQ27427_ReadAverageCurrent(BQ27427_t *sensor_BQ27427) {
1004035c:	b580      	push	{r7, lr}
1004035e:	b082      	sub	sp, #8
10040360:	af00      	add	r7, sp, #0
10040362:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x1110);
10040364:	4a05      	ldr	r2, [pc, #20]	@ (1004037c <BQ27427_ReadAverageCurrent+0x20>)
10040366:	687b      	ldr	r3, [r7, #4]
10040368:	0011      	movs	r1, r2
1004036a:	0018      	movs	r0, r3
1004036c:	f7ff ff34 	bl	100401d8 <BQ27427_Read>
10040370:	0003      	movs	r3, r0
}
10040372:	0018      	movs	r0, r3
10040374:	46bd      	mov	sp, r7
10040376:	b002      	add	sp, #8
10040378:	bd80      	pop	{r7, pc}
1004037a:	46c0      	nop			@ (mov r8, r8)
1004037c:	00001110 	.word	0x00001110

10040380 <BQ27427_ReadStateOfCharge>:
/**
 * @brief Lê o estado de carga da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Estado de carga em porcentagem (%).
 */
uint16_t BQ27427_ReadStateOfCharge(BQ27427_t *sensor_BQ27427) {
10040380:	b580      	push	{r7, lr}
10040382:	b082      	sub	sp, #8
10040384:	af00      	add	r7, sp, #0
10040386:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x1D1C);
10040388:	4a05      	ldr	r2, [pc, #20]	@ (100403a0 <BQ27427_ReadStateOfCharge+0x20>)
1004038a:	687b      	ldr	r3, [r7, #4]
1004038c:	0011      	movs	r1, r2
1004038e:	0018      	movs	r0, r3
10040390:	f7ff ff22 	bl	100401d8 <BQ27427_Read>
10040394:	0003      	movs	r3, r0
}
10040396:	0018      	movs	r0, r3
10040398:	46bd      	mov	sp, r7
1004039a:	b002      	add	sp, #8
1004039c:	bd80      	pop	{r7, pc}
1004039e:	46c0      	nop			@ (mov r8, r8)
100403a0:	00001d1c 	.word	0x00001d1c

100403a4 <BQ27427_ReadRemainingCapacityUnfiltered>:
/**
 * @brief Lê a capacidade restante não filtrada da bateria.
 * @param sensor_BQ27427 Ponteiro para a estrutura do sensor BQ27427.
 * @return Capacidade restante não filtrada em mAh.
 */
uint16_t BQ27427_ReadRemainingCapacityUnfiltered(BQ27427_t *sensor_BQ27427) {
100403a4:	b580      	push	{r7, lr}
100403a6:	b082      	sub	sp, #8
100403a8:	af00      	add	r7, sp, #0
100403aa:	6078      	str	r0, [r7, #4]
    return BQ27427_Read(sensor_BQ27427, 0x2928);
100403ac:	4a05      	ldr	r2, [pc, #20]	@ (100403c4 <BQ27427_ReadRemainingCapacityUnfiltered+0x20>)
100403ae:	687b      	ldr	r3, [r7, #4]
100403b0:	0011      	movs	r1, r2
100403b2:	0018      	movs	r0, r3
100403b4:	f7ff ff10 	bl	100401d8 <BQ27427_Read>
100403b8:	0003      	movs	r3, r0
}
100403ba:	0018      	movs	r0, r3
100403bc:	46bd      	mov	sp, r7
100403be:	b002      	add	sp, #8
100403c0:	bd80      	pop	{r7, pc}
100403c2:	46c0      	nop			@ (mov r8, r8)
100403c4:	00002928 	.word	0x00002928

100403c8 <BQ27427_selectDataBlock>:
 * @param   blockClass      Identificador da classe de bloco (DataBlockClass).
 * @param   offset          Offset dentro do bloco (DataBlockOffset).
 * @return  Código de status HAL (HAL_OK em sucesso).
 */

static HAL_StatusTypeDef BQ27427_selectDataBlock(BQ27427_t *sensor_BQ27427, uint8_t blockClass, uint8_t offset){
100403c8:	b5b0      	push	{r4, r5, r7, lr}
100403ca:	b084      	sub	sp, #16
100403cc:	af00      	add	r7, sp, #0
100403ce:	6078      	str	r0, [r7, #4]
100403d0:	0008      	movs	r0, r1
100403d2:	0011      	movs	r1, r2
100403d4:	1cfb      	adds	r3, r7, #3
100403d6:	1c02      	adds	r2, r0, #0
100403d8:	701a      	strb	r2, [r3, #0]
100403da:	1cbb      	adds	r3, r7, #2
100403dc:	1c0a      	adds	r2, r1, #0
100403de:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret;
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_REG_BLOCKDATA_CTRL, (uint8_t[]){0x00}, 1);
100403e0:	210c      	movs	r1, #12
100403e2:	187b      	adds	r3, r7, r1
100403e4:	2200      	movs	r2, #0
100403e6:	701a      	strb	r2, [r3, #0]
100403e8:	250f      	movs	r5, #15
100403ea:	197c      	adds	r4, r7, r5
100403ec:	187a      	adds	r2, r7, r1
100403ee:	6878      	ldr	r0, [r7, #4]
100403f0:	2301      	movs	r3, #1
100403f2:	2161      	movs	r1, #97	@ 0x61
100403f4:	f7ff ff24 	bl	10040240 <BQ27427_Write>
100403f8:	0003      	movs	r3, r0
100403fa:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
100403fc:	197b      	adds	r3, r7, r5
100403fe:	781b      	ldrb	r3, [r3, #0]
10040400:	2b00      	cmp	r3, #0
10040402:	d002      	beq.n	1004040a <BQ27427_selectDataBlock+0x42>
10040404:	197b      	adds	r3, r7, r5
10040406:	781b      	ldrb	r3, [r3, #0]
10040408:	e017      	b.n	1004043a <BQ27427_selectDataBlock+0x72>
    ret = BQ27427_Write(sensor_BQ27427, BQ27427_REG_DATACLASS, &blockClass, 1);
1004040a:	250f      	movs	r5, #15
1004040c:	197c      	adds	r4, r7, r5
1004040e:	1cfa      	adds	r2, r7, #3
10040410:	6878      	ldr	r0, [r7, #4]
10040412:	2301      	movs	r3, #1
10040414:	213e      	movs	r1, #62	@ 0x3e
10040416:	f7ff ff13 	bl	10040240 <BQ27427_Write>
1004041a:	0003      	movs	r3, r0
1004041c:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) return ret;
1004041e:	197b      	adds	r3, r7, r5
10040420:	781b      	ldrb	r3, [r3, #0]
10040422:	2b00      	cmp	r3, #0
10040424:	d002      	beq.n	1004042c <BQ27427_selectDataBlock+0x64>
10040426:	197b      	adds	r3, r7, r5
10040428:	781b      	ldrb	r3, [r3, #0]
1004042a:	e006      	b.n	1004043a <BQ27427_selectDataBlock+0x72>
    return BQ27427_Write(sensor_BQ27427, BQ27427_REG_DATAOFFSET, &offset, 1);
1004042c:	1cba      	adds	r2, r7, #2
1004042e:	6878      	ldr	r0, [r7, #4]
10040430:	2301      	movs	r3, #1
10040432:	213f      	movs	r1, #63	@ 0x3f
10040434:	f7ff ff04 	bl	10040240 <BQ27427_Write>
10040438:	0003      	movs	r3, r0
}
1004043a:	0018      	movs	r0, r3
1004043c:	46bd      	mov	sp, r7
1004043e:	b004      	add	sp, #16
10040440:	bdb0      	pop	{r4, r5, r7, pc}
	...

10040444 <BQ27427_GetDesignCapacity>:
 * @brief   Lê o valor atual de "Design Capacity" configurado no gauge.
 * @param   sensor_BQ27427 Ponteiro para o handle do sensor inicializado.
 * @return  Capacidade configurada em mAh, ou 0xFFFF em caso de erro.
 */

uint16_t BQ27427_GetDesignCapacity(BQ27427_t *sensor_BQ27427){
10040444:	b5b0      	push	{r4, r5, r7, lr}
10040446:	b088      	sub	sp, #32
10040448:	af00      	add	r7, sp, #0
1004044a:	6078      	str	r0, [r7, #4]
		HAL_StatusTypeDef ret;
//	    uint16_t flags;
	    uint16_t densign_capacity;
	    // 1) Unseal twice
	    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
1004044c:	2118      	movs	r1, #24
1004044e:	187b      	adds	r3, r7, r1
10040450:	4a28      	ldr	r2, [pc, #160]	@ (100404f4 <BQ27427_GetDesignCapacity+0xb0>)
10040452:	801a      	strh	r2, [r3, #0]
10040454:	187a      	adds	r2, r7, r1
10040456:	6878      	ldr	r0, [r7, #4]
10040458:	2302      	movs	r3, #2
1004045a:	2100      	movs	r1, #0
1004045c:	f7ff fef0 	bl	10040240 <BQ27427_Write>
	    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_UNSEAL);
10040460:	2114      	movs	r1, #20
10040462:	187b      	adds	r3, r7, r1
10040464:	4a23      	ldr	r2, [pc, #140]	@ (100404f4 <BQ27427_GetDesignCapacity+0xb0>)
10040466:	801a      	strh	r2, [r3, #0]
10040468:	187a      	adds	r2, r7, r1
1004046a:	6878      	ldr	r0, [r7, #4]
1004046c:	2302      	movs	r3, #2
1004046e:	2100      	movs	r1, #0
10040470:	f7ff fee6 	bl	10040240 <BQ27427_Write>

	    // 2) Enter CONFIG UPDATE
	    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_CFGUPDATE);
10040474:	2110      	movs	r1, #16
10040476:	187b      	adds	r3, r7, r1
10040478:	2213      	movs	r2, #19
1004047a:	801a      	strh	r2, [r3, #0]
1004047c:	187a      	adds	r2, r7, r1
1004047e:	6878      	ldr	r0, [r7, #4]
10040480:	2302      	movs	r3, #2
10040482:	2100      	movs	r1, #0
10040484:	f7ff fedc 	bl	10040240 <BQ27427_Write>
	    HAL_Delay(1100);
10040488:	4b1b      	ldr	r3, [pc, #108]	@ (100404f8 <BQ27427_GetDesignCapacity+0xb4>)
1004048a:	0018      	movs	r0, r3
1004048c:	f000 fcae 	bl	10040dec <HAL_Delay>
//	    do {
//	        flags = BQ27427_ReadFlags(sensor_BQ27427);
//	    } while (!(flags & BQ27427_FLAG_CFGUPMODE));

	    // 4) Select State block, offset 0
	    ret = BQ27427_selectDataBlock(sensor_BQ27427, BQ27427_BLOCK_CLASS_STATE, 0);
10040490:	251f      	movs	r5, #31
10040492:	197c      	adds	r4, r7, r5
10040494:	687b      	ldr	r3, [r7, #4]
10040496:	2200      	movs	r2, #0
10040498:	2152      	movs	r1, #82	@ 0x52
1004049a:	0018      	movs	r0, r3
1004049c:	f7ff ff94 	bl	100403c8 <BQ27427_selectDataBlock>
100404a0:	0003      	movs	r3, r0
100404a2:	7023      	strb	r3, [r4, #0]
	    if (ret != HAL_OK) return ret;
100404a4:	197b      	adds	r3, r7, r5
100404a6:	781b      	ldrb	r3, [r3, #0]
100404a8:	2b00      	cmp	r3, #0
100404aa:	d003      	beq.n	100404b4 <BQ27427_GetDesignCapacity+0x70>
100404ac:	197b      	adds	r3, r7, r5
100404ae:	781b      	ldrb	r3, [r3, #0]
100404b0:	b29b      	uxth	r3, r3
100404b2:	e01b      	b.n	100404ec <BQ27427_GetDesignCapacity+0xa8>

	    HAL_Delay(100);
100404b4:	2064      	movs	r0, #100	@ 0x64
100404b6:	f000 fc99 	bl	10040dec <HAL_Delay>
	    densign_capacity = BQ27427_Read(sensor_BQ27427, 0x4746);
100404ba:	251c      	movs	r5, #28
100404bc:	197c      	adds	r4, r7, r5
100404be:	4a0f      	ldr	r2, [pc, #60]	@ (100404fc <BQ27427_GetDesignCapacity+0xb8>)
100404c0:	687b      	ldr	r3, [r7, #4]
100404c2:	0011      	movs	r1, r2
100404c4:	0018      	movs	r0, r3
100404c6:	f7ff fe87 	bl	100401d8 <BQ27427_Read>
100404ca:	0003      	movs	r3, r0
100404cc:	8023      	strh	r3, [r4, #0]

	    // 7) Soft-reset to exit CONFIG UPDATE
	    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SOFT_RESET);
100404ce:	210c      	movs	r1, #12
100404d0:	187b      	adds	r3, r7, r1
100404d2:	2242      	movs	r2, #66	@ 0x42
100404d4:	801a      	strh	r2, [r3, #0]
100404d6:	187a      	adds	r2, r7, r1
100404d8:	6878      	ldr	r0, [r7, #4]
100404da:	2302      	movs	r3, #2
100404dc:	2100      	movs	r1, #0
100404de:	f7ff feaf 	bl	10040240 <BQ27427_Write>
	    HAL_Delay(10);
100404e2:	200a      	movs	r0, #10
100404e4:	f000 fc82 	bl	10040dec <HAL_Delay>

	    // Optional: re-seal
//	    BQ27427_sendCmd(sensor_BQ27427, BQ27427_SUBCMD_SEALED);

	    return densign_capacity;
100404e8:	197b      	adds	r3, r7, r5
100404ea:	881b      	ldrh	r3, [r3, #0]
}
100404ec:	0018      	movs	r0, r3
100404ee:	46bd      	mov	sp, r7
100404f0:	b008      	add	sp, #32
100404f2:	bdb0      	pop	{r4, r5, r7, pc}
100404f4:	ffff8000 	.word	0xffff8000
100404f8:	0000044c 	.word	0x0000044c
100404fc:	00004746 	.word	0x00004746

10040500 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040500:	b580      	push	{r7, lr}
10040502:	b084      	sub	sp, #16
10040504:	af00      	add	r7, sp, #0
10040506:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040508:	4b07      	ldr	r3, [pc, #28]	@ (10040528 <LL_AHB1_GRP1_EnableClock+0x28>)
1004050a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004050c:	4b06      	ldr	r3, [pc, #24]	@ (10040528 <LL_AHB1_GRP1_EnableClock+0x28>)
1004050e:	687a      	ldr	r2, [r7, #4]
10040510:	430a      	orrs	r2, r1
10040512:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040514:	4b04      	ldr	r3, [pc, #16]	@ (10040528 <LL_AHB1_GRP1_EnableClock+0x28>)
10040516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040518:	687a      	ldr	r2, [r7, #4]
1004051a:	4013      	ands	r3, r2
1004051c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004051e:	68fb      	ldr	r3, [r7, #12]
}
10040520:	46c0      	nop			@ (mov r8, r8)
10040522:	46bd      	mov	sp, r7
10040524:	b004      	add	sp, #16
10040526:	bd80      	pop	{r7, pc}
10040528:	48400000 	.word	0x48400000

1004052c <gauge_read>:
static HAL_StatusTypeDef gauge_write(uint8_t reg, uint8_t *data, uint8_t len){
    return HAL_I2C_Mem_Write(&hi2c1, BQ27427_I2C_ADDR, reg,
                             I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}

static uint16_t gauge_read(uint8_t reg, uint8_t *data, uint8_t len){
1004052c:	b580      	push	{r7, lr}
1004052e:	b086      	sub	sp, #24
10040530:	af04      	add	r7, sp, #16
10040532:	6039      	str	r1, [r7, #0]
10040534:	0011      	movs	r1, r2
10040536:	1dfb      	adds	r3, r7, #7
10040538:	1c02      	adds	r2, r0, #0
1004053a:	701a      	strb	r2, [r3, #0]
1004053c:	1dbb      	adds	r3, r7, #6
1004053e:	1c0a      	adds	r2, r1, #0
10040540:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Read(&hi2c1, BQ27427_I2C_ADDR, reg,
10040542:	1dfb      	adds	r3, r7, #7
10040544:	781b      	ldrb	r3, [r3, #0]
10040546:	b299      	uxth	r1, r3
10040548:	1dbb      	adds	r3, r7, #6
1004054a:	781b      	ldrb	r3, [r3, #0]
1004054c:	b29b      	uxth	r3, r3
1004054e:	4808      	ldr	r0, [pc, #32]	@ (10040570 <gauge_read+0x44>)
10040550:	2201      	movs	r2, #1
10040552:	4252      	negs	r2, r2
10040554:	9202      	str	r2, [sp, #8]
10040556:	9301      	str	r3, [sp, #4]
10040558:	683b      	ldr	r3, [r7, #0]
1004055a:	9300      	str	r3, [sp, #0]
1004055c:	2301      	movs	r3, #1
1004055e:	000a      	movs	r2, r1
10040560:	21aa      	movs	r1, #170	@ 0xaa
10040562:	f001 f895 	bl	10041690 <HAL_I2C_Mem_Read>
10040566:	0003      	movs	r3, r0
                            I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}
10040568:	0018      	movs	r0, r3
1004056a:	46bd      	mov	sp, r7
1004056c:	b002      	add	sp, #8
1004056e:	bd80      	pop	{r7, pc}
10040570:	200000c0 	.word	0x200000c0

10040574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10040574:	b590      	push	{r4, r7, lr}
10040576:	b089      	sub	sp, #36	@ 0x24
10040578:	af00      	add	r7, sp, #0
int main(void)
1004057a:	2330      	movs	r3, #48	@ 0x30
1004057c:	18fb      	adds	r3, r7, r3
1004057e:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10040580:	f000 fbaf 	bl	10040ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10040584:	f000 f866 	bl	10040654 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
10040588:	f000 f881 	bl	1004068e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
1004058c:	f000 f8dc 	bl	10040748 <MX_GPIO_Init>
  MX_I2C1_Init();
10040590:	f000 f89a 	bl	100406c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BQ27427_Init(&sensor, &hi2c1); // Inicializa o sensor
10040594:	4a2d      	ldr	r2, [pc, #180]	@ (1004064c <main+0xd8>)
10040596:	4b2e      	ldr	r3, [pc, #184]	@ (10040650 <main+0xdc>)
10040598:	0011      	movs	r1, r2
1004059a:	0018      	movs	r0, r3
1004059c:	f7ff fe77 	bl	1004028e <BQ27427_Init>

//	  uint16_t nova_capacidade = BQ27427_SetDesignCapacity(&sensor, 150);
//	  (void) nova_capacidade;
	  uint8_t old_lsb_CTTC;
	  uint8_t old_msb_CTTC;
	  gauge_read(0x55, &old_lsb_CTTC, 1);
100405a0:	1dfb      	adds	r3, r7, #7
100405a2:	2201      	movs	r2, #1
100405a4:	0019      	movs	r1, r3
100405a6:	2055      	movs	r0, #85	@ 0x55
100405a8:	f7ff ffc0 	bl	1004052c <gauge_read>
	  gauge_read(0x56, &old_msb_CTTC, 1);
100405ac:	1dbb      	adds	r3, r7, #6
100405ae:	2201      	movs	r2, #1
100405b0:	0019      	movs	r1, r3
100405b2:	2056      	movs	r0, #86	@ 0x56
100405b4:	f7ff ffba 	bl	1004052c <gauge_read>
	  uint16_t capacidade_da_bateria = BQ27427_GetDesignCapacity(&sensor);
100405b8:	231e      	movs	r3, #30
100405ba:	18fc      	adds	r4, r7, r3
100405bc:	4b24      	ldr	r3, [pc, #144]	@ (10040650 <main+0xdc>)
100405be:	0018      	movs	r0, r3
100405c0:	f7ff ff40 	bl	10040444 <BQ27427_GetDesignCapacity>
100405c4:	0003      	movs	r3, r0
100405c6:	8023      	strh	r3, [r4, #0]
	  (void)capacidade_da_bateria;
	  uint16_t nivel_da_bateria = BQ27427_ReadStateOfCharge(&sensor);
100405c8:	231c      	movs	r3, #28
100405ca:	18fc      	adds	r4, r7, r3
100405cc:	4b20      	ldr	r3, [pc, #128]	@ (10040650 <main+0xdc>)
100405ce:	0018      	movs	r0, r3
100405d0:	f7ff fed6 	bl	10040380 <BQ27427_ReadStateOfCharge>
100405d4:	0003      	movs	r3, r0
100405d6:	8023      	strh	r3, [r4, #0]
	  (void)nivel_da_bateria;
	  uint16_t voltage = BQ27427_ReadVoltage(&sensor);
100405d8:	231a      	movs	r3, #26
100405da:	18fc      	adds	r4, r7, r3
100405dc:	4b1c      	ldr	r3, [pc, #112]	@ (10040650 <main+0xdc>)
100405de:	0018      	movs	r0, r3
100405e0:	f7ff fe62 	bl	100402a8 <BQ27427_ReadVoltage>
100405e4:	0003      	movs	r3, r0
100405e6:	8023      	strh	r3, [r4, #0]
	  (void)voltage;
	  uint16_t current = BQ27427_ReadAverageCurrent(&sensor);
100405e8:	2318      	movs	r3, #24
100405ea:	18fc      	adds	r4, r7, r3
100405ec:	4b18      	ldr	r3, [pc, #96]	@ (10040650 <main+0xdc>)
100405ee:	0018      	movs	r0, r3
100405f0:	f7ff feb4 	bl	1004035c <BQ27427_ReadAverageCurrent>
100405f4:	0003      	movs	r3, r0
100405f6:	8023      	strh	r3, [r4, #0]
	  (void)current;
      uint16_t NominalAvailableCapacity = BQ27427_ReadNominalAvailableCapacity(&sensor);
100405f8:	2316      	movs	r3, #22
100405fa:	18fc      	adds	r4, r7, r3
100405fc:	4b14      	ldr	r3, [pc, #80]	@ (10040650 <main+0xdc>)
100405fe:	0018      	movs	r0, r3
10040600:	f7ff fe64 	bl	100402cc <BQ27427_ReadNominalAvailableCapacity>
10040604:	0003      	movs	r3, r0
10040606:	8023      	strh	r3, [r4, #0]
      (void)NominalAvailableCapacity;
      uint16_t FullAvailableCapacity = BQ27427_ReadFullAvailableCapacity(&sensor);
10040608:	2314      	movs	r3, #20
1004060a:	18fc      	adds	r4, r7, r3
1004060c:	4b10      	ldr	r3, [pc, #64]	@ (10040650 <main+0xdc>)
1004060e:	0018      	movs	r0, r3
10040610:	f7ff fe6e 	bl	100402f0 <BQ27427_ReadFullAvailableCapacity>
10040614:	0003      	movs	r3, r0
10040616:	8023      	strh	r3, [r4, #0]
      (void)FullAvailableCapacity;
//      uint8_t bat_ins[] = {0x0C,0x00};
//      gauge_write(0x00, bat_ins, 2);
//      HAL_Delay(10);
      uint16_t RemainingCapacity = BQ27427_ReadRemainingCapacity(&sensor);
10040618:	2312      	movs	r3, #18
1004061a:	18fc      	adds	r4, r7, r3
1004061c:	4b0c      	ldr	r3, [pc, #48]	@ (10040650 <main+0xdc>)
1004061e:	0018      	movs	r0, r3
10040620:	f7ff fe78 	bl	10040314 <BQ27427_ReadRemainingCapacity>
10040624:	0003      	movs	r3, r0
10040626:	8023      	strh	r3, [r4, #0]
      (void)RemainingCapacity;
      uint16_t FullChargeCapacity = BQ27427_ReadFullChargeCapacity(&sensor);
10040628:	2310      	movs	r3, #16
1004062a:	18fc      	adds	r4, r7, r3
1004062c:	4b08      	ldr	r3, [pc, #32]	@ (10040650 <main+0xdc>)
1004062e:	0018      	movs	r0, r3
10040630:	f7ff fe82 	bl	10040338 <BQ27427_ReadFullChargeCapacity>
10040634:	0003      	movs	r3, r0
10040636:	8023      	strh	r3, [r4, #0]
      (void)FullChargeCapacity;
      uint16_t RemainingCapacityUnfiltered = BQ27427_ReadRemainingCapacityUnfiltered(&sensor);
10040638:	230e      	movs	r3, #14
1004063a:	18fc      	adds	r4, r7, r3
1004063c:	4b04      	ldr	r3, [pc, #16]	@ (10040650 <main+0xdc>)
1004063e:	0018      	movs	r0, r3
10040640:	f7ff feb0 	bl	100403a4 <BQ27427_ReadRemainingCapacityUnfiltered>
10040644:	0003      	movs	r3, r0
10040646:	8023      	strh	r3, [r4, #0]
  {
10040648:	46c0      	nop			@ (mov r8, r8)
1004064a:	e7a9      	b.n	100405a0 <main+0x2c>
1004064c:	200000c0 	.word	0x200000c0
10040650:	20000114 	.word	0x20000114

10040654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10040654:	b580      	push	{r7, lr}
10040656:	b082      	sub	sp, #8
10040658:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1004065a:	003b      	movs	r3, r7
1004065c:	0018      	movs	r0, r3
1004065e:	2308      	movs	r3, #8
10040660:	001a      	movs	r2, r3
10040662:	2100      	movs	r1, #0
10040664:	f001 fee1 	bl	1004242a <memset>

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
10040668:	003b      	movs	r3, r7
1004066a:	2202      	movs	r2, #2
1004066c:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
1004066e:	003b      	movs	r3, r7
10040670:	2200      	movs	r2, #0
10040672:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10040674:	003b      	movs	r3, r7
10040676:	2110      	movs	r1, #16
10040678:	0018      	movs	r0, r3
1004067a:	f001 fd79 	bl	10042170 <HAL_RCC_ClockConfig>
1004067e:	1e03      	subs	r3, r0, #0
10040680:	d001      	beq.n	10040686 <SystemClock_Config+0x32>
  {
    Error_Handler();
10040682:	f000 f86c 	bl	1004075e <Error_Handler>
  }
}
10040686:	46c0      	nop			@ (mov r8, r8)
10040688:	46bd      	mov	sp, r7
1004068a:	b002      	add	sp, #8
1004068c:	bd80      	pop	{r7, pc}

1004068e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
1004068e:	b580      	push	{r7, lr}
10040690:	b086      	sub	sp, #24
10040692:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040694:	003b      	movs	r3, r7
10040696:	0018      	movs	r0, r3
10040698:	2318      	movs	r3, #24
1004069a:	001a      	movs	r2, r3
1004069c:	2100      	movs	r1, #0
1004069e:	f001 fec4 	bl	1004242a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100406a2:	003b      	movs	r3, r7
100406a4:	2202      	movs	r2, #2
100406a6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100406a8:	003b      	movs	r3, r7
100406aa:	2280      	movs	r2, #128	@ 0x80
100406ac:	0152      	lsls	r2, r2, #5
100406ae:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100406b0:	003b      	movs	r3, r7
100406b2:	0018      	movs	r0, r3
100406b4:	f001 fe7e 	bl	100423b4 <HAL_RCCEx_PeriphCLKConfig>
100406b8:	1e03      	subs	r3, r0, #0
100406ba:	d001      	beq.n	100406c0 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
100406bc:	f000 f84f 	bl	1004075e <Error_Handler>
  }
}
100406c0:	46c0      	nop			@ (mov r8, r8)
100406c2:	46bd      	mov	sp, r7
100406c4:	b006      	add	sp, #24
100406c6:	bd80      	pop	{r7, pc}

100406c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
100406c8:	b580      	push	{r7, lr}
100406ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
100406cc:	4b1c      	ldr	r3, [pc, #112]	@ (10040740 <MX_I2C1_Init+0x78>)
100406ce:	2282      	movs	r2, #130	@ 0x82
100406d0:	05d2      	lsls	r2, r2, #23
100406d2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
100406d4:	4b1a      	ldr	r3, [pc, #104]	@ (10040740 <MX_I2C1_Init+0x78>)
100406d6:	4a1b      	ldr	r2, [pc, #108]	@ (10040744 <MX_I2C1_Init+0x7c>)
100406d8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
100406da:	4b19      	ldr	r3, [pc, #100]	@ (10040740 <MX_I2C1_Init+0x78>)
100406dc:	2200      	movs	r2, #0
100406de:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
100406e0:	4b17      	ldr	r3, [pc, #92]	@ (10040740 <MX_I2C1_Init+0x78>)
100406e2:	2201      	movs	r2, #1
100406e4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
100406e6:	4b16      	ldr	r3, [pc, #88]	@ (10040740 <MX_I2C1_Init+0x78>)
100406e8:	2200      	movs	r2, #0
100406ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
100406ec:	4b14      	ldr	r3, [pc, #80]	@ (10040740 <MX_I2C1_Init+0x78>)
100406ee:	2200      	movs	r2, #0
100406f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100406f2:	4b13      	ldr	r3, [pc, #76]	@ (10040740 <MX_I2C1_Init+0x78>)
100406f4:	2200      	movs	r2, #0
100406f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
100406f8:	4b11      	ldr	r3, [pc, #68]	@ (10040740 <MX_I2C1_Init+0x78>)
100406fa:	2200      	movs	r2, #0
100406fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
100406fe:	4b10      	ldr	r3, [pc, #64]	@ (10040740 <MX_I2C1_Init+0x78>)
10040700:	2200      	movs	r2, #0
10040702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
10040704:	4b0e      	ldr	r3, [pc, #56]	@ (10040740 <MX_I2C1_Init+0x78>)
10040706:	0018      	movs	r0, r3
10040708:	f000 fdee 	bl	100412e8 <HAL_I2C_Init>
1004070c:	1e03      	subs	r3, r0, #0
1004070e:	d001      	beq.n	10040714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
10040710:	f000 f825 	bl	1004075e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
10040714:	4b0a      	ldr	r3, [pc, #40]	@ (10040740 <MX_I2C1_Init+0x78>)
10040716:	2100      	movs	r1, #0
10040718:	0018      	movs	r0, r3
1004071a:	f001 fbe9 	bl	10041ef0 <HAL_I2CEx_ConfigAnalogFilter>
1004071e:	1e03      	subs	r3, r0, #0
10040720:	d001      	beq.n	10040726 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
10040722:	f000 f81c 	bl	1004075e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
10040726:	4b06      	ldr	r3, [pc, #24]	@ (10040740 <MX_I2C1_Init+0x78>)
10040728:	2100      	movs	r1, #0
1004072a:	0018      	movs	r0, r3
1004072c:	f001 fc2c 	bl	10041f88 <HAL_I2CEx_ConfigDigitalFilter>
10040730:	1e03      	subs	r3, r0, #0
10040732:	d001      	beq.n	10040738 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
10040734:	f000 f813 	bl	1004075e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
10040738:	46c0      	nop			@ (mov r8, r8)
1004073a:	46bd      	mov	sp, r7
1004073c:	bd80      	pop	{r7, pc}
1004073e:	46c0      	nop			@ (mov r8, r8)
10040740:	200000c0 	.word	0x200000c0
10040744:	00303d5b 	.word	0x00303d5b

10040748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10040748:	b580      	push	{r7, lr}
1004074a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
1004074c:	2004      	movs	r0, #4
1004074e:	f7ff fed7 	bl	10040500 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
10040752:	2008      	movs	r0, #8
10040754:	f7ff fed4 	bl	10040500 <LL_AHB1_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10040758:	46c0      	nop			@ (mov r8, r8)
1004075a:	46bd      	mov	sp, r7
1004075c:	bd80      	pop	{r7, pc}

1004075e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1004075e:	b580      	push	{r7, lr}
10040760:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10040762:	b672      	cpsid	i
}
10040764:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10040766:	46c0      	nop			@ (mov r8, r8)
10040768:	e7fd      	b.n	10040766 <Error_Handler+0x8>
	...

1004076c <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
1004076c:	b580      	push	{r7, lr}
1004076e:	b082      	sub	sp, #8
10040770:	af00      	add	r7, sp, #0
10040772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040774:	4b08      	ldr	r3, [pc, #32]	@ (10040798 <LL_PWR_SetNoPullA+0x2c>)
10040776:	6a1a      	ldr	r2, [r3, #32]
10040778:	687b      	ldr	r3, [r7, #4]
1004077a:	43d9      	mvns	r1, r3
1004077c:	4b06      	ldr	r3, [pc, #24]	@ (10040798 <LL_PWR_SetNoPullA+0x2c>)
1004077e:	400a      	ands	r2, r1
10040780:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10040782:	4b05      	ldr	r3, [pc, #20]	@ (10040798 <LL_PWR_SetNoPullA+0x2c>)
10040784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040786:	687b      	ldr	r3, [r7, #4]
10040788:	43d9      	mvns	r1, r3
1004078a:	4b03      	ldr	r3, [pc, #12]	@ (10040798 <LL_PWR_SetNoPullA+0x2c>)
1004078c:	400a      	ands	r2, r1
1004078e:	625a      	str	r2, [r3, #36]	@ 0x24
}
10040790:	46c0      	nop			@ (mov r8, r8)
10040792:	46bd      	mov	sp, r7
10040794:	b002      	add	sp, #8
10040796:	bd80      	pop	{r7, pc}
10040798:	48500000 	.word	0x48500000

1004079c <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
1004079c:	b580      	push	{r7, lr}
1004079e:	b082      	sub	sp, #8
100407a0:	af00      	add	r7, sp, #0
100407a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
100407a4:	4b08      	ldr	r3, [pc, #32]	@ (100407c8 <LL_PWR_SetNoPullB+0x2c>)
100407a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100407a8:	687b      	ldr	r3, [r7, #4]
100407aa:	43d9      	mvns	r1, r3
100407ac:	4b06      	ldr	r3, [pc, #24]	@ (100407c8 <LL_PWR_SetNoPullB+0x2c>)
100407ae:	400a      	ands	r2, r1
100407b0:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
100407b2:	4b05      	ldr	r3, [pc, #20]	@ (100407c8 <LL_PWR_SetNoPullB+0x2c>)
100407b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100407b6:	687b      	ldr	r3, [r7, #4]
100407b8:	43d9      	mvns	r1, r3
100407ba:	4b03      	ldr	r3, [pc, #12]	@ (100407c8 <LL_PWR_SetNoPullB+0x2c>)
100407bc:	400a      	ands	r2, r1
100407be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100407c0:	46c0      	nop			@ (mov r8, r8)
100407c2:	46bd      	mov	sp, r7
100407c4:	b002      	add	sp, #8
100407c6:	bd80      	pop	{r7, pc}
100407c8:	48500000 	.word	0x48500000

100407cc <LL_AHB1_GRP1_EnableClock>:
{
100407cc:	b580      	push	{r7, lr}
100407ce:	b084      	sub	sp, #16
100407d0:	af00      	add	r7, sp, #0
100407d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100407d4:	4b07      	ldr	r3, [pc, #28]	@ (100407f4 <LL_AHB1_GRP1_EnableClock+0x28>)
100407d6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100407d8:	4b06      	ldr	r3, [pc, #24]	@ (100407f4 <LL_AHB1_GRP1_EnableClock+0x28>)
100407da:	687a      	ldr	r2, [r7, #4]
100407dc:	430a      	orrs	r2, r1
100407de:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100407e0:	4b04      	ldr	r3, [pc, #16]	@ (100407f4 <LL_AHB1_GRP1_EnableClock+0x28>)
100407e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100407e4:	687a      	ldr	r2, [r7, #4]
100407e6:	4013      	ands	r3, r2
100407e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100407ea:	68fb      	ldr	r3, [r7, #12]
}
100407ec:	46c0      	nop			@ (mov r8, r8)
100407ee:	46bd      	mov	sp, r7
100407f0:	b004      	add	sp, #16
100407f2:	bd80      	pop	{r7, pc}
100407f4:	48400000 	.word	0x48400000

100407f8 <LL_APB0_GRP1_EnableClock>:
  * @retval None
  * @note   LL_APB0_GRP1_PERIPH_TIM1 is valid only for STM32WB06 and STM32WB07
  * @note   LL_APB0_GRP1_PERIPH_TIM2, LL_APB0_GRP1_PERIPH_TIM16 and LL_APB0_GRP1_PERIPH_TIM17 are valid for STM32WB05 and STM32WB09
  */
__STATIC_INLINE void LL_APB0_GRP1_EnableClock(uint32_t Periphs)
{
100407f8:	b580      	push	{r7, lr}
100407fa:	b084      	sub	sp, #16
100407fc:	af00      	add	r7, sp, #0
100407fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB0ENR, Periphs);
10040800:	4b07      	ldr	r3, [pc, #28]	@ (10040820 <LL_APB0_GRP1_EnableClock+0x28>)
10040802:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040804:	4b06      	ldr	r3, [pc, #24]	@ (10040820 <LL_APB0_GRP1_EnableClock+0x28>)
10040806:	687a      	ldr	r2, [r7, #4]
10040808:	430a      	orrs	r2, r1
1004080a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004080c:	4b04      	ldr	r3, [pc, #16]	@ (10040820 <LL_APB0_GRP1_EnableClock+0x28>)
1004080e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040810:	687a      	ldr	r2, [r7, #4]
10040812:	4013      	ands	r3, r2
10040814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040816:	68fb      	ldr	r3, [r7, #12]
}
10040818:	46c0      	nop			@ (mov r8, r8)
1004081a:	46bd      	mov	sp, r7
1004081c:	b004      	add	sp, #16
1004081e:	bd80      	pop	{r7, pc}
10040820:	48400000 	.word	0x48400000

10040824 <LL_APB1_GRP1_EnableClock>:
  * @arg LL_APB1_GRP1_PERIPH_I2C2
  * @retval None
  * @note   LL_APB1_GRP1_PERIPH_SPI1, LL_APB1_GRP1_PERIPH_SPI2 and LL_APB1_GRP1_PERIPH_I2C2 are valid for STM32WB06 and STM32WB07
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
10040824:	b580      	push	{r7, lr}
10040826:	b084      	sub	sp, #16
10040828:	af00      	add	r7, sp, #0
1004082a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
1004082c:	4b07      	ldr	r3, [pc, #28]	@ (1004084c <LL_APB1_GRP1_EnableClock+0x28>)
1004082e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10040830:	4b06      	ldr	r3, [pc, #24]	@ (1004084c <LL_APB1_GRP1_EnableClock+0x28>)
10040832:	687a      	ldr	r2, [r7, #4]
10040834:	430a      	orrs	r2, r1
10040836:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10040838:	4b04      	ldr	r3, [pc, #16]	@ (1004084c <LL_APB1_GRP1_EnableClock+0x28>)
1004083a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004083c:	687a      	ldr	r2, [r7, #4]
1004083e:	4013      	ands	r3, r2
10040840:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040842:	68fb      	ldr	r3, [r7, #12]
}
10040844:	46c0      	nop			@ (mov r8, r8)
10040846:	46bd      	mov	sp, r7
10040848:	b004      	add	sp, #16
1004084a:	bd80      	pop	{r7, pc}
1004084c:	48400000 	.word	0x48400000

10040850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10040850:	b580      	push	{r7, lr}
10040852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10040854:	2380      	movs	r3, #128	@ 0x80
10040856:	005b      	lsls	r3, r3, #1
10040858:	0018      	movs	r0, r3
1004085a:	f7ff ffcd 	bl	100407f8 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1004085e:	46c0      	nop			@ (mov r8, r8)
10040860:	46bd      	mov	sp, r7
10040862:	bd80      	pop	{r7, pc}

10040864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10040864:	b590      	push	{r4, r7, lr}
10040866:	b089      	sub	sp, #36	@ 0x24
10040868:	af00      	add	r7, sp, #0
1004086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004086c:	240c      	movs	r4, #12
1004086e:	193b      	adds	r3, r7, r4
10040870:	0018      	movs	r0, r3
10040872:	2314      	movs	r3, #20
10040874:	001a      	movs	r2, r3
10040876:	2100      	movs	r1, #0
10040878:	f001 fdd7 	bl	1004242a <memset>
  if(hi2c->Instance==I2C1)
1004087c:	687b      	ldr	r3, [r7, #4]
1004087e:	681a      	ldr	r2, [r3, #0]
10040880:	2382      	movs	r3, #130	@ 0x82
10040882:	05db      	lsls	r3, r3, #23
10040884:	429a      	cmp	r2, r3
10040886:	d13c      	bne.n	10040902 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
10040888:	2004      	movs	r0, #4
1004088a:	f7ff ff9f 	bl	100407cc <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
1004088e:	2008      	movs	r0, #8
10040890:	f7ff ff9c 	bl	100407cc <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA0     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
10040894:	193b      	adds	r3, r7, r4
10040896:	2201      	movs	r2, #1
10040898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
1004089a:	193b      	adds	r3, r7, r4
1004089c:	2212      	movs	r2, #18
1004089e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100408a0:	193b      	adds	r3, r7, r4
100408a2:	2200      	movs	r2, #0
100408a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100408a6:	193b      	adds	r3, r7, r4
100408a8:	2200      	movs	r2, #0
100408aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100408ac:	193b      	adds	r3, r7, r4
100408ae:	2200      	movs	r2, #0
100408b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100408b2:	193a      	adds	r2, r7, r4
100408b4:	2390      	movs	r3, #144	@ 0x90
100408b6:	05db      	lsls	r3, r3, #23
100408b8:	0011      	movs	r1, r2
100408ba:	0018      	movs	r0, r3
100408bc:	f000 fb6e 	bl	10040f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
100408c0:	0021      	movs	r1, r4
100408c2:	187b      	adds	r3, r7, r1
100408c4:	2280      	movs	r2, #128	@ 0x80
100408c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100408c8:	187b      	adds	r3, r7, r1
100408ca:	2212      	movs	r2, #18
100408cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100408ce:	187b      	adds	r3, r7, r1
100408d0:	2200      	movs	r2, #0
100408d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100408d4:	187b      	adds	r3, r7, r1
100408d6:	2200      	movs	r2, #0
100408d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100408da:	187b      	adds	r3, r7, r1
100408dc:	2200      	movs	r2, #0
100408de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100408e0:	187b      	adds	r3, r7, r1
100408e2:	4a0a      	ldr	r2, [pc, #40]	@ (1004090c <HAL_I2C_MspInit+0xa8>)
100408e4:	0019      	movs	r1, r3
100408e6:	0010      	movs	r0, r2
100408e8:	f000 fb58 	bl	10040f9c <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_0);
100408ec:	2001      	movs	r0, #1
100408ee:	f7ff ff3d 	bl	1004076c <LL_PWR_SetNoPullA>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_7);
100408f2:	2080      	movs	r0, #128	@ 0x80
100408f4:	f7ff ff52 	bl	1004079c <LL_PWR_SetNoPullB>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
100408f8:	2380      	movs	r3, #128	@ 0x80
100408fa:	039b      	lsls	r3, r3, #14
100408fc:	0018      	movs	r0, r3
100408fe:	f7ff ff91 	bl	10040824 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
10040902:	46c0      	nop			@ (mov r8, r8)
10040904:	46bd      	mov	sp, r7
10040906:	b009      	add	sp, #36	@ 0x24
10040908:	bd90      	pop	{r4, r7, pc}
1004090a:	46c0      	nop			@ (mov r8, r8)
1004090c:	48100000 	.word	0x48100000

10040910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10040910:	b580      	push	{r7, lr}
10040912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10040914:	46c0      	nop			@ (mov r8, r8)
10040916:	e7fd      	b.n	10040914 <NMI_Handler+0x4>

10040918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10040918:	b580      	push	{r7, lr}
1004091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1004091c:	46c0      	nop			@ (mov r8, r8)
1004091e:	e7fd      	b.n	1004091c <HardFault_Handler+0x4>

10040920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10040920:	b580      	push	{r7, lr}
10040922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10040924:	46c0      	nop			@ (mov r8, r8)
10040926:	46bd      	mov	sp, r7
10040928:	bd80      	pop	{r7, pc}

1004092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004092a:	b580      	push	{r7, lr}
1004092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1004092e:	46c0      	nop			@ (mov r8, r8)
10040930:	46bd      	mov	sp, r7
10040932:	bd80      	pop	{r7, pc}

10040934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10040934:	b580      	push	{r7, lr}
10040936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10040938:	f000 fa32 	bl	10040da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1004093c:	46c0      	nop			@ (mov r8, r8)
1004093e:	46bd      	mov	sp, r7
10040940:	bd80      	pop	{r7, pc}
	...

10040944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10040944:	b590      	push	{r4, r7, lr}
10040946:	b083      	sub	sp, #12
10040948:	af00      	add	r7, sp, #0
1004094a:	0002      	movs	r2, r0
1004094c:	6039      	str	r1, [r7, #0]
1004094e:	1dfb      	adds	r3, r7, #7
10040950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10040952:	1dfb      	adds	r3, r7, #7
10040954:	781b      	ldrb	r3, [r3, #0]
10040956:	2b7f      	cmp	r3, #127	@ 0x7f
10040958:	d828      	bhi.n	100409ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004095a:	4a2f      	ldr	r2, [pc, #188]	@ (10040a18 <__NVIC_SetPriority+0xd4>)
1004095c:	1dfb      	adds	r3, r7, #7
1004095e:	781b      	ldrb	r3, [r3, #0]
10040960:	b25b      	sxtb	r3, r3
10040962:	089b      	lsrs	r3, r3, #2
10040964:	33c0      	adds	r3, #192	@ 0xc0
10040966:	009b      	lsls	r3, r3, #2
10040968:	589b      	ldr	r3, [r3, r2]
1004096a:	1dfa      	adds	r2, r7, #7
1004096c:	7812      	ldrb	r2, [r2, #0]
1004096e:	0011      	movs	r1, r2
10040970:	2203      	movs	r2, #3
10040972:	400a      	ands	r2, r1
10040974:	00d2      	lsls	r2, r2, #3
10040976:	21ff      	movs	r1, #255	@ 0xff
10040978:	4091      	lsls	r1, r2
1004097a:	000a      	movs	r2, r1
1004097c:	43d2      	mvns	r2, r2
1004097e:	401a      	ands	r2, r3
10040980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040982:	683b      	ldr	r3, [r7, #0]
10040984:	019b      	lsls	r3, r3, #6
10040986:	22ff      	movs	r2, #255	@ 0xff
10040988:	401a      	ands	r2, r3
1004098a:	1dfb      	adds	r3, r7, #7
1004098c:	781b      	ldrb	r3, [r3, #0]
1004098e:	0018      	movs	r0, r3
10040990:	2303      	movs	r3, #3
10040992:	4003      	ands	r3, r0
10040994:	00db      	lsls	r3, r3, #3
10040996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040998:	481f      	ldr	r0, [pc, #124]	@ (10040a18 <__NVIC_SetPriority+0xd4>)
1004099a:	1dfb      	adds	r3, r7, #7
1004099c:	781b      	ldrb	r3, [r3, #0]
1004099e:	b25b      	sxtb	r3, r3
100409a0:	089b      	lsrs	r3, r3, #2
100409a2:	430a      	orrs	r2, r1
100409a4:	33c0      	adds	r3, #192	@ 0xc0
100409a6:	009b      	lsls	r3, r3, #2
100409a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100409aa:	e031      	b.n	10040a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100409ac:	4a1b      	ldr	r2, [pc, #108]	@ (10040a1c <__NVIC_SetPriority+0xd8>)
100409ae:	1dfb      	adds	r3, r7, #7
100409b0:	781b      	ldrb	r3, [r3, #0]
100409b2:	0019      	movs	r1, r3
100409b4:	230f      	movs	r3, #15
100409b6:	400b      	ands	r3, r1
100409b8:	3b08      	subs	r3, #8
100409ba:	089b      	lsrs	r3, r3, #2
100409bc:	3306      	adds	r3, #6
100409be:	009b      	lsls	r3, r3, #2
100409c0:	18d3      	adds	r3, r2, r3
100409c2:	3304      	adds	r3, #4
100409c4:	681b      	ldr	r3, [r3, #0]
100409c6:	1dfa      	adds	r2, r7, #7
100409c8:	7812      	ldrb	r2, [r2, #0]
100409ca:	0011      	movs	r1, r2
100409cc:	2203      	movs	r2, #3
100409ce:	400a      	ands	r2, r1
100409d0:	00d2      	lsls	r2, r2, #3
100409d2:	21ff      	movs	r1, #255	@ 0xff
100409d4:	4091      	lsls	r1, r2
100409d6:	000a      	movs	r2, r1
100409d8:	43d2      	mvns	r2, r2
100409da:	401a      	ands	r2, r3
100409dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100409de:	683b      	ldr	r3, [r7, #0]
100409e0:	019b      	lsls	r3, r3, #6
100409e2:	22ff      	movs	r2, #255	@ 0xff
100409e4:	401a      	ands	r2, r3
100409e6:	1dfb      	adds	r3, r7, #7
100409e8:	781b      	ldrb	r3, [r3, #0]
100409ea:	0018      	movs	r0, r3
100409ec:	2303      	movs	r3, #3
100409ee:	4003      	ands	r3, r0
100409f0:	00db      	lsls	r3, r3, #3
100409f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100409f4:	4809      	ldr	r0, [pc, #36]	@ (10040a1c <__NVIC_SetPriority+0xd8>)
100409f6:	1dfb      	adds	r3, r7, #7
100409f8:	781b      	ldrb	r3, [r3, #0]
100409fa:	001c      	movs	r4, r3
100409fc:	230f      	movs	r3, #15
100409fe:	4023      	ands	r3, r4
10040a00:	3b08      	subs	r3, #8
10040a02:	089b      	lsrs	r3, r3, #2
10040a04:	430a      	orrs	r2, r1
10040a06:	3306      	adds	r3, #6
10040a08:	009b      	lsls	r3, r3, #2
10040a0a:	18c3      	adds	r3, r0, r3
10040a0c:	3304      	adds	r3, #4
10040a0e:	601a      	str	r2, [r3, #0]
}
10040a10:	46c0      	nop			@ (mov r8, r8)
10040a12:	46bd      	mov	sp, r7
10040a14:	b003      	add	sp, #12
10040a16:	bd90      	pop	{r4, r7, pc}
10040a18:	e000e100 	.word	0xe000e100
10040a1c:	e000ed00 	.word	0xe000ed00

10040a20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10040a20:	b580      	push	{r7, lr}
10040a22:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10040a24:	f3bf 8f4f 	dsb	sy
}
10040a28:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10040a2a:	4b04      	ldr	r3, [pc, #16]	@ (10040a3c <__NVIC_SystemReset+0x1c>)
10040a2c:	4a04      	ldr	r2, [pc, #16]	@ (10040a40 <__NVIC_SystemReset+0x20>)
10040a2e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10040a30:	f3bf 8f4f 	dsb	sy
}
10040a34:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10040a36:	46c0      	nop			@ (mov r8, r8)
10040a38:	e7fd      	b.n	10040a36 <__NVIC_SystemReset+0x16>
10040a3a:	46c0      	nop			@ (mov r8, r8)
10040a3c:	e000ed00 	.word	0xe000ed00
10040a40:	05fa0004 	.word	0x05fa0004

10040a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10040a44:	b590      	push	{r4, r7, lr}
10040a46:	b087      	sub	sp, #28
10040a48:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10040a4a:	4a64      	ldr	r2, [pc, #400]	@ (10040bdc <SystemInit+0x198>)
10040a4c:	2394      	movs	r3, #148	@ 0x94
10040a4e:	58d3      	ldr	r3, [r2, r3]
10040a50:	2b00      	cmp	r3, #0
10040a52:	d10e      	bne.n	10040a72 <SystemInit+0x2e>
10040a54:	4b62      	ldr	r3, [pc, #392]	@ (10040be0 <SystemInit+0x19c>)
10040a56:	691b      	ldr	r3, [r3, #16]
10040a58:	2b00      	cmp	r3, #0
10040a5a:	d103      	bne.n	10040a64 <SystemInit+0x20>
10040a5c:	4b60      	ldr	r3, [pc, #384]	@ (10040be0 <SystemInit+0x19c>)
10040a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10040a60:	2b00      	cmp	r3, #0
10040a62:	d006      	beq.n	10040a72 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10040a64:	4b5f      	ldr	r3, [pc, #380]	@ (10040be4 <SystemInit+0x1a0>)
10040a66:	2201      	movs	r2, #1
10040a68:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10040a6a:	f000 f901 	bl	10040c70 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10040a6e:	f7ff ffd7 	bl	10040a20 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10040a72:	4b5d      	ldr	r3, [pc, #372]	@ (10040be8 <SystemInit+0x1a4>)
10040a74:	4a5d      	ldr	r2, [pc, #372]	@ (10040bec <SystemInit+0x1a8>)
10040a76:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10040a78:	4b5b      	ldr	r3, [pc, #364]	@ (10040be8 <SystemInit+0x1a4>)
10040a7a:	689a      	ldr	r2, [r3, #8]
10040a7c:	4b59      	ldr	r3, [pc, #356]	@ (10040be4 <SystemInit+0x1a0>)
10040a7e:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10040a80:	4b57      	ldr	r3, [pc, #348]	@ (10040be0 <SystemInit+0x19c>)
10040a82:	685a      	ldr	r2, [r3, #4]
10040a84:	4b56      	ldr	r3, [pc, #344]	@ (10040be0 <SystemInit+0x19c>)
10040a86:	2120      	movs	r1, #32
10040a88:	430a      	orrs	r2, r1
10040a8a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
10040a8c:	4b54      	ldr	r3, [pc, #336]	@ (10040be0 <SystemInit+0x19c>)
10040a8e:	685a      	ldr	r2, [r3, #4]
10040a90:	4b53      	ldr	r3, [pc, #332]	@ (10040be0 <SystemInit+0x19c>)
10040a92:	2140      	movs	r1, #64	@ 0x40
10040a94:	430a      	orrs	r2, r1
10040a96:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10040a98:	4b51      	ldr	r3, [pc, #324]	@ (10040be0 <SystemInit+0x19c>)
10040a9a:	685a      	ldr	r2, [r3, #4]
10040a9c:	4b50      	ldr	r3, [pc, #320]	@ (10040be0 <SystemInit+0x19c>)
10040a9e:	2180      	movs	r1, #128	@ 0x80
10040aa0:	430a      	orrs	r2, r1
10040aa2:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10040aa4:	4b4e      	ldr	r3, [pc, #312]	@ (10040be0 <SystemInit+0x19c>)
10040aa6:	685a      	ldr	r2, [r3, #4]
10040aa8:	4b4d      	ldr	r3, [pc, #308]	@ (10040be0 <SystemInit+0x19c>)
10040aaa:	4951      	ldr	r1, [pc, #324]	@ (10040bf0 <SystemInit+0x1ac>)
10040aac:	400a      	ands	r2, r1
10040aae:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10040ab0:	46c0      	nop			@ (mov r8, r8)
10040ab2:	4b4b      	ldr	r3, [pc, #300]	@ (10040be0 <SystemInit+0x19c>)
10040ab4:	695b      	ldr	r3, [r3, #20]
10040ab6:	2204      	movs	r2, #4
10040ab8:	4013      	ands	r3, r2
10040aba:	2b04      	cmp	r3, #4
10040abc:	d1f9      	bne.n	10040ab2 <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10040abe:	4b48      	ldr	r3, [pc, #288]	@ (10040be0 <SystemInit+0x19c>)
10040ac0:	69db      	ldr	r3, [r3, #28]
10040ac2:	2230      	movs	r2, #48	@ 0x30
10040ac4:	4393      	bics	r3, r2
10040ac6:	001a      	movs	r2, r3
10040ac8:	4b45      	ldr	r3, [pc, #276]	@ (10040be0 <SystemInit+0x19c>)
10040aca:	2120      	movs	r1, #32
10040acc:	430a      	orrs	r2, r1
10040ace:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10040ad0:	4b43      	ldr	r3, [pc, #268]	@ (10040be0 <SystemInit+0x19c>)
10040ad2:	69da      	ldr	r2, [r3, #28]
10040ad4:	4b42      	ldr	r3, [pc, #264]	@ (10040be0 <SystemInit+0x19c>)
10040ad6:	4947      	ldr	r1, [pc, #284]	@ (10040bf4 <SystemInit+0x1b0>)
10040ad8:	400a      	ands	r2, r1
10040ada:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10040adc:	4b40      	ldr	r3, [pc, #256]	@ (10040be0 <SystemInit+0x19c>)
10040ade:	69da      	ldr	r2, [r3, #28]
10040ae0:	4b3f      	ldr	r3, [pc, #252]	@ (10040be0 <SystemInit+0x19c>)
10040ae2:	2180      	movs	r1, #128	@ 0x80
10040ae4:	0049      	lsls	r1, r1, #1
10040ae6:	430a      	orrs	r2, r1
10040ae8:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10040aea:	4b43      	ldr	r3, [pc, #268]	@ (10040bf8 <SystemInit+0x1b4>)
10040aec:	681b      	ldr	r3, [r3, #0]
10040aee:	4a43      	ldr	r2, [pc, #268]	@ (10040bfc <SystemInit+0x1b8>)
10040af0:	4293      	cmp	r3, r2
10040af2:	d055      	beq.n	10040ba0 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10040af4:	231f      	movs	r3, #31
10040af6:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10040af8:	2308      	movs	r3, #8
10040afa:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10040afc:	230a      	movs	r3, #10
10040afe:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10040b00:	2303      	movs	r3, #3
10040b02:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10040b04:	4b35      	ldr	r3, [pc, #212]	@ (10040bdc <SystemInit+0x198>)
10040b06:	68db      	ldr	r3, [r3, #12]
10040b08:	221e      	movs	r2, #30
10040b0a:	4393      	bics	r3, r2
10040b0c:	0019      	movs	r1, r3
10040b0e:	68fb      	ldr	r3, [r7, #12]
10040b10:	005a      	lsls	r2, r3, #1
10040b12:	4b32      	ldr	r3, [pc, #200]	@ (10040bdc <SystemInit+0x198>)
10040b14:	430a      	orrs	r2, r1
10040b16:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10040b18:	4b30      	ldr	r3, [pc, #192]	@ (10040bdc <SystemInit+0x198>)
10040b1a:	68da      	ldr	r2, [r3, #12]
10040b1c:	4b2f      	ldr	r3, [pc, #188]	@ (10040bdc <SystemInit+0x198>)
10040b1e:	2101      	movs	r1, #1
10040b20:	430a      	orrs	r2, r1
10040b22:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10040b24:	4b2d      	ldr	r3, [pc, #180]	@ (10040bdc <SystemInit+0x198>)
10040b26:	68db      	ldr	r3, [r3, #12]
10040b28:	4a35      	ldr	r2, [pc, #212]	@ (10040c00 <SystemInit+0x1bc>)
10040b2a:	4013      	ands	r3, r2
10040b2c:	0019      	movs	r1, r3
10040b2e:	693b      	ldr	r3, [r7, #16]
10040b30:	061a      	lsls	r2, r3, #24
10040b32:	4b2a      	ldr	r3, [pc, #168]	@ (10040bdc <SystemInit+0x198>)
10040b34:	430a      	orrs	r2, r1
10040b36:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10040b38:	4b28      	ldr	r3, [pc, #160]	@ (10040bdc <SystemInit+0x198>)
10040b3a:	68da      	ldr	r2, [r3, #12]
10040b3c:	4b27      	ldr	r3, [pc, #156]	@ (10040bdc <SystemInit+0x198>)
10040b3e:	2180      	movs	r1, #128	@ 0x80
10040b40:	0409      	lsls	r1, r1, #16
10040b42:	430a      	orrs	r2, r1
10040b44:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10040b46:	4a26      	ldr	r2, [pc, #152]	@ (10040be0 <SystemInit+0x19c>)
10040b48:	2394      	movs	r3, #148	@ 0x94
10040b4a:	58d3      	ldr	r3, [r2, r3]
10040b4c:	4a2d      	ldr	r2, [pc, #180]	@ (10040c04 <SystemInit+0x1c0>)
10040b4e:	401a      	ands	r2, r3
10040b50:	68bb      	ldr	r3, [r7, #8]
10040b52:	0199      	lsls	r1, r3, #6
10040b54:	23f0      	movs	r3, #240	@ 0xf0
10040b56:	009b      	lsls	r3, r3, #2
10040b58:	400b      	ands	r3, r1
10040b5a:	4921      	ldr	r1, [pc, #132]	@ (10040be0 <SystemInit+0x19c>)
10040b5c:	4313      	orrs	r3, r2
10040b5e:	2294      	movs	r2, #148	@ 0x94
10040b60:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10040b62:	4a1f      	ldr	r2, [pc, #124]	@ (10040be0 <SystemInit+0x19c>)
10040b64:	2394      	movs	r3, #148	@ 0x94
10040b66:	58d3      	ldr	r3, [r2, r3]
10040b68:	491d      	ldr	r1, [pc, #116]	@ (10040be0 <SystemInit+0x19c>)
10040b6a:	2220      	movs	r2, #32
10040b6c:	4313      	orrs	r3, r2
10040b6e:	2294      	movs	r2, #148	@ 0x94
10040b70:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10040b72:	4a1b      	ldr	r2, [pc, #108]	@ (10040be0 <SystemInit+0x19c>)
10040b74:	2394      	movs	r3, #148	@ 0x94
10040b76:	58d3      	ldr	r3, [r2, r3]
10040b78:	4a23      	ldr	r2, [pc, #140]	@ (10040c08 <SystemInit+0x1c4>)
10040b7a:	401a      	ands	r2, r3
10040b7c:	687b      	ldr	r3, [r7, #4]
10040b7e:	02d9      	lsls	r1, r3, #11
10040b80:	23e0      	movs	r3, #224	@ 0xe0
10040b82:	019b      	lsls	r3, r3, #6
10040b84:	400b      	ands	r3, r1
10040b86:	4916      	ldr	r1, [pc, #88]	@ (10040be0 <SystemInit+0x19c>)
10040b88:	4313      	orrs	r3, r2
10040b8a:	2294      	movs	r2, #148	@ 0x94
10040b8c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10040b8e:	4a14      	ldr	r2, [pc, #80]	@ (10040be0 <SystemInit+0x19c>)
10040b90:	2394      	movs	r3, #148	@ 0x94
10040b92:	58d3      	ldr	r3, [r2, r3]
10040b94:	4912      	ldr	r1, [pc, #72]	@ (10040be0 <SystemInit+0x19c>)
10040b96:	2280      	movs	r2, #128	@ 0x80
10040b98:	00d2      	lsls	r2, r2, #3
10040b9a:	4313      	orrs	r3, r2
10040b9c:	2294      	movs	r2, #148	@ 0x94
10040b9e:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10040ba0:	2317      	movs	r3, #23
10040ba2:	18fb      	adds	r3, r7, r3
10040ba4:	2200      	movs	r2, #0
10040ba6:	701a      	strb	r2, [r3, #0]
10040ba8:	e00d      	b.n	10040bc6 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10040baa:	2417      	movs	r4, #23
10040bac:	193b      	adds	r3, r7, r4
10040bae:	781b      	ldrb	r3, [r3, #0]
10040bb0:	b25b      	sxtb	r3, r3
10040bb2:	2103      	movs	r1, #3
10040bb4:	0018      	movs	r0, r3
10040bb6:	f7ff fec5 	bl	10040944 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10040bba:	0021      	movs	r1, r4
10040bbc:	187b      	adds	r3, r7, r1
10040bbe:	781a      	ldrb	r2, [r3, #0]
10040bc0:	187b      	adds	r3, r7, r1
10040bc2:	3201      	adds	r2, #1
10040bc4:	701a      	strb	r2, [r3, #0]
10040bc6:	2317      	movs	r3, #23
10040bc8:	18fb      	adds	r3, r7, r3
10040bca:	781b      	ldrb	r3, [r3, #0]
10040bcc:	2b1f      	cmp	r3, #31
10040bce:	d9ec      	bls.n	10040baa <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10040bd0:	b662      	cpsie	i
}
10040bd2:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10040bd4:	46c0      	nop			@ (mov r8, r8)
10040bd6:	46bd      	mov	sp, r7
10040bd8:	b007      	add	sp, #28
10040bda:	bd90      	pop	{r4, r7, pc}
10040bdc:	48400000 	.word	0x48400000
10040be0:	48500000 	.word	0x48500000
10040be4:	20000004 	.word	0x20000004
10040be8:	e000ed00 	.word	0xe000ed00
10040bec:	10040000 	.word	0x10040000
10040bf0:	fffffeff 	.word	0xfffffeff
10040bf4:	fffffbff 	.word	0xfffffbff
10040bf8:	10001ef8 	.word	0x10001ef8
10040bfc:	fcbceccc 	.word	0xfcbceccc
10040c00:	c0ffffff 	.word	0xc0ffffff
10040c04:	fffffc3f 	.word	0xfffffc3f
10040c08:	ffffc7ff 	.word	0xffffc7ff

10040c0c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10040c0c:	b580      	push	{r7, lr}
10040c0e:	b082      	sub	sp, #8
10040c10:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10040c12:	4b13      	ldr	r3, [pc, #76]	@ (10040c60 <SystemCoreClockUpdate+0x54>)
10040c14:	689b      	ldr	r3, [r3, #8]
10040c16:	085b      	lsrs	r3, r3, #1
10040c18:	b2da      	uxtb	r2, r3
10040c1a:	1dfb      	adds	r3, r7, #7
10040c1c:	2101      	movs	r1, #1
10040c1e:	400a      	ands	r2, r1
10040c20:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10040c22:	4b0f      	ldr	r3, [pc, #60]	@ (10040c60 <SystemCoreClockUpdate+0x54>)
10040c24:	689b      	ldr	r3, [r3, #8]
10040c26:	0a1b      	lsrs	r3, r3, #8
10040c28:	b2da      	uxtb	r2, r3
10040c2a:	1dbb      	adds	r3, r7, #6
10040c2c:	2107      	movs	r1, #7
10040c2e:	400a      	ands	r2, r1
10040c30:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10040c32:	1dfb      	adds	r3, r7, #7
10040c34:	781b      	ldrb	r3, [r3, #0]
10040c36:	2b00      	cmp	r3, #0
10040c38:	d007      	beq.n	10040c4a <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10040c3a:	1dbb      	adds	r3, r7, #6
10040c3c:	781b      	ldrb	r3, [r3, #0]
10040c3e:	3b01      	subs	r3, #1
10040c40:	4a08      	ldr	r2, [pc, #32]	@ (10040c64 <SystemCoreClockUpdate+0x58>)
10040c42:	40da      	lsrs	r2, r3
10040c44:	4b08      	ldr	r3, [pc, #32]	@ (10040c68 <SystemCoreClockUpdate+0x5c>)
10040c46:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10040c48:	e005      	b.n	10040c56 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10040c4a:	1dbb      	adds	r3, r7, #6
10040c4c:	781b      	ldrb	r3, [r3, #0]
10040c4e:	4a07      	ldr	r2, [pc, #28]	@ (10040c6c <SystemCoreClockUpdate+0x60>)
10040c50:	40da      	lsrs	r2, r3
10040c52:	4b05      	ldr	r3, [pc, #20]	@ (10040c68 <SystemCoreClockUpdate+0x5c>)
10040c54:	601a      	str	r2, [r3, #0]
}
10040c56:	46c0      	nop			@ (mov r8, r8)
10040c58:	46bd      	mov	sp, r7
10040c5a:	b002      	add	sp, #8
10040c5c:	bd80      	pop	{r7, pc}
10040c5e:	46c0      	nop			@ (mov r8, r8)
10040c60:	48400000 	.word	0x48400000
10040c64:	01e84800 	.word	0x01e84800
10040c68:	2000011c 	.word	0x2000011c
10040c6c:	03d09000 	.word	0x03d09000

10040c70 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10040c70:	b580      	push	{r7, lr}
10040c72:	af00      	add	r7, sp, #0
}
10040c74:	46c0      	nop			@ (mov r8, r8)
10040c76:	46bd      	mov	sp, r7
10040c78:	bd80      	pop	{r7, pc}
	...

10040c7c <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10040c7c:	4810      	ldr	r0, [pc, #64]	@ (10040cc0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10040c7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10040c80:	f7ff fee0 	bl	10040a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10040c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10040c86:	e003      	b.n	10040c90 <LoopCopyDataInit>

10040c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10040c88:	4b0e      	ldr	r3, [pc, #56]	@ (10040cc4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10040c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10040c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10040c8e:	3104      	adds	r1, #4

10040c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10040c90:	480d      	ldr	r0, [pc, #52]	@ (10040cc8 <LoopForever+0xa>)
  ldr  r3, =_edata
10040c92:	4b0e      	ldr	r3, [pc, #56]	@ (10040ccc <LoopForever+0xe>)
  adds  r2, r0, r1
10040c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10040c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10040c98:	d3f6      	bcc.n	10040c88 <CopyDataInit>
  ldr  r2, =_sbss
10040c9a:	4a0d      	ldr	r2, [pc, #52]	@ (10040cd0 <LoopForever+0x12>)
  b  LoopFillZerobss
10040c9c:	e002      	b.n	10040ca4 <LoopFillZerobss>

10040c9e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10040c9e:	2300      	movs	r3, #0
  str  r3, [r2]
10040ca0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10040ca2:	3204      	adds	r2, #4

10040ca4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10040ca4:	4b0b      	ldr	r3, [pc, #44]	@ (10040cd4 <LoopForever+0x16>)
  cmp  r2, r3
10040ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
10040ca8:	d3f9      	bcc.n	10040c9e <FillZerobss>
  ldr  r2, =_sbssblue
10040caa:	4a0b      	ldr	r2, [pc, #44]	@ (10040cd8 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10040cac:	e002      	b.n	10040cb4 <LoopFillZeroBlueRam>

10040cae <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10040cae:	2300      	movs	r3, #0
  str  r3, [r2]
10040cb0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10040cb2:	3204      	adds	r2, #4

10040cb4 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10040cb4:	4b09      	ldr	r3, [pc, #36]	@ (10040cdc <LoopForever+0x1e>)
  cmp  r2, r3
10040cb6:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10040cb8:	d3f9      	bcc.n	10040cae <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10040cba:	f7ff fc5b 	bl	10040574 <main>

10040cbe <LoopForever>:

LoopForever:
    b LoopForever
10040cbe:	e7fe      	b.n	10040cbe <LoopForever>
   ldr   r0, =_estack
10040cc0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10040cc4:	10042444 	.word	0x10042444
  ldr  r0, =_sdata
10040cc8:	2000011c 	.word	0x2000011c
  ldr  r3, =_edata
10040ccc:	20000128 	.word	0x20000128
  ldr  r2, =_sbss
10040cd0:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
10040cd4:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbssblue
10040cd8:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10040cdc:	200000c0 	.word	0x200000c0

10040ce0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10040ce0:	e7fe      	b.n	10040ce0 <ADC_IRQHandler>

10040ce2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10040ce2:	b580      	push	{r7, lr}
10040ce4:	b082      	sub	sp, #8
10040ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10040ce8:	1dfb      	adds	r3, r7, #7
10040cea:	2200      	movs	r2, #0
10040cec:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10040cee:	2003      	movs	r0, #3
10040cf0:	f000 f80e 	bl	10040d10 <HAL_InitTick>
10040cf4:	1e03      	subs	r3, r0, #0
10040cf6:	d003      	beq.n	10040d00 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10040cf8:	1dfb      	adds	r3, r7, #7
10040cfa:	2201      	movs	r2, #1
10040cfc:	701a      	strb	r2, [r3, #0]
10040cfe:	e001      	b.n	10040d04 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10040d00:	f7ff fda6 	bl	10040850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
10040d04:	1dfb      	adds	r3, r7, #7
10040d06:	781b      	ldrb	r3, [r3, #0]
}
10040d08:	0018      	movs	r0, r3
10040d0a:	46bd      	mov	sp, r7
10040d0c:	b002      	add	sp, #8
10040d0e:	bd80      	pop	{r7, pc}

10040d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10040d10:	b590      	push	{r4, r7, lr}
10040d12:	b085      	sub	sp, #20
10040d14:	af00      	add	r7, sp, #0
10040d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10040d18:	230f      	movs	r3, #15
10040d1a:	18fb      	adds	r3, r7, r3
10040d1c:	2200      	movs	r2, #0
10040d1e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10040d20:	4b1d      	ldr	r3, [pc, #116]	@ (10040d98 <HAL_InitTick+0x88>)
10040d22:	781b      	ldrb	r3, [r3, #0]
10040d24:	2b00      	cmp	r3, #0
10040d26:	d02c      	beq.n	10040d82 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10040d28:	f001 face 	bl	100422c8 <HAL_RCC_GetSysClockFreq>
10040d2c:	0004      	movs	r4, r0
10040d2e:	4b1a      	ldr	r3, [pc, #104]	@ (10040d98 <HAL_InitTick+0x88>)
10040d30:	781b      	ldrb	r3, [r3, #0]
10040d32:	0019      	movs	r1, r3
10040d34:	23fa      	movs	r3, #250	@ 0xfa
10040d36:	0098      	lsls	r0, r3, #2
10040d38:	f7ff f9c2 	bl	100400c0 <__udivsi3>
10040d3c:	0003      	movs	r3, r0
10040d3e:	0019      	movs	r1, r3
10040d40:	0020      	movs	r0, r4
10040d42:	f7ff f9bd 	bl	100400c0 <__udivsi3>
10040d46:	0003      	movs	r3, r0
10040d48:	0018      	movs	r0, r3
10040d4a:	f000 f91a 	bl	10040f82 <HAL_SYSTICK_Config>
10040d4e:	1e03      	subs	r3, r0, #0
10040d50:	d112      	bne.n	10040d78 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10040d52:	687b      	ldr	r3, [r7, #4]
10040d54:	2b03      	cmp	r3, #3
10040d56:	d80a      	bhi.n	10040d6e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10040d58:	6879      	ldr	r1, [r7, #4]
10040d5a:	2301      	movs	r3, #1
10040d5c:	425b      	negs	r3, r3
10040d5e:	2200      	movs	r2, #0
10040d60:	0018      	movs	r0, r3
10040d62:	f000 f8f9 	bl	10040f58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10040d66:	4b0d      	ldr	r3, [pc, #52]	@ (10040d9c <HAL_InitTick+0x8c>)
10040d68:	687a      	ldr	r2, [r7, #4]
10040d6a:	601a      	str	r2, [r3, #0]
10040d6c:	e00d      	b.n	10040d8a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10040d6e:	230f      	movs	r3, #15
10040d70:	18fb      	adds	r3, r7, r3
10040d72:	2201      	movs	r2, #1
10040d74:	701a      	strb	r2, [r3, #0]
10040d76:	e008      	b.n	10040d8a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10040d78:	230f      	movs	r3, #15
10040d7a:	18fb      	adds	r3, r7, r3
10040d7c:	2201      	movs	r2, #1
10040d7e:	701a      	strb	r2, [r3, #0]
10040d80:	e003      	b.n	10040d8a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10040d82:	230f      	movs	r3, #15
10040d84:	18fb      	adds	r3, r7, r3
10040d86:	2201      	movs	r2, #1
10040d88:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10040d8a:	230f      	movs	r3, #15
10040d8c:	18fb      	adds	r3, r7, r3
10040d8e:	781b      	ldrb	r3, [r3, #0]
}
10040d90:	0018      	movs	r0, r3
10040d92:	46bd      	mov	sp, r7
10040d94:	b005      	add	sp, #20
10040d96:	bd90      	pop	{r4, r7, pc}
10040d98:	20000124 	.word	0x20000124
10040d9c:	20000120 	.word	0x20000120

10040da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10040da0:	b580      	push	{r7, lr}
10040da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10040da4:	4b05      	ldr	r3, [pc, #20]	@ (10040dbc <HAL_IncTick+0x1c>)
10040da6:	781b      	ldrb	r3, [r3, #0]
10040da8:	001a      	movs	r2, r3
10040daa:	4b05      	ldr	r3, [pc, #20]	@ (10040dc0 <HAL_IncTick+0x20>)
10040dac:	681b      	ldr	r3, [r3, #0]
10040dae:	18d2      	adds	r2, r2, r3
10040db0:	4b03      	ldr	r3, [pc, #12]	@ (10040dc0 <HAL_IncTick+0x20>)
10040db2:	601a      	str	r2, [r3, #0]
}
10040db4:	46c0      	nop			@ (mov r8, r8)
10040db6:	46bd      	mov	sp, r7
10040db8:	bd80      	pop	{r7, pc}
10040dba:	46c0      	nop			@ (mov r8, r8)
10040dbc:	20000124 	.word	0x20000124
10040dc0:	20000118 	.word	0x20000118

10040dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10040dc4:	b580      	push	{r7, lr}
10040dc6:	af00      	add	r7, sp, #0
  return uwTick;
10040dc8:	4b02      	ldr	r3, [pc, #8]	@ (10040dd4 <HAL_GetTick+0x10>)
10040dca:	681b      	ldr	r3, [r3, #0]
}
10040dcc:	0018      	movs	r0, r3
10040dce:	46bd      	mov	sp, r7
10040dd0:	bd80      	pop	{r7, pc}
10040dd2:	46c0      	nop			@ (mov r8, r8)
10040dd4:	20000118 	.word	0x20000118

10040dd8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10040dd8:	b580      	push	{r7, lr}
10040dda:	af00      	add	r7, sp, #0
  return uwTickPrio;
10040ddc:	4b02      	ldr	r3, [pc, #8]	@ (10040de8 <HAL_GetTickPrio+0x10>)
10040dde:	681b      	ldr	r3, [r3, #0]
}
10040de0:	0018      	movs	r0, r3
10040de2:	46bd      	mov	sp, r7
10040de4:	bd80      	pop	{r7, pc}
10040de6:	46c0      	nop			@ (mov r8, r8)
10040de8:	20000120 	.word	0x20000120

10040dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10040dec:	b580      	push	{r7, lr}
10040dee:	b084      	sub	sp, #16
10040df0:	af00      	add	r7, sp, #0
10040df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10040df4:	f7ff ffe6 	bl	10040dc4 <HAL_GetTick>
10040df8:	0003      	movs	r3, r0
10040dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
10040dfc:	687b      	ldr	r3, [r7, #4]
10040dfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10040e00:	68fb      	ldr	r3, [r7, #12]
10040e02:	3301      	adds	r3, #1
10040e04:	d005      	beq.n	10040e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10040e06:	4b0a      	ldr	r3, [pc, #40]	@ (10040e30 <HAL_Delay+0x44>)
10040e08:	781b      	ldrb	r3, [r3, #0]
10040e0a:	001a      	movs	r2, r3
10040e0c:	68fb      	ldr	r3, [r7, #12]
10040e0e:	189b      	adds	r3, r3, r2
10040e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10040e12:	46c0      	nop			@ (mov r8, r8)
10040e14:	f7ff ffd6 	bl	10040dc4 <HAL_GetTick>
10040e18:	0002      	movs	r2, r0
10040e1a:	68bb      	ldr	r3, [r7, #8]
10040e1c:	1ad3      	subs	r3, r2, r3
10040e1e:	68fa      	ldr	r2, [r7, #12]
10040e20:	429a      	cmp	r2, r3
10040e22:	d8f7      	bhi.n	10040e14 <HAL_Delay+0x28>
  {
  }
}
10040e24:	46c0      	nop			@ (mov r8, r8)
10040e26:	46c0      	nop			@ (mov r8, r8)
10040e28:	46bd      	mov	sp, r7
10040e2a:	b004      	add	sp, #16
10040e2c:	bd80      	pop	{r7, pc}
10040e2e:	46c0      	nop			@ (mov r8, r8)
10040e30:	20000124 	.word	0x20000124

10040e34 <__NVIC_SetPriority>:
{
10040e34:	b590      	push	{r4, r7, lr}
10040e36:	b083      	sub	sp, #12
10040e38:	af00      	add	r7, sp, #0
10040e3a:	0002      	movs	r2, r0
10040e3c:	6039      	str	r1, [r7, #0]
10040e3e:	1dfb      	adds	r3, r7, #7
10040e40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10040e42:	1dfb      	adds	r3, r7, #7
10040e44:	781b      	ldrb	r3, [r3, #0]
10040e46:	2b7f      	cmp	r3, #127	@ 0x7f
10040e48:	d828      	bhi.n	10040e9c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040e4a:	4a2f      	ldr	r2, [pc, #188]	@ (10040f08 <__NVIC_SetPriority+0xd4>)
10040e4c:	1dfb      	adds	r3, r7, #7
10040e4e:	781b      	ldrb	r3, [r3, #0]
10040e50:	b25b      	sxtb	r3, r3
10040e52:	089b      	lsrs	r3, r3, #2
10040e54:	33c0      	adds	r3, #192	@ 0xc0
10040e56:	009b      	lsls	r3, r3, #2
10040e58:	589b      	ldr	r3, [r3, r2]
10040e5a:	1dfa      	adds	r2, r7, #7
10040e5c:	7812      	ldrb	r2, [r2, #0]
10040e5e:	0011      	movs	r1, r2
10040e60:	2203      	movs	r2, #3
10040e62:	400a      	ands	r2, r1
10040e64:	00d2      	lsls	r2, r2, #3
10040e66:	21ff      	movs	r1, #255	@ 0xff
10040e68:	4091      	lsls	r1, r2
10040e6a:	000a      	movs	r2, r1
10040e6c:	43d2      	mvns	r2, r2
10040e6e:	401a      	ands	r2, r3
10040e70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040e72:	683b      	ldr	r3, [r7, #0]
10040e74:	019b      	lsls	r3, r3, #6
10040e76:	22ff      	movs	r2, #255	@ 0xff
10040e78:	401a      	ands	r2, r3
10040e7a:	1dfb      	adds	r3, r7, #7
10040e7c:	781b      	ldrb	r3, [r3, #0]
10040e7e:	0018      	movs	r0, r3
10040e80:	2303      	movs	r3, #3
10040e82:	4003      	ands	r3, r0
10040e84:	00db      	lsls	r3, r3, #3
10040e86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040e88:	481f      	ldr	r0, [pc, #124]	@ (10040f08 <__NVIC_SetPriority+0xd4>)
10040e8a:	1dfb      	adds	r3, r7, #7
10040e8c:	781b      	ldrb	r3, [r3, #0]
10040e8e:	b25b      	sxtb	r3, r3
10040e90:	089b      	lsrs	r3, r3, #2
10040e92:	430a      	orrs	r2, r1
10040e94:	33c0      	adds	r3, #192	@ 0xc0
10040e96:	009b      	lsls	r3, r3, #2
10040e98:	501a      	str	r2, [r3, r0]
}
10040e9a:	e031      	b.n	10040f00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040e9c:	4a1b      	ldr	r2, [pc, #108]	@ (10040f0c <__NVIC_SetPriority+0xd8>)
10040e9e:	1dfb      	adds	r3, r7, #7
10040ea0:	781b      	ldrb	r3, [r3, #0]
10040ea2:	0019      	movs	r1, r3
10040ea4:	230f      	movs	r3, #15
10040ea6:	400b      	ands	r3, r1
10040ea8:	3b08      	subs	r3, #8
10040eaa:	089b      	lsrs	r3, r3, #2
10040eac:	3306      	adds	r3, #6
10040eae:	009b      	lsls	r3, r3, #2
10040eb0:	18d3      	adds	r3, r2, r3
10040eb2:	3304      	adds	r3, #4
10040eb4:	681b      	ldr	r3, [r3, #0]
10040eb6:	1dfa      	adds	r2, r7, #7
10040eb8:	7812      	ldrb	r2, [r2, #0]
10040eba:	0011      	movs	r1, r2
10040ebc:	2203      	movs	r2, #3
10040ebe:	400a      	ands	r2, r1
10040ec0:	00d2      	lsls	r2, r2, #3
10040ec2:	21ff      	movs	r1, #255	@ 0xff
10040ec4:	4091      	lsls	r1, r2
10040ec6:	000a      	movs	r2, r1
10040ec8:	43d2      	mvns	r2, r2
10040eca:	401a      	ands	r2, r3
10040ecc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10040ece:	683b      	ldr	r3, [r7, #0]
10040ed0:	019b      	lsls	r3, r3, #6
10040ed2:	22ff      	movs	r2, #255	@ 0xff
10040ed4:	401a      	ands	r2, r3
10040ed6:	1dfb      	adds	r3, r7, #7
10040ed8:	781b      	ldrb	r3, [r3, #0]
10040eda:	0018      	movs	r0, r3
10040edc:	2303      	movs	r3, #3
10040ede:	4003      	ands	r3, r0
10040ee0:	00db      	lsls	r3, r3, #3
10040ee2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040ee4:	4809      	ldr	r0, [pc, #36]	@ (10040f0c <__NVIC_SetPriority+0xd8>)
10040ee6:	1dfb      	adds	r3, r7, #7
10040ee8:	781b      	ldrb	r3, [r3, #0]
10040eea:	001c      	movs	r4, r3
10040eec:	230f      	movs	r3, #15
10040eee:	4023      	ands	r3, r4
10040ef0:	3b08      	subs	r3, #8
10040ef2:	089b      	lsrs	r3, r3, #2
10040ef4:	430a      	orrs	r2, r1
10040ef6:	3306      	adds	r3, #6
10040ef8:	009b      	lsls	r3, r3, #2
10040efa:	18c3      	adds	r3, r0, r3
10040efc:	3304      	adds	r3, #4
10040efe:	601a      	str	r2, [r3, #0]
}
10040f00:	46c0      	nop			@ (mov r8, r8)
10040f02:	46bd      	mov	sp, r7
10040f04:	b003      	add	sp, #12
10040f06:	bd90      	pop	{r4, r7, pc}
10040f08:	e000e100 	.word	0xe000e100
10040f0c:	e000ed00 	.word	0xe000ed00

10040f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10040f10:	b580      	push	{r7, lr}
10040f12:	b082      	sub	sp, #8
10040f14:	af00      	add	r7, sp, #0
10040f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10040f18:	687b      	ldr	r3, [r7, #4]
10040f1a:	1e5a      	subs	r2, r3, #1
10040f1c:	2380      	movs	r3, #128	@ 0x80
10040f1e:	045b      	lsls	r3, r3, #17
10040f20:	429a      	cmp	r2, r3
10040f22:	d301      	bcc.n	10040f28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10040f24:	2301      	movs	r3, #1
10040f26:	e010      	b.n	10040f4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10040f28:	4b0a      	ldr	r3, [pc, #40]	@ (10040f54 <SysTick_Config+0x44>)
10040f2a:	687a      	ldr	r2, [r7, #4]
10040f2c:	3a01      	subs	r2, #1
10040f2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10040f30:	2301      	movs	r3, #1
10040f32:	425b      	negs	r3, r3
10040f34:	2103      	movs	r1, #3
10040f36:	0018      	movs	r0, r3
10040f38:	f7ff ff7c 	bl	10040e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10040f3c:	4b05      	ldr	r3, [pc, #20]	@ (10040f54 <SysTick_Config+0x44>)
10040f3e:	2200      	movs	r2, #0
10040f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10040f42:	4b04      	ldr	r3, [pc, #16]	@ (10040f54 <SysTick_Config+0x44>)
10040f44:	2207      	movs	r2, #7
10040f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10040f48:	2300      	movs	r3, #0
}
10040f4a:	0018      	movs	r0, r3
10040f4c:	46bd      	mov	sp, r7
10040f4e:	b002      	add	sp, #8
10040f50:	bd80      	pop	{r7, pc}
10040f52:	46c0      	nop			@ (mov r8, r8)
10040f54:	e000e010 	.word	0xe000e010

10040f58 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10040f58:	b580      	push	{r7, lr}
10040f5a:	b084      	sub	sp, #16
10040f5c:	af00      	add	r7, sp, #0
10040f5e:	60b9      	str	r1, [r7, #8]
10040f60:	607a      	str	r2, [r7, #4]
10040f62:	210f      	movs	r1, #15
10040f64:	187b      	adds	r3, r7, r1
10040f66:	1c02      	adds	r2, r0, #0
10040f68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10040f6a:	68ba      	ldr	r2, [r7, #8]
10040f6c:	187b      	adds	r3, r7, r1
10040f6e:	781b      	ldrb	r3, [r3, #0]
10040f70:	b25b      	sxtb	r3, r3
10040f72:	0011      	movs	r1, r2
10040f74:	0018      	movs	r0, r3
10040f76:	f7ff ff5d 	bl	10040e34 <__NVIC_SetPriority>
}
10040f7a:	46c0      	nop			@ (mov r8, r8)
10040f7c:	46bd      	mov	sp, r7
10040f7e:	b004      	add	sp, #16
10040f80:	bd80      	pop	{r7, pc}

10040f82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10040f82:	b580      	push	{r7, lr}
10040f84:	b082      	sub	sp, #8
10040f86:	af00      	add	r7, sp, #0
10040f88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10040f8a:	687b      	ldr	r3, [r7, #4]
10040f8c:	0018      	movs	r0, r3
10040f8e:	f7ff ffbf 	bl	10040f10 <SysTick_Config>
10040f92:	0003      	movs	r3, r0
}
10040f94:	0018      	movs	r0, r3
10040f96:	46bd      	mov	sp, r7
10040f98:	b002      	add	sp, #8
10040f9a:	bd80      	pop	{r7, pc}

10040f9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10040f9c:	b580      	push	{r7, lr}
10040f9e:	b086      	sub	sp, #24
10040fa0:	af00      	add	r7, sp, #0
10040fa2:	6078      	str	r0, [r7, #4]
10040fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10040fa6:	2300      	movs	r3, #0
10040fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10040faa:	e190      	b.n	100412ce <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10040fac:	683b      	ldr	r3, [r7, #0]
10040fae:	681b      	ldr	r3, [r3, #0]
10040fb0:	2101      	movs	r1, #1
10040fb2:	697a      	ldr	r2, [r7, #20]
10040fb4:	4091      	lsls	r1, r2
10040fb6:	000a      	movs	r2, r1
10040fb8:	4013      	ands	r3, r2
10040fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10040fbc:	68fb      	ldr	r3, [r7, #12]
10040fbe:	2b00      	cmp	r3, #0
10040fc0:	d100      	bne.n	10040fc4 <HAL_GPIO_Init+0x28>
10040fc2:	e181      	b.n	100412c8 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10040fc4:	683b      	ldr	r3, [r7, #0]
10040fc6:	685b      	ldr	r3, [r3, #4]
10040fc8:	2203      	movs	r2, #3
10040fca:	4013      	ands	r3, r2
10040fcc:	2b01      	cmp	r3, #1
10040fce:	d005      	beq.n	10040fdc <HAL_GPIO_Init+0x40>
10040fd0:	683b      	ldr	r3, [r7, #0]
10040fd2:	685b      	ldr	r3, [r3, #4]
10040fd4:	2203      	movs	r2, #3
10040fd6:	4013      	ands	r3, r2
10040fd8:	2b02      	cmp	r3, #2
10040fda:	d130      	bne.n	1004103e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10040fdc:	687b      	ldr	r3, [r7, #4]
10040fde:	689b      	ldr	r3, [r3, #8]
10040fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10040fe2:	697b      	ldr	r3, [r7, #20]
10040fe4:	005b      	lsls	r3, r3, #1
10040fe6:	2203      	movs	r2, #3
10040fe8:	409a      	lsls	r2, r3
10040fea:	0013      	movs	r3, r2
10040fec:	43da      	mvns	r2, r3
10040fee:	693b      	ldr	r3, [r7, #16]
10040ff0:	4013      	ands	r3, r2
10040ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10040ff4:	683b      	ldr	r3, [r7, #0]
10040ff6:	68da      	ldr	r2, [r3, #12]
10040ff8:	697b      	ldr	r3, [r7, #20]
10040ffa:	005b      	lsls	r3, r3, #1
10040ffc:	409a      	lsls	r2, r3
10040ffe:	0013      	movs	r3, r2
10041000:	693a      	ldr	r2, [r7, #16]
10041002:	4313      	orrs	r3, r2
10041004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10041006:	687b      	ldr	r3, [r7, #4]
10041008:	693a      	ldr	r2, [r7, #16]
1004100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004100c:	687b      	ldr	r3, [r7, #4]
1004100e:	685b      	ldr	r3, [r3, #4]
10041010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10041012:	2201      	movs	r2, #1
10041014:	697b      	ldr	r3, [r7, #20]
10041016:	409a      	lsls	r2, r3
10041018:	0013      	movs	r3, r2
1004101a:	43da      	mvns	r2, r3
1004101c:	693b      	ldr	r3, [r7, #16]
1004101e:	4013      	ands	r3, r2
10041020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10041022:	683b      	ldr	r3, [r7, #0]
10041024:	685b      	ldr	r3, [r3, #4]
10041026:	091b      	lsrs	r3, r3, #4
10041028:	2201      	movs	r2, #1
1004102a:	401a      	ands	r2, r3
1004102c:	697b      	ldr	r3, [r7, #20]
1004102e:	409a      	lsls	r2, r3
10041030:	0013      	movs	r3, r2
10041032:	693a      	ldr	r2, [r7, #16]
10041034:	4313      	orrs	r3, r2
10041036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10041038:	687b      	ldr	r3, [r7, #4]
1004103a:	693a      	ldr	r2, [r7, #16]
1004103c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
1004103e:	683b      	ldr	r3, [r7, #0]
10041040:	685b      	ldr	r3, [r3, #4]
10041042:	2203      	movs	r2, #3
10041044:	4013      	ands	r3, r2
10041046:	2b03      	cmp	r3, #3
10041048:	d017      	beq.n	1004107a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004104a:	687b      	ldr	r3, [r7, #4]
1004104c:	68db      	ldr	r3, [r3, #12]
1004104e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10041050:	697b      	ldr	r3, [r7, #20]
10041052:	005b      	lsls	r3, r3, #1
10041054:	2203      	movs	r2, #3
10041056:	409a      	lsls	r2, r3
10041058:	0013      	movs	r3, r2
1004105a:	43da      	mvns	r2, r3
1004105c:	693b      	ldr	r3, [r7, #16]
1004105e:	4013      	ands	r3, r2
10041060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10041062:	683b      	ldr	r3, [r7, #0]
10041064:	689a      	ldr	r2, [r3, #8]
10041066:	697b      	ldr	r3, [r7, #20]
10041068:	005b      	lsls	r3, r3, #1
1004106a:	409a      	lsls	r2, r3
1004106c:	0013      	movs	r3, r2
1004106e:	693a      	ldr	r2, [r7, #16]
10041070:	4313      	orrs	r3, r2
10041072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10041074:	687b      	ldr	r3, [r7, #4]
10041076:	693a      	ldr	r2, [r7, #16]
10041078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004107a:	683b      	ldr	r3, [r7, #0]
1004107c:	685b      	ldr	r3, [r3, #4]
1004107e:	2203      	movs	r2, #3
10041080:	4013      	ands	r3, r2
10041082:	2b02      	cmp	r3, #2
10041084:	d123      	bne.n	100410ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10041086:	697b      	ldr	r3, [r7, #20]
10041088:	08da      	lsrs	r2, r3, #3
1004108a:	687b      	ldr	r3, [r7, #4]
1004108c:	3208      	adds	r2, #8
1004108e:	0092      	lsls	r2, r2, #2
10041090:	58d3      	ldr	r3, [r2, r3]
10041092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10041094:	697b      	ldr	r3, [r7, #20]
10041096:	2207      	movs	r2, #7
10041098:	4013      	ands	r3, r2
1004109a:	009b      	lsls	r3, r3, #2
1004109c:	220f      	movs	r2, #15
1004109e:	409a      	lsls	r2, r3
100410a0:	0013      	movs	r3, r2
100410a2:	43da      	mvns	r2, r3
100410a4:	693b      	ldr	r3, [r7, #16]
100410a6:	4013      	ands	r3, r2
100410a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100410aa:	683b      	ldr	r3, [r7, #0]
100410ac:	691a      	ldr	r2, [r3, #16]
100410ae:	697b      	ldr	r3, [r7, #20]
100410b0:	2107      	movs	r1, #7
100410b2:	400b      	ands	r3, r1
100410b4:	009b      	lsls	r3, r3, #2
100410b6:	409a      	lsls	r2, r3
100410b8:	0013      	movs	r3, r2
100410ba:	693a      	ldr	r2, [r7, #16]
100410bc:	4313      	orrs	r3, r2
100410be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100410c0:	697b      	ldr	r3, [r7, #20]
100410c2:	08da      	lsrs	r2, r3, #3
100410c4:	687b      	ldr	r3, [r7, #4]
100410c6:	3208      	adds	r2, #8
100410c8:	0092      	lsls	r2, r2, #2
100410ca:	6939      	ldr	r1, [r7, #16]
100410cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100410ce:	687b      	ldr	r3, [r7, #4]
100410d0:	681b      	ldr	r3, [r3, #0]
100410d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100410d4:	697b      	ldr	r3, [r7, #20]
100410d6:	005b      	lsls	r3, r3, #1
100410d8:	2203      	movs	r2, #3
100410da:	409a      	lsls	r2, r3
100410dc:	0013      	movs	r3, r2
100410de:	43da      	mvns	r2, r3
100410e0:	693b      	ldr	r3, [r7, #16]
100410e2:	4013      	ands	r3, r2
100410e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
100410e6:	683b      	ldr	r3, [r7, #0]
100410e8:	685b      	ldr	r3, [r3, #4]
100410ea:	2203      	movs	r2, #3
100410ec:	401a      	ands	r2, r3
100410ee:	697b      	ldr	r3, [r7, #20]
100410f0:	005b      	lsls	r3, r3, #1
100410f2:	409a      	lsls	r2, r3
100410f4:	0013      	movs	r3, r2
100410f6:	693a      	ldr	r2, [r7, #16]
100410f8:	4313      	orrs	r3, r2
100410fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
100410fc:	687b      	ldr	r3, [r7, #4]
100410fe:	693a      	ldr	r2, [r7, #16]
10041100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10041102:	683b      	ldr	r3, [r7, #0]
10041104:	685a      	ldr	r2, [r3, #4]
10041106:	23c0      	movs	r3, #192	@ 0xc0
10041108:	029b      	lsls	r3, r3, #10
1004110a:	4013      	ands	r3, r2
1004110c:	d100      	bne.n	10041110 <HAL_GPIO_Init+0x174>
1004110e:	e0db      	b.n	100412c8 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10041110:	683b      	ldr	r3, [r7, #0]
10041112:	685a      	ldr	r2, [r3, #4]
10041114:	2380      	movs	r3, #128	@ 0x80
10041116:	02db      	lsls	r3, r3, #11
10041118:	4013      	ands	r3, r2
1004111a:	d030      	beq.n	1004117e <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
1004111c:	2380      	movs	r3, #128	@ 0x80
1004111e:	05db      	lsls	r3, r3, #23
10041120:	68db      	ldr	r3, [r3, #12]
10041122:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10041124:	687a      	ldr	r2, [r7, #4]
10041126:	2390      	movs	r3, #144	@ 0x90
10041128:	05db      	lsls	r3, r3, #23
1004112a:	429a      	cmp	r2, r3
1004112c:	d111      	bne.n	10041152 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
1004112e:	2201      	movs	r2, #1
10041130:	697b      	ldr	r3, [r7, #20]
10041132:	409a      	lsls	r2, r3
10041134:	0013      	movs	r3, r2
10041136:	43db      	mvns	r3, r3
10041138:	001a      	movs	r2, r3
1004113a:	693b      	ldr	r3, [r7, #16]
1004113c:	4013      	ands	r3, r2
1004113e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10041140:	2201      	movs	r2, #1
10041142:	697b      	ldr	r3, [r7, #20]
10041144:	409a      	lsls	r2, r3
10041146:	0013      	movs	r3, r2
10041148:	001a      	movs	r2, r3
1004114a:	693b      	ldr	r3, [r7, #16]
1004114c:	4313      	orrs	r3, r2
1004114e:	613b      	str	r3, [r7, #16]
10041150:	e011      	b.n	10041176 <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10041152:	2201      	movs	r2, #1
10041154:	697b      	ldr	r3, [r7, #20]
10041156:	409a      	lsls	r2, r3
10041158:	0013      	movs	r3, r2
1004115a:	041b      	lsls	r3, r3, #16
1004115c:	43db      	mvns	r3, r3
1004115e:	001a      	movs	r2, r3
10041160:	693b      	ldr	r3, [r7, #16]
10041162:	4013      	ands	r3, r2
10041164:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10041166:	2201      	movs	r2, #1
10041168:	697b      	ldr	r3, [r7, #20]
1004116a:	409a      	lsls	r2, r3
1004116c:	0013      	movs	r3, r2
1004116e:	041b      	lsls	r3, r3, #16
10041170:	693a      	ldr	r2, [r7, #16]
10041172:	4313      	orrs	r3, r2
10041174:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10041176:	2380      	movs	r3, #128	@ 0x80
10041178:	05db      	lsls	r3, r3, #23
1004117a:	693a      	ldr	r2, [r7, #16]
1004117c:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
1004117e:	683b      	ldr	r3, [r7, #0]
10041180:	685a      	ldr	r2, [r3, #4]
10041182:	2380      	movs	r3, #128	@ 0x80
10041184:	035b      	lsls	r3, r3, #13
10041186:	4013      	ands	r3, r2
10041188:	d030      	beq.n	100411ec <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
1004118a:	2380      	movs	r3, #128	@ 0x80
1004118c:	05db      	lsls	r3, r3, #23
1004118e:	691b      	ldr	r3, [r3, #16]
10041190:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10041192:	687a      	ldr	r2, [r7, #4]
10041194:	2390      	movs	r3, #144	@ 0x90
10041196:	05db      	lsls	r3, r3, #23
10041198:	429a      	cmp	r2, r3
1004119a:	d111      	bne.n	100411c0 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
1004119c:	2201      	movs	r2, #1
1004119e:	697b      	ldr	r3, [r7, #20]
100411a0:	409a      	lsls	r2, r3
100411a2:	0013      	movs	r3, r2
100411a4:	43db      	mvns	r3, r3
100411a6:	001a      	movs	r2, r3
100411a8:	693b      	ldr	r3, [r7, #16]
100411aa:	4013      	ands	r3, r2
100411ac:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100411ae:	2201      	movs	r2, #1
100411b0:	697b      	ldr	r3, [r7, #20]
100411b2:	409a      	lsls	r2, r3
100411b4:	0013      	movs	r3, r2
100411b6:	001a      	movs	r2, r3
100411b8:	693b      	ldr	r3, [r7, #16]
100411ba:	4313      	orrs	r3, r2
100411bc:	613b      	str	r3, [r7, #16]
100411be:	e011      	b.n	100411e4 <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100411c0:	2201      	movs	r2, #1
100411c2:	697b      	ldr	r3, [r7, #20]
100411c4:	409a      	lsls	r2, r3
100411c6:	0013      	movs	r3, r2
100411c8:	041b      	lsls	r3, r3, #16
100411ca:	43db      	mvns	r3, r3
100411cc:	001a      	movs	r2, r3
100411ce:	693b      	ldr	r3, [r7, #16]
100411d0:	4013      	ands	r3, r2
100411d2:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100411d4:	2201      	movs	r2, #1
100411d6:	697b      	ldr	r3, [r7, #20]
100411d8:	409a      	lsls	r2, r3
100411da:	0013      	movs	r3, r2
100411dc:	041b      	lsls	r3, r3, #16
100411de:	693a      	ldr	r2, [r7, #16]
100411e0:	4313      	orrs	r3, r2
100411e2:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
100411e4:	2380      	movs	r3, #128	@ 0x80
100411e6:	05db      	lsls	r3, r3, #23
100411e8:	693a      	ldr	r2, [r7, #16]
100411ea:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
100411ec:	683b      	ldr	r3, [r7, #0]
100411ee:	685a      	ldr	r2, [r3, #4]
100411f0:	2380      	movs	r3, #128	@ 0x80
100411f2:	03db      	lsls	r3, r3, #15
100411f4:	4013      	ands	r3, r2
100411f6:	d030      	beq.n	1004125a <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
100411f8:	2380      	movs	r3, #128	@ 0x80
100411fa:	05db      	lsls	r3, r3, #23
100411fc:	695b      	ldr	r3, [r3, #20]
100411fe:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10041200:	687a      	ldr	r2, [r7, #4]
10041202:	2390      	movs	r3, #144	@ 0x90
10041204:	05db      	lsls	r3, r3, #23
10041206:	429a      	cmp	r2, r3
10041208:	d111      	bne.n	1004122e <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
1004120a:	2201      	movs	r2, #1
1004120c:	697b      	ldr	r3, [r7, #20]
1004120e:	409a      	lsls	r2, r3
10041210:	0013      	movs	r3, r2
10041212:	43db      	mvns	r3, r3
10041214:	001a      	movs	r2, r3
10041216:	693b      	ldr	r3, [r7, #16]
10041218:	4013      	ands	r3, r2
1004121a:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004121c:	2201      	movs	r2, #1
1004121e:	697b      	ldr	r3, [r7, #20]
10041220:	409a      	lsls	r2, r3
10041222:	0013      	movs	r3, r2
10041224:	001a      	movs	r2, r3
10041226:	693b      	ldr	r3, [r7, #16]
10041228:	4313      	orrs	r3, r2
1004122a:	613b      	str	r3, [r7, #16]
1004122c:	e011      	b.n	10041252 <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004122e:	2201      	movs	r2, #1
10041230:	697b      	ldr	r3, [r7, #20]
10041232:	409a      	lsls	r2, r3
10041234:	0013      	movs	r3, r2
10041236:	041b      	lsls	r3, r3, #16
10041238:	43db      	mvns	r3, r3
1004123a:	001a      	movs	r2, r3
1004123c:	693b      	ldr	r3, [r7, #16]
1004123e:	4013      	ands	r3, r2
10041240:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10041242:	2201      	movs	r2, #1
10041244:	697b      	ldr	r3, [r7, #20]
10041246:	409a      	lsls	r2, r3
10041248:	0013      	movs	r3, r2
1004124a:	041b      	lsls	r3, r3, #16
1004124c:	693a      	ldr	r2, [r7, #16]
1004124e:	4313      	orrs	r3, r2
10041250:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10041252:	2380      	movs	r3, #128	@ 0x80
10041254:	05db      	lsls	r3, r3, #23
10041256:	693a      	ldr	r2, [r7, #16]
10041258:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
1004125a:	683b      	ldr	r3, [r7, #0]
1004125c:	685a      	ldr	r2, [r3, #4]
1004125e:	2380      	movs	r3, #128	@ 0x80
10041260:	025b      	lsls	r3, r3, #9
10041262:	4013      	ands	r3, r2
10041264:	d030      	beq.n	100412c8 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
10041266:	2380      	movs	r3, #128	@ 0x80
10041268:	05db      	lsls	r3, r3, #23
1004126a:	699b      	ldr	r3, [r3, #24]
1004126c:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004126e:	687a      	ldr	r2, [r7, #4]
10041270:	2390      	movs	r3, #144	@ 0x90
10041272:	05db      	lsls	r3, r3, #23
10041274:	429a      	cmp	r2, r3
10041276:	d111      	bne.n	1004129c <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
10041278:	2201      	movs	r2, #1
1004127a:	697b      	ldr	r3, [r7, #20]
1004127c:	409a      	lsls	r2, r3
1004127e:	0013      	movs	r3, r2
10041280:	43db      	mvns	r3, r3
10041282:	001a      	movs	r2, r3
10041284:	693b      	ldr	r3, [r7, #16]
10041286:	4013      	ands	r3, r2
10041288:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004128a:	2201      	movs	r2, #1
1004128c:	697b      	ldr	r3, [r7, #20]
1004128e:	409a      	lsls	r2, r3
10041290:	0013      	movs	r3, r2
10041292:	001a      	movs	r2, r3
10041294:	693b      	ldr	r3, [r7, #16]
10041296:	4313      	orrs	r3, r2
10041298:	613b      	str	r3, [r7, #16]
1004129a:	e011      	b.n	100412c0 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004129c:	2201      	movs	r2, #1
1004129e:	697b      	ldr	r3, [r7, #20]
100412a0:	409a      	lsls	r2, r3
100412a2:	0013      	movs	r3, r2
100412a4:	041b      	lsls	r3, r3, #16
100412a6:	43db      	mvns	r3, r3
100412a8:	001a      	movs	r2, r3
100412aa:	693b      	ldr	r3, [r7, #16]
100412ac:	4013      	ands	r3, r2
100412ae:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100412b0:	2201      	movs	r2, #1
100412b2:	697b      	ldr	r3, [r7, #20]
100412b4:	409a      	lsls	r2, r3
100412b6:	0013      	movs	r3, r2
100412b8:	041b      	lsls	r3, r3, #16
100412ba:	693a      	ldr	r2, [r7, #16]
100412bc:	4313      	orrs	r3, r2
100412be:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100412c0:	2380      	movs	r3, #128	@ 0x80
100412c2:	05db      	lsls	r3, r3, #23
100412c4:	693a      	ldr	r2, [r7, #16]
100412c6:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100412c8:	697b      	ldr	r3, [r7, #20]
100412ca:	3301      	adds	r3, #1
100412cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100412ce:	683b      	ldr	r3, [r7, #0]
100412d0:	681a      	ldr	r2, [r3, #0]
100412d2:	697b      	ldr	r3, [r7, #20]
100412d4:	40da      	lsrs	r2, r3
100412d6:	1e13      	subs	r3, r2, #0
100412d8:	d000      	beq.n	100412dc <HAL_GPIO_Init+0x340>
100412da:	e667      	b.n	10040fac <HAL_GPIO_Init+0x10>
  }
}
100412dc:	46c0      	nop			@ (mov r8, r8)
100412de:	46c0      	nop			@ (mov r8, r8)
100412e0:	46bd      	mov	sp, r7
100412e2:	b006      	add	sp, #24
100412e4:	bd80      	pop	{r7, pc}
	...

100412e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
100412e8:	b580      	push	{r7, lr}
100412ea:	b082      	sub	sp, #8
100412ec:	af00      	add	r7, sp, #0
100412ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
100412f0:	687b      	ldr	r3, [r7, #4]
100412f2:	2b00      	cmp	r3, #0
100412f4:	d101      	bne.n	100412fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
100412f6:	2301      	movs	r3, #1
100412f8:	e08f      	b.n	1004141a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
100412fa:	687b      	ldr	r3, [r7, #4]
100412fc:	2241      	movs	r2, #65	@ 0x41
100412fe:	5c9b      	ldrb	r3, [r3, r2]
10041300:	b2db      	uxtb	r3, r3
10041302:	2b00      	cmp	r3, #0
10041304:	d107      	bne.n	10041316 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
10041306:	687b      	ldr	r3, [r7, #4]
10041308:	2240      	movs	r2, #64	@ 0x40
1004130a:	2100      	movs	r1, #0
1004130c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
1004130e:	687b      	ldr	r3, [r7, #4]
10041310:	0018      	movs	r0, r3
10041312:	f7ff faa7 	bl	10040864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
10041316:	687b      	ldr	r3, [r7, #4]
10041318:	2241      	movs	r2, #65	@ 0x41
1004131a:	2124      	movs	r1, #36	@ 0x24
1004131c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
1004131e:	687b      	ldr	r3, [r7, #4]
10041320:	681b      	ldr	r3, [r3, #0]
10041322:	681a      	ldr	r2, [r3, #0]
10041324:	687b      	ldr	r3, [r7, #4]
10041326:	681b      	ldr	r3, [r3, #0]
10041328:	2101      	movs	r1, #1
1004132a:	438a      	bics	r2, r1
1004132c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
1004132e:	687b      	ldr	r3, [r7, #4]
10041330:	685a      	ldr	r2, [r3, #4]
10041332:	687b      	ldr	r3, [r7, #4]
10041334:	681b      	ldr	r3, [r3, #0]
10041336:	493b      	ldr	r1, [pc, #236]	@ (10041424 <HAL_I2C_Init+0x13c>)
10041338:	400a      	ands	r2, r1
1004133a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
1004133c:	687b      	ldr	r3, [r7, #4]
1004133e:	681b      	ldr	r3, [r3, #0]
10041340:	689a      	ldr	r2, [r3, #8]
10041342:	687b      	ldr	r3, [r7, #4]
10041344:	681b      	ldr	r3, [r3, #0]
10041346:	4938      	ldr	r1, [pc, #224]	@ (10041428 <HAL_I2C_Init+0x140>)
10041348:	400a      	ands	r2, r1
1004134a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
1004134c:	687b      	ldr	r3, [r7, #4]
1004134e:	68db      	ldr	r3, [r3, #12]
10041350:	2b01      	cmp	r3, #1
10041352:	d108      	bne.n	10041366 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10041354:	687b      	ldr	r3, [r7, #4]
10041356:	689a      	ldr	r2, [r3, #8]
10041358:	687b      	ldr	r3, [r7, #4]
1004135a:	681b      	ldr	r3, [r3, #0]
1004135c:	2180      	movs	r1, #128	@ 0x80
1004135e:	0209      	lsls	r1, r1, #8
10041360:	430a      	orrs	r2, r1
10041362:	609a      	str	r2, [r3, #8]
10041364:	e007      	b.n	10041376 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
10041366:	687b      	ldr	r3, [r7, #4]
10041368:	689a      	ldr	r2, [r3, #8]
1004136a:	687b      	ldr	r3, [r7, #4]
1004136c:	681b      	ldr	r3, [r3, #0]
1004136e:	2184      	movs	r1, #132	@ 0x84
10041370:	0209      	lsls	r1, r1, #8
10041372:	430a      	orrs	r2, r1
10041374:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10041376:	687b      	ldr	r3, [r7, #4]
10041378:	68db      	ldr	r3, [r3, #12]
1004137a:	2b02      	cmp	r3, #2
1004137c:	d109      	bne.n	10041392 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
1004137e:	687b      	ldr	r3, [r7, #4]
10041380:	681b      	ldr	r3, [r3, #0]
10041382:	685a      	ldr	r2, [r3, #4]
10041384:	687b      	ldr	r3, [r7, #4]
10041386:	681b      	ldr	r3, [r3, #0]
10041388:	2180      	movs	r1, #128	@ 0x80
1004138a:	0109      	lsls	r1, r1, #4
1004138c:	430a      	orrs	r2, r1
1004138e:	605a      	str	r2, [r3, #4]
10041390:	e007      	b.n	100413a2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10041392:	687b      	ldr	r3, [r7, #4]
10041394:	681b      	ldr	r3, [r3, #0]
10041396:	685a      	ldr	r2, [r3, #4]
10041398:	687b      	ldr	r3, [r7, #4]
1004139a:	681b      	ldr	r3, [r3, #0]
1004139c:	4923      	ldr	r1, [pc, #140]	@ (1004142c <HAL_I2C_Init+0x144>)
1004139e:	400a      	ands	r2, r1
100413a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
100413a2:	687b      	ldr	r3, [r7, #4]
100413a4:	681b      	ldr	r3, [r3, #0]
100413a6:	685a      	ldr	r2, [r3, #4]
100413a8:	687b      	ldr	r3, [r7, #4]
100413aa:	681b      	ldr	r3, [r3, #0]
100413ac:	4920      	ldr	r1, [pc, #128]	@ (10041430 <HAL_I2C_Init+0x148>)
100413ae:	430a      	orrs	r2, r1
100413b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
100413b2:	687b      	ldr	r3, [r7, #4]
100413b4:	681b      	ldr	r3, [r3, #0]
100413b6:	68da      	ldr	r2, [r3, #12]
100413b8:	687b      	ldr	r3, [r7, #4]
100413ba:	681b      	ldr	r3, [r3, #0]
100413bc:	491a      	ldr	r1, [pc, #104]	@ (10041428 <HAL_I2C_Init+0x140>)
100413be:	400a      	ands	r2, r1
100413c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100413c2:	687b      	ldr	r3, [r7, #4]
100413c4:	691a      	ldr	r2, [r3, #16]
100413c6:	687b      	ldr	r3, [r7, #4]
100413c8:	695b      	ldr	r3, [r3, #20]
100413ca:	431a      	orrs	r2, r3
100413cc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
100413ce:	687b      	ldr	r3, [r7, #4]
100413d0:	699b      	ldr	r3, [r3, #24]
100413d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100413d4:	687b      	ldr	r3, [r7, #4]
100413d6:	681b      	ldr	r3, [r3, #0]
100413d8:	430a      	orrs	r2, r1
100413da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
100413dc:	687b      	ldr	r3, [r7, #4]
100413de:	69d9      	ldr	r1, [r3, #28]
100413e0:	687b      	ldr	r3, [r7, #4]
100413e2:	6a1a      	ldr	r2, [r3, #32]
100413e4:	687b      	ldr	r3, [r7, #4]
100413e6:	681b      	ldr	r3, [r3, #0]
100413e8:	430a      	orrs	r2, r1
100413ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
100413ec:	687b      	ldr	r3, [r7, #4]
100413ee:	681b      	ldr	r3, [r3, #0]
100413f0:	681a      	ldr	r2, [r3, #0]
100413f2:	687b      	ldr	r3, [r7, #4]
100413f4:	681b      	ldr	r3, [r3, #0]
100413f6:	2101      	movs	r1, #1
100413f8:	430a      	orrs	r2, r1
100413fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
100413fc:	687b      	ldr	r3, [r7, #4]
100413fe:	2200      	movs	r2, #0
10041400:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
10041402:	687b      	ldr	r3, [r7, #4]
10041404:	2241      	movs	r2, #65	@ 0x41
10041406:	2120      	movs	r1, #32
10041408:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
1004140a:	687b      	ldr	r3, [r7, #4]
1004140c:	2200      	movs	r2, #0
1004140e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10041410:	687b      	ldr	r3, [r7, #4]
10041412:	2242      	movs	r2, #66	@ 0x42
10041414:	2100      	movs	r1, #0
10041416:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10041418:	2300      	movs	r3, #0
}
1004141a:	0018      	movs	r0, r3
1004141c:	46bd      	mov	sp, r7
1004141e:	b002      	add	sp, #8
10041420:	bd80      	pop	{r7, pc}
10041422:	46c0      	nop			@ (mov r8, r8)
10041424:	f0ffffff 	.word	0xf0ffffff
10041428:	ffff7fff 	.word	0xffff7fff
1004142c:	fffff7ff 	.word	0xfffff7ff
10041430:	02008000 	.word	0x02008000

10041434 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10041434:	b590      	push	{r4, r7, lr}
10041436:	b089      	sub	sp, #36	@ 0x24
10041438:	af02      	add	r7, sp, #8
1004143a:	60f8      	str	r0, [r7, #12]
1004143c:	000c      	movs	r4, r1
1004143e:	0010      	movs	r0, r2
10041440:	0019      	movs	r1, r3
10041442:	230a      	movs	r3, #10
10041444:	18fb      	adds	r3, r7, r3
10041446:	1c22      	adds	r2, r4, #0
10041448:	801a      	strh	r2, [r3, #0]
1004144a:	2308      	movs	r3, #8
1004144c:	18fb      	adds	r3, r7, r3
1004144e:	1c02      	adds	r2, r0, #0
10041450:	801a      	strh	r2, [r3, #0]
10041452:	1dbb      	adds	r3, r7, #6
10041454:	1c0a      	adds	r2, r1, #0
10041456:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10041458:	68fb      	ldr	r3, [r7, #12]
1004145a:	2241      	movs	r2, #65	@ 0x41
1004145c:	5c9b      	ldrb	r3, [r3, r2]
1004145e:	b2db      	uxtb	r3, r3
10041460:	2b20      	cmp	r3, #32
10041462:	d000      	beq.n	10041466 <HAL_I2C_Mem_Write+0x32>
10041464:	e10c      	b.n	10041680 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
10041466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10041468:	2b00      	cmp	r3, #0
1004146a:	d004      	beq.n	10041476 <HAL_I2C_Mem_Write+0x42>
1004146c:	232c      	movs	r3, #44	@ 0x2c
1004146e:	18fb      	adds	r3, r7, r3
10041470:	881b      	ldrh	r3, [r3, #0]
10041472:	2b00      	cmp	r3, #0
10041474:	d105      	bne.n	10041482 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10041476:	68fb      	ldr	r3, [r7, #12]
10041478:	2280      	movs	r2, #128	@ 0x80
1004147a:	0092      	lsls	r2, r2, #2
1004147c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
1004147e:	2301      	movs	r3, #1
10041480:	e0ff      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10041482:	68fb      	ldr	r3, [r7, #12]
10041484:	2240      	movs	r2, #64	@ 0x40
10041486:	5c9b      	ldrb	r3, [r3, r2]
10041488:	2b01      	cmp	r3, #1
1004148a:	d101      	bne.n	10041490 <HAL_I2C_Mem_Write+0x5c>
1004148c:	2302      	movs	r3, #2
1004148e:	e0f8      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
10041490:	68fb      	ldr	r3, [r7, #12]
10041492:	2240      	movs	r2, #64	@ 0x40
10041494:	2101      	movs	r1, #1
10041496:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
10041498:	f7ff fc94 	bl	10040dc4 <HAL_GetTick>
1004149c:	0003      	movs	r3, r0
1004149e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
100414a0:	2380      	movs	r3, #128	@ 0x80
100414a2:	0219      	lsls	r1, r3, #8
100414a4:	68f8      	ldr	r0, [r7, #12]
100414a6:	697b      	ldr	r3, [r7, #20]
100414a8:	9300      	str	r3, [sp, #0]
100414aa:	2319      	movs	r3, #25
100414ac:	2201      	movs	r2, #1
100414ae:	f000 fb0b 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
100414b2:	1e03      	subs	r3, r0, #0
100414b4:	d001      	beq.n	100414ba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
100414b6:	2301      	movs	r3, #1
100414b8:	e0e3      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
100414ba:	68fb      	ldr	r3, [r7, #12]
100414bc:	2241      	movs	r2, #65	@ 0x41
100414be:	2121      	movs	r1, #33	@ 0x21
100414c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
100414c2:	68fb      	ldr	r3, [r7, #12]
100414c4:	2242      	movs	r2, #66	@ 0x42
100414c6:	2140      	movs	r1, #64	@ 0x40
100414c8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
100414ca:	68fb      	ldr	r3, [r7, #12]
100414cc:	2200      	movs	r2, #0
100414ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
100414d0:	68fb      	ldr	r3, [r7, #12]
100414d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100414d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
100414d6:	68fb      	ldr	r3, [r7, #12]
100414d8:	222c      	movs	r2, #44	@ 0x2c
100414da:	18ba      	adds	r2, r7, r2
100414dc:	8812      	ldrh	r2, [r2, #0]
100414de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
100414e0:	68fb      	ldr	r3, [r7, #12]
100414e2:	2200      	movs	r2, #0
100414e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
100414e6:	1dbb      	adds	r3, r7, #6
100414e8:	881c      	ldrh	r4, [r3, #0]
100414ea:	2308      	movs	r3, #8
100414ec:	18fb      	adds	r3, r7, r3
100414ee:	881a      	ldrh	r2, [r3, #0]
100414f0:	230a      	movs	r3, #10
100414f2:	18fb      	adds	r3, r7, r3
100414f4:	8819      	ldrh	r1, [r3, #0]
100414f6:	68f8      	ldr	r0, [r7, #12]
100414f8:	697b      	ldr	r3, [r7, #20]
100414fa:	9301      	str	r3, [sp, #4]
100414fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100414fe:	9300      	str	r3, [sp, #0]
10041500:	0023      	movs	r3, r4
10041502:	f000 f9f9 	bl	100418f8 <I2C_RequestMemoryWrite>
10041506:	1e03      	subs	r3, r0, #0
10041508:	d005      	beq.n	10041516 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004150a:	68fb      	ldr	r3, [r7, #12]
1004150c:	2240      	movs	r2, #64	@ 0x40
1004150e:	2100      	movs	r1, #0
10041510:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
10041512:	2301      	movs	r3, #1
10041514:	e0b5      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10041516:	68fb      	ldr	r3, [r7, #12]
10041518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004151a:	b29b      	uxth	r3, r3
1004151c:	2bff      	cmp	r3, #255	@ 0xff
1004151e:	d911      	bls.n	10041544 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10041520:	68fb      	ldr	r3, [r7, #12]
10041522:	22ff      	movs	r2, #255	@ 0xff
10041524:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10041526:	68fb      	ldr	r3, [r7, #12]
10041528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004152a:	b2da      	uxtb	r2, r3
1004152c:	2380      	movs	r3, #128	@ 0x80
1004152e:	045c      	lsls	r4, r3, #17
10041530:	230a      	movs	r3, #10
10041532:	18fb      	adds	r3, r7, r3
10041534:	8819      	ldrh	r1, [r3, #0]
10041536:	68f8      	ldr	r0, [r7, #12]
10041538:	2300      	movs	r3, #0
1004153a:	9300      	str	r3, [sp, #0]
1004153c:	0023      	movs	r3, r4
1004153e:	f000 fc9d 	bl	10041e7c <I2C_TransferConfig>
10041542:	e012      	b.n	1004156a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10041544:	68fb      	ldr	r3, [r7, #12]
10041546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041548:	b29a      	uxth	r2, r3
1004154a:	68fb      	ldr	r3, [r7, #12]
1004154c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1004154e:	68fb      	ldr	r3, [r7, #12]
10041550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041552:	b2da      	uxtb	r2, r3
10041554:	2380      	movs	r3, #128	@ 0x80
10041556:	049c      	lsls	r4, r3, #18
10041558:	230a      	movs	r3, #10
1004155a:	18fb      	adds	r3, r7, r3
1004155c:	8819      	ldrh	r1, [r3, #0]
1004155e:	68f8      	ldr	r0, [r7, #12]
10041560:	2300      	movs	r3, #0
10041562:	9300      	str	r3, [sp, #0]
10041564:	0023      	movs	r3, r4
10041566:	f000 fc89 	bl	10041e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1004156a:	697a      	ldr	r2, [r7, #20]
1004156c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1004156e:	68fb      	ldr	r3, [r7, #12]
10041570:	0018      	movs	r0, r3
10041572:	f000 fb01 	bl	10041b78 <I2C_WaitOnTXISFlagUntilTimeout>
10041576:	1e03      	subs	r3, r0, #0
10041578:	d001      	beq.n	1004157e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
1004157a:	2301      	movs	r3, #1
1004157c:	e081      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
1004157e:	68fb      	ldr	r3, [r7, #12]
10041580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041582:	781a      	ldrb	r2, [r3, #0]
10041584:	68fb      	ldr	r3, [r7, #12]
10041586:	681b      	ldr	r3, [r3, #0]
10041588:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
1004158a:	68fb      	ldr	r3, [r7, #12]
1004158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004158e:	1c5a      	adds	r2, r3, #1
10041590:	68fb      	ldr	r3, [r7, #12]
10041592:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10041594:	68fb      	ldr	r3, [r7, #12]
10041596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041598:	b29b      	uxth	r3, r3
1004159a:	3b01      	subs	r3, #1
1004159c:	b29a      	uxth	r2, r3
1004159e:	68fb      	ldr	r3, [r7, #12]
100415a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
100415a2:	68fb      	ldr	r3, [r7, #12]
100415a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100415a6:	3b01      	subs	r3, #1
100415a8:	b29a      	uxth	r2, r3
100415aa:	68fb      	ldr	r3, [r7, #12]
100415ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100415ae:	68fb      	ldr	r3, [r7, #12]
100415b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100415b2:	b29b      	uxth	r3, r3
100415b4:	2b00      	cmp	r3, #0
100415b6:	d03a      	beq.n	1004162e <HAL_I2C_Mem_Write+0x1fa>
100415b8:	68fb      	ldr	r3, [r7, #12]
100415ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100415bc:	2b00      	cmp	r3, #0
100415be:	d136      	bne.n	1004162e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
100415c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100415c2:	68f8      	ldr	r0, [r7, #12]
100415c4:	697b      	ldr	r3, [r7, #20]
100415c6:	9300      	str	r3, [sp, #0]
100415c8:	0013      	movs	r3, r2
100415ca:	2200      	movs	r2, #0
100415cc:	2180      	movs	r1, #128	@ 0x80
100415ce:	f000 fa7b 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
100415d2:	1e03      	subs	r3, r0, #0
100415d4:	d001      	beq.n	100415da <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
100415d6:	2301      	movs	r3, #1
100415d8:	e053      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
100415da:	68fb      	ldr	r3, [r7, #12]
100415dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100415de:	b29b      	uxth	r3, r3
100415e0:	2bff      	cmp	r3, #255	@ 0xff
100415e2:	d911      	bls.n	10041608 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
100415e4:	68fb      	ldr	r3, [r7, #12]
100415e6:	22ff      	movs	r2, #255	@ 0xff
100415e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
100415ea:	68fb      	ldr	r3, [r7, #12]
100415ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100415ee:	b2da      	uxtb	r2, r3
100415f0:	2380      	movs	r3, #128	@ 0x80
100415f2:	045c      	lsls	r4, r3, #17
100415f4:	230a      	movs	r3, #10
100415f6:	18fb      	adds	r3, r7, r3
100415f8:	8819      	ldrh	r1, [r3, #0]
100415fa:	68f8      	ldr	r0, [r7, #12]
100415fc:	2300      	movs	r3, #0
100415fe:	9300      	str	r3, [sp, #0]
10041600:	0023      	movs	r3, r4
10041602:	f000 fc3b 	bl	10041e7c <I2C_TransferConfig>
10041606:	e012      	b.n	1004162e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
10041608:	68fb      	ldr	r3, [r7, #12]
1004160a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004160c:	b29a      	uxth	r2, r3
1004160e:	68fb      	ldr	r3, [r7, #12]
10041610:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10041612:	68fb      	ldr	r3, [r7, #12]
10041614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041616:	b2da      	uxtb	r2, r3
10041618:	2380      	movs	r3, #128	@ 0x80
1004161a:	049c      	lsls	r4, r3, #18
1004161c:	230a      	movs	r3, #10
1004161e:	18fb      	adds	r3, r7, r3
10041620:	8819      	ldrh	r1, [r3, #0]
10041622:	68f8      	ldr	r0, [r7, #12]
10041624:	2300      	movs	r3, #0
10041626:	9300      	str	r3, [sp, #0]
10041628:	0023      	movs	r3, r4
1004162a:	f000 fc27 	bl	10041e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
1004162e:	68fb      	ldr	r3, [r7, #12]
10041630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041632:	b29b      	uxth	r3, r3
10041634:	2b00      	cmp	r3, #0
10041636:	d198      	bne.n	1004156a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10041638:	697a      	ldr	r2, [r7, #20]
1004163a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1004163c:	68fb      	ldr	r3, [r7, #12]
1004163e:	0018      	movs	r0, r3
10041640:	f000 fae0 	bl	10041c04 <I2C_WaitOnSTOPFlagUntilTimeout>
10041644:	1e03      	subs	r3, r0, #0
10041646:	d001      	beq.n	1004164c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
10041648:	2301      	movs	r3, #1
1004164a:	e01a      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004164c:	68fb      	ldr	r3, [r7, #12]
1004164e:	681b      	ldr	r3, [r3, #0]
10041650:	2220      	movs	r2, #32
10041652:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10041654:	68fb      	ldr	r3, [r7, #12]
10041656:	681b      	ldr	r3, [r3, #0]
10041658:	685a      	ldr	r2, [r3, #4]
1004165a:	68fb      	ldr	r3, [r7, #12]
1004165c:	681b      	ldr	r3, [r3, #0]
1004165e:	490b      	ldr	r1, [pc, #44]	@ (1004168c <HAL_I2C_Mem_Write+0x258>)
10041660:	400a      	ands	r2, r1
10041662:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
10041664:	68fb      	ldr	r3, [r7, #12]
10041666:	2241      	movs	r2, #65	@ 0x41
10041668:	2120      	movs	r1, #32
1004166a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
1004166c:	68fb      	ldr	r3, [r7, #12]
1004166e:	2242      	movs	r2, #66	@ 0x42
10041670:	2100      	movs	r1, #0
10041672:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10041674:	68fb      	ldr	r3, [r7, #12]
10041676:	2240      	movs	r2, #64	@ 0x40
10041678:	2100      	movs	r1, #0
1004167a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004167c:	2300      	movs	r3, #0
1004167e:	e000      	b.n	10041682 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
10041680:	2302      	movs	r3, #2
  }
}
10041682:	0018      	movs	r0, r3
10041684:	46bd      	mov	sp, r7
10041686:	b007      	add	sp, #28
10041688:	bd90      	pop	{r4, r7, pc}
1004168a:	46c0      	nop			@ (mov r8, r8)
1004168c:	fe00e800 	.word	0xfe00e800

10041690 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10041690:	b590      	push	{r4, r7, lr}
10041692:	b089      	sub	sp, #36	@ 0x24
10041694:	af02      	add	r7, sp, #8
10041696:	60f8      	str	r0, [r7, #12]
10041698:	000c      	movs	r4, r1
1004169a:	0010      	movs	r0, r2
1004169c:	0019      	movs	r1, r3
1004169e:	230a      	movs	r3, #10
100416a0:	18fb      	adds	r3, r7, r3
100416a2:	1c22      	adds	r2, r4, #0
100416a4:	801a      	strh	r2, [r3, #0]
100416a6:	2308      	movs	r3, #8
100416a8:	18fb      	adds	r3, r7, r3
100416aa:	1c02      	adds	r2, r0, #0
100416ac:	801a      	strh	r2, [r3, #0]
100416ae:	1dbb      	adds	r3, r7, #6
100416b0:	1c0a      	adds	r2, r1, #0
100416b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100416b4:	68fb      	ldr	r3, [r7, #12]
100416b6:	2241      	movs	r2, #65	@ 0x41
100416b8:	5c9b      	ldrb	r3, [r3, r2]
100416ba:	b2db      	uxtb	r3, r3
100416bc:	2b20      	cmp	r3, #32
100416be:	d000      	beq.n	100416c2 <HAL_I2C_Mem_Read+0x32>
100416c0:	e110      	b.n	100418e4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
100416c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100416c4:	2b00      	cmp	r3, #0
100416c6:	d004      	beq.n	100416d2 <HAL_I2C_Mem_Read+0x42>
100416c8:	232c      	movs	r3, #44	@ 0x2c
100416ca:	18fb      	adds	r3, r7, r3
100416cc:	881b      	ldrh	r3, [r3, #0]
100416ce:	2b00      	cmp	r3, #0
100416d0:	d105      	bne.n	100416de <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100416d2:	68fb      	ldr	r3, [r7, #12]
100416d4:	2280      	movs	r2, #128	@ 0x80
100416d6:	0092      	lsls	r2, r2, #2
100416d8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
100416da:	2301      	movs	r3, #1
100416dc:	e103      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100416de:	68fb      	ldr	r3, [r7, #12]
100416e0:	2240      	movs	r2, #64	@ 0x40
100416e2:	5c9b      	ldrb	r3, [r3, r2]
100416e4:	2b01      	cmp	r3, #1
100416e6:	d101      	bne.n	100416ec <HAL_I2C_Mem_Read+0x5c>
100416e8:	2302      	movs	r3, #2
100416ea:	e0fc      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
100416ec:	68fb      	ldr	r3, [r7, #12]
100416ee:	2240      	movs	r2, #64	@ 0x40
100416f0:	2101      	movs	r1, #1
100416f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
100416f4:	f7ff fb66 	bl	10040dc4 <HAL_GetTick>
100416f8:	0003      	movs	r3, r0
100416fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
100416fc:	2380      	movs	r3, #128	@ 0x80
100416fe:	0219      	lsls	r1, r3, #8
10041700:	68f8      	ldr	r0, [r7, #12]
10041702:	697b      	ldr	r3, [r7, #20]
10041704:	9300      	str	r3, [sp, #0]
10041706:	2319      	movs	r3, #25
10041708:	2201      	movs	r2, #1
1004170a:	f000 f9dd 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
1004170e:	1e03      	subs	r3, r0, #0
10041710:	d001      	beq.n	10041716 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
10041712:	2301      	movs	r3, #1
10041714:	e0e7      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
10041716:	68fb      	ldr	r3, [r7, #12]
10041718:	2241      	movs	r2, #65	@ 0x41
1004171a:	2122      	movs	r1, #34	@ 0x22
1004171c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
1004171e:	68fb      	ldr	r3, [r7, #12]
10041720:	2242      	movs	r2, #66	@ 0x42
10041722:	2140      	movs	r1, #64	@ 0x40
10041724:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10041726:	68fb      	ldr	r3, [r7, #12]
10041728:	2200      	movs	r2, #0
1004172a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
1004172c:	68fb      	ldr	r3, [r7, #12]
1004172e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10041730:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
10041732:	68fb      	ldr	r3, [r7, #12]
10041734:	222c      	movs	r2, #44	@ 0x2c
10041736:	18ba      	adds	r2, r7, r2
10041738:	8812      	ldrh	r2, [r2, #0]
1004173a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
1004173c:	68fb      	ldr	r3, [r7, #12]
1004173e:	2200      	movs	r2, #0
10041740:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10041742:	1dbb      	adds	r3, r7, #6
10041744:	881c      	ldrh	r4, [r3, #0]
10041746:	2308      	movs	r3, #8
10041748:	18fb      	adds	r3, r7, r3
1004174a:	881a      	ldrh	r2, [r3, #0]
1004174c:	230a      	movs	r3, #10
1004174e:	18fb      	adds	r3, r7, r3
10041750:	8819      	ldrh	r1, [r3, #0]
10041752:	68f8      	ldr	r0, [r7, #12]
10041754:	697b      	ldr	r3, [r7, #20]
10041756:	9301      	str	r3, [sp, #4]
10041758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004175a:	9300      	str	r3, [sp, #0]
1004175c:	0023      	movs	r3, r4
1004175e:	f000 f92f 	bl	100419c0 <I2C_RequestMemoryRead>
10041762:	1e03      	subs	r3, r0, #0
10041764:	d005      	beq.n	10041772 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10041766:	68fb      	ldr	r3, [r7, #12]
10041768:	2240      	movs	r2, #64	@ 0x40
1004176a:	2100      	movs	r1, #0
1004176c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
1004176e:	2301      	movs	r3, #1
10041770:	e0b9      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10041772:	68fb      	ldr	r3, [r7, #12]
10041774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041776:	b29b      	uxth	r3, r3
10041778:	2bff      	cmp	r3, #255	@ 0xff
1004177a:	d911      	bls.n	100417a0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
1004177c:	68fb      	ldr	r3, [r7, #12]
1004177e:	22ff      	movs	r2, #255	@ 0xff
10041780:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
10041782:	68fb      	ldr	r3, [r7, #12]
10041784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041786:	b2da      	uxtb	r2, r3
10041788:	2380      	movs	r3, #128	@ 0x80
1004178a:	045c      	lsls	r4, r3, #17
1004178c:	230a      	movs	r3, #10
1004178e:	18fb      	adds	r3, r7, r3
10041790:	8819      	ldrh	r1, [r3, #0]
10041792:	68f8      	ldr	r0, [r7, #12]
10041794:	4b56      	ldr	r3, [pc, #344]	@ (100418f0 <HAL_I2C_Mem_Read+0x260>)
10041796:	9300      	str	r3, [sp, #0]
10041798:	0023      	movs	r3, r4
1004179a:	f000 fb6f 	bl	10041e7c <I2C_TransferConfig>
1004179e:	e012      	b.n	100417c6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
100417a0:	68fb      	ldr	r3, [r7, #12]
100417a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100417a4:	b29a      	uxth	r2, r3
100417a6:	68fb      	ldr	r3, [r7, #12]
100417a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
100417aa:	68fb      	ldr	r3, [r7, #12]
100417ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100417ae:	b2da      	uxtb	r2, r3
100417b0:	2380      	movs	r3, #128	@ 0x80
100417b2:	049c      	lsls	r4, r3, #18
100417b4:	230a      	movs	r3, #10
100417b6:	18fb      	adds	r3, r7, r3
100417b8:	8819      	ldrh	r1, [r3, #0]
100417ba:	68f8      	ldr	r0, [r7, #12]
100417bc:	4b4c      	ldr	r3, [pc, #304]	@ (100418f0 <HAL_I2C_Mem_Read+0x260>)
100417be:	9300      	str	r3, [sp, #0]
100417c0:	0023      	movs	r3, r4
100417c2:	f000 fb5b 	bl	10041e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
100417c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100417c8:	68f8      	ldr	r0, [r7, #12]
100417ca:	697b      	ldr	r3, [r7, #20]
100417cc:	9300      	str	r3, [sp, #0]
100417ce:	0013      	movs	r3, r2
100417d0:	2200      	movs	r2, #0
100417d2:	2104      	movs	r1, #4
100417d4:	f000 f978 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
100417d8:	1e03      	subs	r3, r0, #0
100417da:	d001      	beq.n	100417e0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
100417dc:	2301      	movs	r3, #1
100417de:	e082      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100417e0:	68fb      	ldr	r3, [r7, #12]
100417e2:	681b      	ldr	r3, [r3, #0]
100417e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100417e6:	68fb      	ldr	r3, [r7, #12]
100417e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100417ea:	b2d2      	uxtb	r2, r2
100417ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100417ee:	68fb      	ldr	r3, [r7, #12]
100417f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100417f2:	1c5a      	adds	r2, r3, #1
100417f4:	68fb      	ldr	r3, [r7, #12]
100417f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
100417f8:	68fb      	ldr	r3, [r7, #12]
100417fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100417fc:	3b01      	subs	r3, #1
100417fe:	b29a      	uxth	r2, r3
10041800:	68fb      	ldr	r3, [r7, #12]
10041802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10041804:	68fb      	ldr	r3, [r7, #12]
10041806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041808:	b29b      	uxth	r3, r3
1004180a:	3b01      	subs	r3, #1
1004180c:	b29a      	uxth	r2, r3
1004180e:	68fb      	ldr	r3, [r7, #12]
10041810:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10041812:	68fb      	ldr	r3, [r7, #12]
10041814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041816:	b29b      	uxth	r3, r3
10041818:	2b00      	cmp	r3, #0
1004181a:	d03a      	beq.n	10041892 <HAL_I2C_Mem_Read+0x202>
1004181c:	68fb      	ldr	r3, [r7, #12]
1004181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041820:	2b00      	cmp	r3, #0
10041822:	d136      	bne.n	10041892 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
10041824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10041826:	68f8      	ldr	r0, [r7, #12]
10041828:	697b      	ldr	r3, [r7, #20]
1004182a:	9300      	str	r3, [sp, #0]
1004182c:	0013      	movs	r3, r2
1004182e:	2200      	movs	r2, #0
10041830:	2180      	movs	r1, #128	@ 0x80
10041832:	f000 f949 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
10041836:	1e03      	subs	r3, r0, #0
10041838:	d001      	beq.n	1004183e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
1004183a:	2301      	movs	r3, #1
1004183c:	e053      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
1004183e:	68fb      	ldr	r3, [r7, #12]
10041840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041842:	b29b      	uxth	r3, r3
10041844:	2bff      	cmp	r3, #255	@ 0xff
10041846:	d911      	bls.n	1004186c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
10041848:	68fb      	ldr	r3, [r7, #12]
1004184a:	22ff      	movs	r2, #255	@ 0xff
1004184c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
1004184e:	68fb      	ldr	r3, [r7, #12]
10041850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10041852:	b2da      	uxtb	r2, r3
10041854:	2380      	movs	r3, #128	@ 0x80
10041856:	045c      	lsls	r4, r3, #17
10041858:	230a      	movs	r3, #10
1004185a:	18fb      	adds	r3, r7, r3
1004185c:	8819      	ldrh	r1, [r3, #0]
1004185e:	68f8      	ldr	r0, [r7, #12]
10041860:	2300      	movs	r3, #0
10041862:	9300      	str	r3, [sp, #0]
10041864:	0023      	movs	r3, r4
10041866:	f000 fb09 	bl	10041e7c <I2C_TransferConfig>
1004186a:	e012      	b.n	10041892 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
1004186c:	68fb      	ldr	r3, [r7, #12]
1004186e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041870:	b29a      	uxth	r2, r3
10041872:	68fb      	ldr	r3, [r7, #12]
10041874:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10041876:	68fb      	ldr	r3, [r7, #12]
10041878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004187a:	b2da      	uxtb	r2, r3
1004187c:	2380      	movs	r3, #128	@ 0x80
1004187e:	049c      	lsls	r4, r3, #18
10041880:	230a      	movs	r3, #10
10041882:	18fb      	adds	r3, r7, r3
10041884:	8819      	ldrh	r1, [r3, #0]
10041886:	68f8      	ldr	r0, [r7, #12]
10041888:	2300      	movs	r3, #0
1004188a:	9300      	str	r3, [sp, #0]
1004188c:	0023      	movs	r3, r4
1004188e:	f000 faf5 	bl	10041e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
10041892:	68fb      	ldr	r3, [r7, #12]
10041894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10041896:	b29b      	uxth	r3, r3
10041898:	2b00      	cmp	r3, #0
1004189a:	d194      	bne.n	100417c6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1004189c:	697a      	ldr	r2, [r7, #20]
1004189e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
100418a0:	68fb      	ldr	r3, [r7, #12]
100418a2:	0018      	movs	r0, r3
100418a4:	f000 f9ae 	bl	10041c04 <I2C_WaitOnSTOPFlagUntilTimeout>
100418a8:	1e03      	subs	r3, r0, #0
100418aa:	d001      	beq.n	100418b0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
100418ac:	2301      	movs	r3, #1
100418ae:	e01a      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100418b0:	68fb      	ldr	r3, [r7, #12]
100418b2:	681b      	ldr	r3, [r3, #0]
100418b4:	2220      	movs	r2, #32
100418b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
100418b8:	68fb      	ldr	r3, [r7, #12]
100418ba:	681b      	ldr	r3, [r3, #0]
100418bc:	685a      	ldr	r2, [r3, #4]
100418be:	68fb      	ldr	r3, [r7, #12]
100418c0:	681b      	ldr	r3, [r3, #0]
100418c2:	490c      	ldr	r1, [pc, #48]	@ (100418f4 <HAL_I2C_Mem_Read+0x264>)
100418c4:	400a      	ands	r2, r1
100418c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
100418c8:	68fb      	ldr	r3, [r7, #12]
100418ca:	2241      	movs	r2, #65	@ 0x41
100418cc:	2120      	movs	r1, #32
100418ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
100418d0:	68fb      	ldr	r3, [r7, #12]
100418d2:	2242      	movs	r2, #66	@ 0x42
100418d4:	2100      	movs	r1, #0
100418d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100418d8:	68fb      	ldr	r3, [r7, #12]
100418da:	2240      	movs	r2, #64	@ 0x40
100418dc:	2100      	movs	r1, #0
100418de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
100418e0:	2300      	movs	r3, #0
100418e2:	e000      	b.n	100418e6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
100418e4:	2302      	movs	r3, #2
  }
}
100418e6:	0018      	movs	r0, r3
100418e8:	46bd      	mov	sp, r7
100418ea:	b007      	add	sp, #28
100418ec:	bd90      	pop	{r4, r7, pc}
100418ee:	46c0      	nop			@ (mov r8, r8)
100418f0:	80002400 	.word	0x80002400
100418f4:	fe00e800 	.word	0xfe00e800

100418f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
100418f8:	b5b0      	push	{r4, r5, r7, lr}
100418fa:	b086      	sub	sp, #24
100418fc:	af02      	add	r7, sp, #8
100418fe:	60f8      	str	r0, [r7, #12]
10041900:	000c      	movs	r4, r1
10041902:	0010      	movs	r0, r2
10041904:	0019      	movs	r1, r3
10041906:	250a      	movs	r5, #10
10041908:	197b      	adds	r3, r7, r5
1004190a:	1c22      	adds	r2, r4, #0
1004190c:	801a      	strh	r2, [r3, #0]
1004190e:	2308      	movs	r3, #8
10041910:	18fb      	adds	r3, r7, r3
10041912:	1c02      	adds	r2, r0, #0
10041914:	801a      	strh	r2, [r3, #0]
10041916:	1dbb      	adds	r3, r7, #6
10041918:	1c0a      	adds	r2, r1, #0
1004191a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
1004191c:	1dbb      	adds	r3, r7, #6
1004191e:	881b      	ldrh	r3, [r3, #0]
10041920:	b2da      	uxtb	r2, r3
10041922:	2380      	movs	r3, #128	@ 0x80
10041924:	045c      	lsls	r4, r3, #17
10041926:	197b      	adds	r3, r7, r5
10041928:	8819      	ldrh	r1, [r3, #0]
1004192a:	68f8      	ldr	r0, [r7, #12]
1004192c:	4b23      	ldr	r3, [pc, #140]	@ (100419bc <I2C_RequestMemoryWrite+0xc4>)
1004192e:	9300      	str	r3, [sp, #0]
10041930:	0023      	movs	r3, r4
10041932:	f000 faa3 	bl	10041e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10041936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10041938:	6a39      	ldr	r1, [r7, #32]
1004193a:	68fb      	ldr	r3, [r7, #12]
1004193c:	0018      	movs	r0, r3
1004193e:	f000 f91b 	bl	10041b78 <I2C_WaitOnTXISFlagUntilTimeout>
10041942:	1e03      	subs	r3, r0, #0
10041944:	d001      	beq.n	1004194a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
10041946:	2301      	movs	r3, #1
10041948:	e033      	b.n	100419b2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
1004194a:	1dbb      	adds	r3, r7, #6
1004194c:	881b      	ldrh	r3, [r3, #0]
1004194e:	2b01      	cmp	r3, #1
10041950:	d107      	bne.n	10041962 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10041952:	2308      	movs	r3, #8
10041954:	18fb      	adds	r3, r7, r3
10041956:	881b      	ldrh	r3, [r3, #0]
10041958:	b2da      	uxtb	r2, r3
1004195a:	68fb      	ldr	r3, [r7, #12]
1004195c:	681b      	ldr	r3, [r3, #0]
1004195e:	629a      	str	r2, [r3, #40]	@ 0x28
10041960:	e019      	b.n	10041996 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10041962:	2308      	movs	r3, #8
10041964:	18fb      	adds	r3, r7, r3
10041966:	881b      	ldrh	r3, [r3, #0]
10041968:	0a1b      	lsrs	r3, r3, #8
1004196a:	b29b      	uxth	r3, r3
1004196c:	b2da      	uxtb	r2, r3
1004196e:	68fb      	ldr	r3, [r7, #12]
10041970:	681b      	ldr	r3, [r3, #0]
10041972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10041974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10041976:	6a39      	ldr	r1, [r7, #32]
10041978:	68fb      	ldr	r3, [r7, #12]
1004197a:	0018      	movs	r0, r3
1004197c:	f000 f8fc 	bl	10041b78 <I2C_WaitOnTXISFlagUntilTimeout>
10041980:	1e03      	subs	r3, r0, #0
10041982:	d001      	beq.n	10041988 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
10041984:	2301      	movs	r3, #1
10041986:	e014      	b.n	100419b2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10041988:	2308      	movs	r3, #8
1004198a:	18fb      	adds	r3, r7, r3
1004198c:	881b      	ldrh	r3, [r3, #0]
1004198e:	b2da      	uxtb	r2, r3
10041990:	68fb      	ldr	r3, [r7, #12]
10041992:	681b      	ldr	r3, [r3, #0]
10041994:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
10041996:	6a3a      	ldr	r2, [r7, #32]
10041998:	68f8      	ldr	r0, [r7, #12]
1004199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004199c:	9300      	str	r3, [sp, #0]
1004199e:	0013      	movs	r3, r2
100419a0:	2200      	movs	r2, #0
100419a2:	2180      	movs	r1, #128	@ 0x80
100419a4:	f000 f890 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
100419a8:	1e03      	subs	r3, r0, #0
100419aa:	d001      	beq.n	100419b0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
100419ac:	2301      	movs	r3, #1
100419ae:	e000      	b.n	100419b2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
100419b0:	2300      	movs	r3, #0
}
100419b2:	0018      	movs	r0, r3
100419b4:	46bd      	mov	sp, r7
100419b6:	b004      	add	sp, #16
100419b8:	bdb0      	pop	{r4, r5, r7, pc}
100419ba:	46c0      	nop			@ (mov r8, r8)
100419bc:	80002000 	.word	0x80002000

100419c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
100419c0:	b5b0      	push	{r4, r5, r7, lr}
100419c2:	b086      	sub	sp, #24
100419c4:	af02      	add	r7, sp, #8
100419c6:	60f8      	str	r0, [r7, #12]
100419c8:	000c      	movs	r4, r1
100419ca:	0010      	movs	r0, r2
100419cc:	0019      	movs	r1, r3
100419ce:	250a      	movs	r5, #10
100419d0:	197b      	adds	r3, r7, r5
100419d2:	1c22      	adds	r2, r4, #0
100419d4:	801a      	strh	r2, [r3, #0]
100419d6:	2308      	movs	r3, #8
100419d8:	18fb      	adds	r3, r7, r3
100419da:	1c02      	adds	r2, r0, #0
100419dc:	801a      	strh	r2, [r3, #0]
100419de:	1dbb      	adds	r3, r7, #6
100419e0:	1c0a      	adds	r2, r1, #0
100419e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
100419e4:	1dbb      	adds	r3, r7, #6
100419e6:	881b      	ldrh	r3, [r3, #0]
100419e8:	b2da      	uxtb	r2, r3
100419ea:	197b      	adds	r3, r7, r5
100419ec:	8819      	ldrh	r1, [r3, #0]
100419ee:	68f8      	ldr	r0, [r7, #12]
100419f0:	4b23      	ldr	r3, [pc, #140]	@ (10041a80 <I2C_RequestMemoryRead+0xc0>)
100419f2:	9300      	str	r3, [sp, #0]
100419f4:	2300      	movs	r3, #0
100419f6:	f000 fa41 	bl	10041e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
100419fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100419fc:	6a39      	ldr	r1, [r7, #32]
100419fe:	68fb      	ldr	r3, [r7, #12]
10041a00:	0018      	movs	r0, r3
10041a02:	f000 f8b9 	bl	10041b78 <I2C_WaitOnTXISFlagUntilTimeout>
10041a06:	1e03      	subs	r3, r0, #0
10041a08:	d001      	beq.n	10041a0e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
10041a0a:	2301      	movs	r3, #1
10041a0c:	e033      	b.n	10041a76 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10041a0e:	1dbb      	adds	r3, r7, #6
10041a10:	881b      	ldrh	r3, [r3, #0]
10041a12:	2b01      	cmp	r3, #1
10041a14:	d107      	bne.n	10041a26 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10041a16:	2308      	movs	r3, #8
10041a18:	18fb      	adds	r3, r7, r3
10041a1a:	881b      	ldrh	r3, [r3, #0]
10041a1c:	b2da      	uxtb	r2, r3
10041a1e:	68fb      	ldr	r3, [r7, #12]
10041a20:	681b      	ldr	r3, [r3, #0]
10041a22:	629a      	str	r2, [r3, #40]	@ 0x28
10041a24:	e019      	b.n	10041a5a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10041a26:	2308      	movs	r3, #8
10041a28:	18fb      	adds	r3, r7, r3
10041a2a:	881b      	ldrh	r3, [r3, #0]
10041a2c:	0a1b      	lsrs	r3, r3, #8
10041a2e:	b29b      	uxth	r3, r3
10041a30:	b2da      	uxtb	r2, r3
10041a32:	68fb      	ldr	r3, [r7, #12]
10041a34:	681b      	ldr	r3, [r3, #0]
10041a36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10041a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10041a3a:	6a39      	ldr	r1, [r7, #32]
10041a3c:	68fb      	ldr	r3, [r7, #12]
10041a3e:	0018      	movs	r0, r3
10041a40:	f000 f89a 	bl	10041b78 <I2C_WaitOnTXISFlagUntilTimeout>
10041a44:	1e03      	subs	r3, r0, #0
10041a46:	d001      	beq.n	10041a4c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
10041a48:	2301      	movs	r3, #1
10041a4a:	e014      	b.n	10041a76 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10041a4c:	2308      	movs	r3, #8
10041a4e:	18fb      	adds	r3, r7, r3
10041a50:	881b      	ldrh	r3, [r3, #0]
10041a52:	b2da      	uxtb	r2, r3
10041a54:	68fb      	ldr	r3, [r7, #12]
10041a56:	681b      	ldr	r3, [r3, #0]
10041a58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
10041a5a:	6a3a      	ldr	r2, [r7, #32]
10041a5c:	68f8      	ldr	r0, [r7, #12]
10041a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10041a60:	9300      	str	r3, [sp, #0]
10041a62:	0013      	movs	r3, r2
10041a64:	2200      	movs	r2, #0
10041a66:	2140      	movs	r1, #64	@ 0x40
10041a68:	f000 f82e 	bl	10041ac8 <I2C_WaitOnFlagUntilTimeout>
10041a6c:	1e03      	subs	r3, r0, #0
10041a6e:	d001      	beq.n	10041a74 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
10041a70:	2301      	movs	r3, #1
10041a72:	e000      	b.n	10041a76 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
10041a74:	2300      	movs	r3, #0
}
10041a76:	0018      	movs	r0, r3
10041a78:	46bd      	mov	sp, r7
10041a7a:	b004      	add	sp, #16
10041a7c:	bdb0      	pop	{r4, r5, r7, pc}
10041a7e:	46c0      	nop			@ (mov r8, r8)
10041a80:	80002000 	.word	0x80002000

10041a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10041a84:	b580      	push	{r7, lr}
10041a86:	b082      	sub	sp, #8
10041a88:	af00      	add	r7, sp, #0
10041a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10041a8c:	687b      	ldr	r3, [r7, #4]
10041a8e:	681b      	ldr	r3, [r3, #0]
10041a90:	699b      	ldr	r3, [r3, #24]
10041a92:	2202      	movs	r2, #2
10041a94:	4013      	ands	r3, r2
10041a96:	2b02      	cmp	r3, #2
10041a98:	d103      	bne.n	10041aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10041a9a:	687b      	ldr	r3, [r7, #4]
10041a9c:	681b      	ldr	r3, [r3, #0]
10041a9e:	2200      	movs	r2, #0
10041aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10041aa2:	687b      	ldr	r3, [r7, #4]
10041aa4:	681b      	ldr	r3, [r3, #0]
10041aa6:	699b      	ldr	r3, [r3, #24]
10041aa8:	2201      	movs	r2, #1
10041aaa:	4013      	ands	r3, r2
10041aac:	2b01      	cmp	r3, #1
10041aae:	d007      	beq.n	10041ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10041ab0:	687b      	ldr	r3, [r7, #4]
10041ab2:	681b      	ldr	r3, [r3, #0]
10041ab4:	699a      	ldr	r2, [r3, #24]
10041ab6:	687b      	ldr	r3, [r7, #4]
10041ab8:	681b      	ldr	r3, [r3, #0]
10041aba:	2101      	movs	r1, #1
10041abc:	430a      	orrs	r2, r1
10041abe:	619a      	str	r2, [r3, #24]
  }
}
10041ac0:	46c0      	nop			@ (mov r8, r8)
10041ac2:	46bd      	mov	sp, r7
10041ac4:	b002      	add	sp, #8
10041ac6:	bd80      	pop	{r7, pc}

10041ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
10041ac8:	b580      	push	{r7, lr}
10041aca:	b084      	sub	sp, #16
10041acc:	af00      	add	r7, sp, #0
10041ace:	60f8      	str	r0, [r7, #12]
10041ad0:	60b9      	str	r1, [r7, #8]
10041ad2:	603b      	str	r3, [r7, #0]
10041ad4:	1dfb      	adds	r3, r7, #7
10041ad6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10041ad8:	e03a      	b.n	10041b50 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10041ada:	69ba      	ldr	r2, [r7, #24]
10041adc:	6839      	ldr	r1, [r7, #0]
10041ade:	68fb      	ldr	r3, [r7, #12]
10041ae0:	0018      	movs	r0, r3
10041ae2:	f000 f8d3 	bl	10041c8c <I2C_IsErrorOccurred>
10041ae6:	1e03      	subs	r3, r0, #0
10041ae8:	d001      	beq.n	10041aee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
10041aea:	2301      	movs	r3, #1
10041aec:	e040      	b.n	10041b70 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10041aee:	683b      	ldr	r3, [r7, #0]
10041af0:	3301      	adds	r3, #1
10041af2:	d02d      	beq.n	10041b50 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10041af4:	f7ff f966 	bl	10040dc4 <HAL_GetTick>
10041af8:	0002      	movs	r2, r0
10041afa:	69bb      	ldr	r3, [r7, #24]
10041afc:	1ad3      	subs	r3, r2, r3
10041afe:	683a      	ldr	r2, [r7, #0]
10041b00:	429a      	cmp	r2, r3
10041b02:	d302      	bcc.n	10041b0a <I2C_WaitOnFlagUntilTimeout+0x42>
10041b04:	683b      	ldr	r3, [r7, #0]
10041b06:	2b00      	cmp	r3, #0
10041b08:	d122      	bne.n	10041b50 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10041b0a:	68fb      	ldr	r3, [r7, #12]
10041b0c:	681b      	ldr	r3, [r3, #0]
10041b0e:	699b      	ldr	r3, [r3, #24]
10041b10:	68ba      	ldr	r2, [r7, #8]
10041b12:	4013      	ands	r3, r2
10041b14:	68ba      	ldr	r2, [r7, #8]
10041b16:	1ad3      	subs	r3, r2, r3
10041b18:	425a      	negs	r2, r3
10041b1a:	4153      	adcs	r3, r2
10041b1c:	b2db      	uxtb	r3, r3
10041b1e:	001a      	movs	r2, r3
10041b20:	1dfb      	adds	r3, r7, #7
10041b22:	781b      	ldrb	r3, [r3, #0]
10041b24:	429a      	cmp	r2, r3
10041b26:	d113      	bne.n	10041b50 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10041b28:	68fb      	ldr	r3, [r7, #12]
10041b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041b2c:	2220      	movs	r2, #32
10041b2e:	431a      	orrs	r2, r3
10041b30:	68fb      	ldr	r3, [r7, #12]
10041b32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
10041b34:	68fb      	ldr	r3, [r7, #12]
10041b36:	2241      	movs	r2, #65	@ 0x41
10041b38:	2120      	movs	r1, #32
10041b3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
10041b3c:	68fb      	ldr	r3, [r7, #12]
10041b3e:	2242      	movs	r2, #66	@ 0x42
10041b40:	2100      	movs	r1, #0
10041b42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10041b44:	68fb      	ldr	r3, [r7, #12]
10041b46:	2240      	movs	r2, #64	@ 0x40
10041b48:	2100      	movs	r1, #0
10041b4a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
10041b4c:	2301      	movs	r3, #1
10041b4e:	e00f      	b.n	10041b70 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10041b50:	68fb      	ldr	r3, [r7, #12]
10041b52:	681b      	ldr	r3, [r3, #0]
10041b54:	699b      	ldr	r3, [r3, #24]
10041b56:	68ba      	ldr	r2, [r7, #8]
10041b58:	4013      	ands	r3, r2
10041b5a:	68ba      	ldr	r2, [r7, #8]
10041b5c:	1ad3      	subs	r3, r2, r3
10041b5e:	425a      	negs	r2, r3
10041b60:	4153      	adcs	r3, r2
10041b62:	b2db      	uxtb	r3, r3
10041b64:	001a      	movs	r2, r3
10041b66:	1dfb      	adds	r3, r7, #7
10041b68:	781b      	ldrb	r3, [r3, #0]
10041b6a:	429a      	cmp	r2, r3
10041b6c:	d0b5      	beq.n	10041ada <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10041b6e:	2300      	movs	r3, #0
}
10041b70:	0018      	movs	r0, r3
10041b72:	46bd      	mov	sp, r7
10041b74:	b004      	add	sp, #16
10041b76:	bd80      	pop	{r7, pc}

10041b78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10041b78:	b580      	push	{r7, lr}
10041b7a:	b084      	sub	sp, #16
10041b7c:	af00      	add	r7, sp, #0
10041b7e:	60f8      	str	r0, [r7, #12]
10041b80:	60b9      	str	r1, [r7, #8]
10041b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10041b84:	e032      	b.n	10041bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10041b86:	687a      	ldr	r2, [r7, #4]
10041b88:	68b9      	ldr	r1, [r7, #8]
10041b8a:	68fb      	ldr	r3, [r7, #12]
10041b8c:	0018      	movs	r0, r3
10041b8e:	f000 f87d 	bl	10041c8c <I2C_IsErrorOccurred>
10041b92:	1e03      	subs	r3, r0, #0
10041b94:	d001      	beq.n	10041b9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10041b96:	2301      	movs	r3, #1
10041b98:	e030      	b.n	10041bfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10041b9a:	68bb      	ldr	r3, [r7, #8]
10041b9c:	3301      	adds	r3, #1
10041b9e:	d025      	beq.n	10041bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10041ba0:	f7ff f910 	bl	10040dc4 <HAL_GetTick>
10041ba4:	0002      	movs	r2, r0
10041ba6:	687b      	ldr	r3, [r7, #4]
10041ba8:	1ad3      	subs	r3, r2, r3
10041baa:	68ba      	ldr	r2, [r7, #8]
10041bac:	429a      	cmp	r2, r3
10041bae:	d302      	bcc.n	10041bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
10041bb0:	68bb      	ldr	r3, [r7, #8]
10041bb2:	2b00      	cmp	r3, #0
10041bb4:	d11a      	bne.n	10041bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10041bb6:	68fb      	ldr	r3, [r7, #12]
10041bb8:	681b      	ldr	r3, [r3, #0]
10041bba:	699b      	ldr	r3, [r3, #24]
10041bbc:	2202      	movs	r2, #2
10041bbe:	4013      	ands	r3, r2
10041bc0:	2b02      	cmp	r3, #2
10041bc2:	d013      	beq.n	10041bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10041bc4:	68fb      	ldr	r3, [r7, #12]
10041bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041bc8:	2220      	movs	r2, #32
10041bca:	431a      	orrs	r2, r3
10041bcc:	68fb      	ldr	r3, [r7, #12]
10041bce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
10041bd0:	68fb      	ldr	r3, [r7, #12]
10041bd2:	2241      	movs	r2, #65	@ 0x41
10041bd4:	2120      	movs	r1, #32
10041bd6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
10041bd8:	68fb      	ldr	r3, [r7, #12]
10041bda:	2242      	movs	r2, #66	@ 0x42
10041bdc:	2100      	movs	r1, #0
10041bde:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10041be0:	68fb      	ldr	r3, [r7, #12]
10041be2:	2240      	movs	r2, #64	@ 0x40
10041be4:	2100      	movs	r1, #0
10041be6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10041be8:	2301      	movs	r3, #1
10041bea:	e007      	b.n	10041bfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10041bec:	68fb      	ldr	r3, [r7, #12]
10041bee:	681b      	ldr	r3, [r3, #0]
10041bf0:	699b      	ldr	r3, [r3, #24]
10041bf2:	2202      	movs	r2, #2
10041bf4:	4013      	ands	r3, r2
10041bf6:	2b02      	cmp	r3, #2
10041bf8:	d1c5      	bne.n	10041b86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
10041bfa:	2300      	movs	r3, #0
}
10041bfc:	0018      	movs	r0, r3
10041bfe:	46bd      	mov	sp, r7
10041c00:	b004      	add	sp, #16
10041c02:	bd80      	pop	{r7, pc}

10041c04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10041c04:	b580      	push	{r7, lr}
10041c06:	b084      	sub	sp, #16
10041c08:	af00      	add	r7, sp, #0
10041c0a:	60f8      	str	r0, [r7, #12]
10041c0c:	60b9      	str	r1, [r7, #8]
10041c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10041c10:	e02f      	b.n	10041c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10041c12:	687a      	ldr	r2, [r7, #4]
10041c14:	68b9      	ldr	r1, [r7, #8]
10041c16:	68fb      	ldr	r3, [r7, #12]
10041c18:	0018      	movs	r0, r3
10041c1a:	f000 f837 	bl	10041c8c <I2C_IsErrorOccurred>
10041c1e:	1e03      	subs	r3, r0, #0
10041c20:	d001      	beq.n	10041c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10041c22:	2301      	movs	r3, #1
10041c24:	e02d      	b.n	10041c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10041c26:	f7ff f8cd 	bl	10040dc4 <HAL_GetTick>
10041c2a:	0002      	movs	r2, r0
10041c2c:	687b      	ldr	r3, [r7, #4]
10041c2e:	1ad3      	subs	r3, r2, r3
10041c30:	68ba      	ldr	r2, [r7, #8]
10041c32:	429a      	cmp	r2, r3
10041c34:	d302      	bcc.n	10041c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
10041c36:	68bb      	ldr	r3, [r7, #8]
10041c38:	2b00      	cmp	r3, #0
10041c3a:	d11a      	bne.n	10041c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10041c3c:	68fb      	ldr	r3, [r7, #12]
10041c3e:	681b      	ldr	r3, [r3, #0]
10041c40:	699b      	ldr	r3, [r3, #24]
10041c42:	2220      	movs	r2, #32
10041c44:	4013      	ands	r3, r2
10041c46:	2b20      	cmp	r3, #32
10041c48:	d013      	beq.n	10041c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10041c4a:	68fb      	ldr	r3, [r7, #12]
10041c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10041c4e:	2220      	movs	r2, #32
10041c50:	431a      	orrs	r2, r3
10041c52:	68fb      	ldr	r3, [r7, #12]
10041c54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
10041c56:	68fb      	ldr	r3, [r7, #12]
10041c58:	2241      	movs	r2, #65	@ 0x41
10041c5a:	2120      	movs	r1, #32
10041c5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
10041c5e:	68fb      	ldr	r3, [r7, #12]
10041c60:	2242      	movs	r2, #66	@ 0x42
10041c62:	2100      	movs	r1, #0
10041c64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10041c66:	68fb      	ldr	r3, [r7, #12]
10041c68:	2240      	movs	r2, #64	@ 0x40
10041c6a:	2100      	movs	r1, #0
10041c6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
10041c6e:	2301      	movs	r3, #1
10041c70:	e007      	b.n	10041c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10041c72:	68fb      	ldr	r3, [r7, #12]
10041c74:	681b      	ldr	r3, [r3, #0]
10041c76:	699b      	ldr	r3, [r3, #24]
10041c78:	2220      	movs	r2, #32
10041c7a:	4013      	ands	r3, r2
10041c7c:	2b20      	cmp	r3, #32
10041c7e:	d1c8      	bne.n	10041c12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
10041c80:	2300      	movs	r3, #0
}
10041c82:	0018      	movs	r0, r3
10041c84:	46bd      	mov	sp, r7
10041c86:	b004      	add	sp, #16
10041c88:	bd80      	pop	{r7, pc}
	...

10041c8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
10041c8c:	b580      	push	{r7, lr}
10041c8e:	b08a      	sub	sp, #40	@ 0x28
10041c90:	af00      	add	r7, sp, #0
10041c92:	60f8      	str	r0, [r7, #12]
10041c94:	60b9      	str	r1, [r7, #8]
10041c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10041c98:	2327      	movs	r3, #39	@ 0x27
10041c9a:	18fb      	adds	r3, r7, r3
10041c9c:	2200      	movs	r2, #0
10041c9e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
10041ca0:	68fb      	ldr	r3, [r7, #12]
10041ca2:	681b      	ldr	r3, [r3, #0]
10041ca4:	699b      	ldr	r3, [r3, #24]
10041ca6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
10041ca8:	2300      	movs	r3, #0
10041caa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
10041cac:	687b      	ldr	r3, [r7, #4]
10041cae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
10041cb0:	69bb      	ldr	r3, [r7, #24]
10041cb2:	2210      	movs	r2, #16
10041cb4:	4013      	ands	r3, r2
10041cb6:	d100      	bne.n	10041cba <I2C_IsErrorOccurred+0x2e>
10041cb8:	e079      	b.n	10041dae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10041cba:	68fb      	ldr	r3, [r7, #12]
10041cbc:	681b      	ldr	r3, [r3, #0]
10041cbe:	2210      	movs	r2, #16
10041cc0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10041cc2:	e057      	b.n	10041d74 <I2C_IsErrorOccurred+0xe8>
10041cc4:	2227      	movs	r2, #39	@ 0x27
10041cc6:	18bb      	adds	r3, r7, r2
10041cc8:	18ba      	adds	r2, r7, r2
10041cca:	7812      	ldrb	r2, [r2, #0]
10041ccc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
10041cce:	68bb      	ldr	r3, [r7, #8]
10041cd0:	3301      	adds	r3, #1
10041cd2:	d04f      	beq.n	10041d74 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
10041cd4:	f7ff f876 	bl	10040dc4 <HAL_GetTick>
10041cd8:	0002      	movs	r2, r0
10041cda:	69fb      	ldr	r3, [r7, #28]
10041cdc:	1ad3      	subs	r3, r2, r3
10041cde:	68ba      	ldr	r2, [r7, #8]
10041ce0:	429a      	cmp	r2, r3
10041ce2:	d302      	bcc.n	10041cea <I2C_IsErrorOccurred+0x5e>
10041ce4:	68bb      	ldr	r3, [r7, #8]
10041ce6:	2b00      	cmp	r3, #0
10041ce8:	d144      	bne.n	10041d74 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
10041cea:	68fb      	ldr	r3, [r7, #12]
10041cec:	681b      	ldr	r3, [r3, #0]
10041cee:	685a      	ldr	r2, [r3, #4]
10041cf0:	2380      	movs	r3, #128	@ 0x80
10041cf2:	01db      	lsls	r3, r3, #7
10041cf4:	4013      	ands	r3, r2
10041cf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
10041cf8:	2013      	movs	r0, #19
10041cfa:	183b      	adds	r3, r7, r0
10041cfc:	68fa      	ldr	r2, [r7, #12]
10041cfe:	2142      	movs	r1, #66	@ 0x42
10041d00:	5c52      	ldrb	r2, [r2, r1]
10041d02:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
10041d04:	68fb      	ldr	r3, [r7, #12]
10041d06:	681b      	ldr	r3, [r3, #0]
10041d08:	699a      	ldr	r2, [r3, #24]
10041d0a:	2380      	movs	r3, #128	@ 0x80
10041d0c:	021b      	lsls	r3, r3, #8
10041d0e:	401a      	ands	r2, r3
10041d10:	2380      	movs	r3, #128	@ 0x80
10041d12:	021b      	lsls	r3, r3, #8
10041d14:	429a      	cmp	r2, r3
10041d16:	d126      	bne.n	10041d66 <I2C_IsErrorOccurred+0xda>
10041d18:	697a      	ldr	r2, [r7, #20]
10041d1a:	2380      	movs	r3, #128	@ 0x80
10041d1c:	01db      	lsls	r3, r3, #7
10041d1e:	429a      	cmp	r2, r3
10041d20:	d021      	beq.n	10041d66 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
10041d22:	183b      	adds	r3, r7, r0
10041d24:	781b      	ldrb	r3, [r3, #0]
10041d26:	2b20      	cmp	r3, #32
10041d28:	d01d      	beq.n	10041d66 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
10041d2a:	68fb      	ldr	r3, [r7, #12]
10041d2c:	681b      	ldr	r3, [r3, #0]
10041d2e:	685a      	ldr	r2, [r3, #4]
10041d30:	68fb      	ldr	r3, [r7, #12]
10041d32:	681b      	ldr	r3, [r3, #0]
10041d34:	2180      	movs	r1, #128	@ 0x80
10041d36:	01c9      	lsls	r1, r1, #7
10041d38:	430a      	orrs	r2, r1
10041d3a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
10041d3c:	f7ff f842 	bl	10040dc4 <HAL_GetTick>
10041d40:	0003      	movs	r3, r0
10041d42:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10041d44:	e00f      	b.n	10041d66 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
10041d46:	f7ff f83d 	bl	10040dc4 <HAL_GetTick>
10041d4a:	0002      	movs	r2, r0
10041d4c:	69fb      	ldr	r3, [r7, #28]
10041d4e:	1ad3      	subs	r3, r2, r3
10041d50:	2b19      	cmp	r3, #25
10041d52:	d908      	bls.n	10041d66 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
10041d54:	6a3b      	ldr	r3, [r7, #32]
10041d56:	2220      	movs	r2, #32
10041d58:	4313      	orrs	r3, r2
10041d5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
10041d5c:	2327      	movs	r3, #39	@ 0x27
10041d5e:	18fb      	adds	r3, r7, r3
10041d60:	2201      	movs	r2, #1
10041d62:	701a      	strb	r2, [r3, #0]

              break;
10041d64:	e006      	b.n	10041d74 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10041d66:	68fb      	ldr	r3, [r7, #12]
10041d68:	681b      	ldr	r3, [r3, #0]
10041d6a:	699b      	ldr	r3, [r3, #24]
10041d6c:	2220      	movs	r2, #32
10041d6e:	4013      	ands	r3, r2
10041d70:	2b20      	cmp	r3, #32
10041d72:	d1e8      	bne.n	10041d46 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10041d74:	68fb      	ldr	r3, [r7, #12]
10041d76:	681b      	ldr	r3, [r3, #0]
10041d78:	699b      	ldr	r3, [r3, #24]
10041d7a:	2220      	movs	r2, #32
10041d7c:	4013      	ands	r3, r2
10041d7e:	2b20      	cmp	r3, #32
10041d80:	d004      	beq.n	10041d8c <I2C_IsErrorOccurred+0x100>
10041d82:	2327      	movs	r3, #39	@ 0x27
10041d84:	18fb      	adds	r3, r7, r3
10041d86:	781b      	ldrb	r3, [r3, #0]
10041d88:	2b00      	cmp	r3, #0
10041d8a:	d09b      	beq.n	10041cc4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
10041d8c:	2327      	movs	r3, #39	@ 0x27
10041d8e:	18fb      	adds	r3, r7, r3
10041d90:	781b      	ldrb	r3, [r3, #0]
10041d92:	2b00      	cmp	r3, #0
10041d94:	d103      	bne.n	10041d9e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10041d96:	68fb      	ldr	r3, [r7, #12]
10041d98:	681b      	ldr	r3, [r3, #0]
10041d9a:	2220      	movs	r2, #32
10041d9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
10041d9e:	6a3b      	ldr	r3, [r7, #32]
10041da0:	2204      	movs	r2, #4
10041da2:	4313      	orrs	r3, r2
10041da4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
10041da6:	2327      	movs	r3, #39	@ 0x27
10041da8:	18fb      	adds	r3, r7, r3
10041daa:	2201      	movs	r2, #1
10041dac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
10041dae:	68fb      	ldr	r3, [r7, #12]
10041db0:	681b      	ldr	r3, [r3, #0]
10041db2:	699b      	ldr	r3, [r3, #24]
10041db4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
10041db6:	69ba      	ldr	r2, [r7, #24]
10041db8:	2380      	movs	r3, #128	@ 0x80
10041dba:	005b      	lsls	r3, r3, #1
10041dbc:	4013      	ands	r3, r2
10041dbe:	d00c      	beq.n	10041dda <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
10041dc0:	6a3b      	ldr	r3, [r7, #32]
10041dc2:	2201      	movs	r2, #1
10041dc4:	4313      	orrs	r3, r2
10041dc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10041dc8:	68fb      	ldr	r3, [r7, #12]
10041dca:	681b      	ldr	r3, [r3, #0]
10041dcc:	2280      	movs	r2, #128	@ 0x80
10041dce:	0052      	lsls	r2, r2, #1
10041dd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
10041dd2:	2327      	movs	r3, #39	@ 0x27
10041dd4:	18fb      	adds	r3, r7, r3
10041dd6:	2201      	movs	r2, #1
10041dd8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
10041dda:	69ba      	ldr	r2, [r7, #24]
10041ddc:	2380      	movs	r3, #128	@ 0x80
10041dde:	00db      	lsls	r3, r3, #3
10041de0:	4013      	ands	r3, r2
10041de2:	d00c      	beq.n	10041dfe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
10041de4:	6a3b      	ldr	r3, [r7, #32]
10041de6:	2208      	movs	r2, #8
10041de8:	4313      	orrs	r3, r2
10041dea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10041dec:	68fb      	ldr	r3, [r7, #12]
10041dee:	681b      	ldr	r3, [r3, #0]
10041df0:	2280      	movs	r2, #128	@ 0x80
10041df2:	00d2      	lsls	r2, r2, #3
10041df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
10041df6:	2327      	movs	r3, #39	@ 0x27
10041df8:	18fb      	adds	r3, r7, r3
10041dfa:	2201      	movs	r2, #1
10041dfc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
10041dfe:	69ba      	ldr	r2, [r7, #24]
10041e00:	2380      	movs	r3, #128	@ 0x80
10041e02:	009b      	lsls	r3, r3, #2
10041e04:	4013      	ands	r3, r2
10041e06:	d00c      	beq.n	10041e22 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
10041e08:	6a3b      	ldr	r3, [r7, #32]
10041e0a:	2202      	movs	r2, #2
10041e0c:	4313      	orrs	r3, r2
10041e0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10041e10:	68fb      	ldr	r3, [r7, #12]
10041e12:	681b      	ldr	r3, [r3, #0]
10041e14:	2280      	movs	r2, #128	@ 0x80
10041e16:	0092      	lsls	r2, r2, #2
10041e18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
10041e1a:	2327      	movs	r3, #39	@ 0x27
10041e1c:	18fb      	adds	r3, r7, r3
10041e1e:	2201      	movs	r2, #1
10041e20:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
10041e22:	2327      	movs	r3, #39	@ 0x27
10041e24:	18fb      	adds	r3, r7, r3
10041e26:	781b      	ldrb	r3, [r3, #0]
10041e28:	2b00      	cmp	r3, #0
10041e2a:	d01d      	beq.n	10041e68 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10041e2c:	68fb      	ldr	r3, [r7, #12]
10041e2e:	0018      	movs	r0, r3
10041e30:	f7ff fe28 	bl	10041a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10041e34:	68fb      	ldr	r3, [r7, #12]
10041e36:	681b      	ldr	r3, [r3, #0]
10041e38:	685a      	ldr	r2, [r3, #4]
10041e3a:	68fb      	ldr	r3, [r7, #12]
10041e3c:	681b      	ldr	r3, [r3, #0]
10041e3e:	490e      	ldr	r1, [pc, #56]	@ (10041e78 <I2C_IsErrorOccurred+0x1ec>)
10041e40:	400a      	ands	r2, r1
10041e42:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
10041e44:	68fb      	ldr	r3, [r7, #12]
10041e46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10041e48:	6a3b      	ldr	r3, [r7, #32]
10041e4a:	431a      	orrs	r2, r3
10041e4c:	68fb      	ldr	r3, [r7, #12]
10041e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
10041e50:	68fb      	ldr	r3, [r7, #12]
10041e52:	2241      	movs	r2, #65	@ 0x41
10041e54:	2120      	movs	r1, #32
10041e56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
10041e58:	68fb      	ldr	r3, [r7, #12]
10041e5a:	2242      	movs	r2, #66	@ 0x42
10041e5c:	2100      	movs	r1, #0
10041e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10041e60:	68fb      	ldr	r3, [r7, #12]
10041e62:	2240      	movs	r2, #64	@ 0x40
10041e64:	2100      	movs	r1, #0
10041e66:	5499      	strb	r1, [r3, r2]
  }

  return status;
10041e68:	2327      	movs	r3, #39	@ 0x27
10041e6a:	18fb      	adds	r3, r7, r3
10041e6c:	781b      	ldrb	r3, [r3, #0]
}
10041e6e:	0018      	movs	r0, r3
10041e70:	46bd      	mov	sp, r7
10041e72:	b00a      	add	sp, #40	@ 0x28
10041e74:	bd80      	pop	{r7, pc}
10041e76:	46c0      	nop			@ (mov r8, r8)
10041e78:	fe00e800 	.word	0xfe00e800

10041e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10041e7c:	b590      	push	{r4, r7, lr}
10041e7e:	b087      	sub	sp, #28
10041e80:	af00      	add	r7, sp, #0
10041e82:	60f8      	str	r0, [r7, #12]
10041e84:	0008      	movs	r0, r1
10041e86:	0011      	movs	r1, r2
10041e88:	607b      	str	r3, [r7, #4]
10041e8a:	240a      	movs	r4, #10
10041e8c:	193b      	adds	r3, r7, r4
10041e8e:	1c02      	adds	r2, r0, #0
10041e90:	801a      	strh	r2, [r3, #0]
10041e92:	2009      	movs	r0, #9
10041e94:	183b      	adds	r3, r7, r0
10041e96:	1c0a      	adds	r2, r1, #0
10041e98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10041e9a:	193b      	adds	r3, r7, r4
10041e9c:	881b      	ldrh	r3, [r3, #0]
10041e9e:	059b      	lsls	r3, r3, #22
10041ea0:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10041ea2:	183b      	adds	r3, r7, r0
10041ea4:	781b      	ldrb	r3, [r3, #0]
10041ea6:	0419      	lsls	r1, r3, #16
10041ea8:	23ff      	movs	r3, #255	@ 0xff
10041eaa:	041b      	lsls	r3, r3, #16
10041eac:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10041eae:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10041eb0:	687b      	ldr	r3, [r7, #4]
10041eb2:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10041eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10041eb6:	4313      	orrs	r3, r2
10041eb8:	005b      	lsls	r3, r3, #1
10041eba:	085b      	lsrs	r3, r3, #1
10041ebc:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10041ebe:	68fb      	ldr	r3, [r7, #12]
10041ec0:	681b      	ldr	r3, [r3, #0]
10041ec2:	685b      	ldr	r3, [r3, #4]
10041ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10041ec6:	0d51      	lsrs	r1, r2, #21
10041ec8:	2280      	movs	r2, #128	@ 0x80
10041eca:	00d2      	lsls	r2, r2, #3
10041ecc:	400a      	ands	r2, r1
10041ece:	4907      	ldr	r1, [pc, #28]	@ (10041eec <I2C_TransferConfig+0x70>)
10041ed0:	430a      	orrs	r2, r1
10041ed2:	43d2      	mvns	r2, r2
10041ed4:	401a      	ands	r2, r3
10041ed6:	0011      	movs	r1, r2
10041ed8:	68fb      	ldr	r3, [r7, #12]
10041eda:	681b      	ldr	r3, [r3, #0]
10041edc:	697a      	ldr	r2, [r7, #20]
10041ede:	430a      	orrs	r2, r1
10041ee0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10041ee2:	46c0      	nop			@ (mov r8, r8)
10041ee4:	46bd      	mov	sp, r7
10041ee6:	b007      	add	sp, #28
10041ee8:	bd90      	pop	{r4, r7, pc}
10041eea:	46c0      	nop			@ (mov r8, r8)
10041eec:	03ff63ff 	.word	0x03ff63ff

10041ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10041ef0:	b580      	push	{r7, lr}
10041ef2:	b082      	sub	sp, #8
10041ef4:	af00      	add	r7, sp, #0
10041ef6:	6078      	str	r0, [r7, #4]
10041ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10041efa:	687b      	ldr	r3, [r7, #4]
10041efc:	2241      	movs	r2, #65	@ 0x41
10041efe:	5c9b      	ldrb	r3, [r3, r2]
10041f00:	b2db      	uxtb	r3, r3
10041f02:	2b20      	cmp	r3, #32
10041f04:	d138      	bne.n	10041f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10041f06:	687b      	ldr	r3, [r7, #4]
10041f08:	2240      	movs	r2, #64	@ 0x40
10041f0a:	5c9b      	ldrb	r3, [r3, r2]
10041f0c:	2b01      	cmp	r3, #1
10041f0e:	d101      	bne.n	10041f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
10041f10:	2302      	movs	r3, #2
10041f12:	e032      	b.n	10041f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
10041f14:	687b      	ldr	r3, [r7, #4]
10041f16:	2240      	movs	r2, #64	@ 0x40
10041f18:	2101      	movs	r1, #1
10041f1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10041f1c:	687b      	ldr	r3, [r7, #4]
10041f1e:	2241      	movs	r2, #65	@ 0x41
10041f20:	2124      	movs	r1, #36	@ 0x24
10041f22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10041f24:	687b      	ldr	r3, [r7, #4]
10041f26:	681b      	ldr	r3, [r3, #0]
10041f28:	681a      	ldr	r2, [r3, #0]
10041f2a:	687b      	ldr	r3, [r7, #4]
10041f2c:	681b      	ldr	r3, [r3, #0]
10041f2e:	2101      	movs	r1, #1
10041f30:	438a      	bics	r2, r1
10041f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
10041f34:	687b      	ldr	r3, [r7, #4]
10041f36:	681b      	ldr	r3, [r3, #0]
10041f38:	681a      	ldr	r2, [r3, #0]
10041f3a:	687b      	ldr	r3, [r7, #4]
10041f3c:	681b      	ldr	r3, [r3, #0]
10041f3e:	4911      	ldr	r1, [pc, #68]	@ (10041f84 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
10041f40:	400a      	ands	r2, r1
10041f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
10041f44:	687b      	ldr	r3, [r7, #4]
10041f46:	681b      	ldr	r3, [r3, #0]
10041f48:	6819      	ldr	r1, [r3, #0]
10041f4a:	687b      	ldr	r3, [r7, #4]
10041f4c:	681b      	ldr	r3, [r3, #0]
10041f4e:	683a      	ldr	r2, [r7, #0]
10041f50:	430a      	orrs	r2, r1
10041f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10041f54:	687b      	ldr	r3, [r7, #4]
10041f56:	681b      	ldr	r3, [r3, #0]
10041f58:	681a      	ldr	r2, [r3, #0]
10041f5a:	687b      	ldr	r3, [r7, #4]
10041f5c:	681b      	ldr	r3, [r3, #0]
10041f5e:	2101      	movs	r1, #1
10041f60:	430a      	orrs	r2, r1
10041f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10041f64:	687b      	ldr	r3, [r7, #4]
10041f66:	2241      	movs	r2, #65	@ 0x41
10041f68:	2120      	movs	r1, #32
10041f6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10041f6c:	687b      	ldr	r3, [r7, #4]
10041f6e:	2240      	movs	r2, #64	@ 0x40
10041f70:	2100      	movs	r1, #0
10041f72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10041f74:	2300      	movs	r3, #0
10041f76:	e000      	b.n	10041f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
10041f78:	2302      	movs	r3, #2
  }
}
10041f7a:	0018      	movs	r0, r3
10041f7c:	46bd      	mov	sp, r7
10041f7e:	b002      	add	sp, #8
10041f80:	bd80      	pop	{r7, pc}
10041f82:	46c0      	nop			@ (mov r8, r8)
10041f84:	ffffefff 	.word	0xffffefff

10041f88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
10041f88:	b580      	push	{r7, lr}
10041f8a:	b084      	sub	sp, #16
10041f8c:	af00      	add	r7, sp, #0
10041f8e:	6078      	str	r0, [r7, #4]
10041f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10041f92:	687b      	ldr	r3, [r7, #4]
10041f94:	2241      	movs	r2, #65	@ 0x41
10041f96:	5c9b      	ldrb	r3, [r3, r2]
10041f98:	b2db      	uxtb	r3, r3
10041f9a:	2b20      	cmp	r3, #32
10041f9c:	d139      	bne.n	10042012 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10041f9e:	687b      	ldr	r3, [r7, #4]
10041fa0:	2240      	movs	r2, #64	@ 0x40
10041fa2:	5c9b      	ldrb	r3, [r3, r2]
10041fa4:	2b01      	cmp	r3, #1
10041fa6:	d101      	bne.n	10041fac <HAL_I2CEx_ConfigDigitalFilter+0x24>
10041fa8:	2302      	movs	r3, #2
10041faa:	e033      	b.n	10042014 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10041fac:	687b      	ldr	r3, [r7, #4]
10041fae:	2240      	movs	r2, #64	@ 0x40
10041fb0:	2101      	movs	r1, #1
10041fb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10041fb4:	687b      	ldr	r3, [r7, #4]
10041fb6:	2241      	movs	r2, #65	@ 0x41
10041fb8:	2124      	movs	r1, #36	@ 0x24
10041fba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10041fbc:	687b      	ldr	r3, [r7, #4]
10041fbe:	681b      	ldr	r3, [r3, #0]
10041fc0:	681a      	ldr	r2, [r3, #0]
10041fc2:	687b      	ldr	r3, [r7, #4]
10041fc4:	681b      	ldr	r3, [r3, #0]
10041fc6:	2101      	movs	r1, #1
10041fc8:	438a      	bics	r2, r1
10041fca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10041fcc:	687b      	ldr	r3, [r7, #4]
10041fce:	681b      	ldr	r3, [r3, #0]
10041fd0:	681b      	ldr	r3, [r3, #0]
10041fd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10041fd4:	68fb      	ldr	r3, [r7, #12]
10041fd6:	4a11      	ldr	r2, [pc, #68]	@ (1004201c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
10041fd8:	4013      	ands	r3, r2
10041fda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10041fdc:	683b      	ldr	r3, [r7, #0]
10041fde:	021b      	lsls	r3, r3, #8
10041fe0:	68fa      	ldr	r2, [r7, #12]
10041fe2:	4313      	orrs	r3, r2
10041fe4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10041fe6:	687b      	ldr	r3, [r7, #4]
10041fe8:	681b      	ldr	r3, [r3, #0]
10041fea:	68fa      	ldr	r2, [r7, #12]
10041fec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10041fee:	687b      	ldr	r3, [r7, #4]
10041ff0:	681b      	ldr	r3, [r3, #0]
10041ff2:	681a      	ldr	r2, [r3, #0]
10041ff4:	687b      	ldr	r3, [r7, #4]
10041ff6:	681b      	ldr	r3, [r3, #0]
10041ff8:	2101      	movs	r1, #1
10041ffa:	430a      	orrs	r2, r1
10041ffc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10041ffe:	687b      	ldr	r3, [r7, #4]
10042000:	2241      	movs	r2, #65	@ 0x41
10042002:	2120      	movs	r1, #32
10042004:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10042006:	687b      	ldr	r3, [r7, #4]
10042008:	2240      	movs	r2, #64	@ 0x40
1004200a:	2100      	movs	r1, #0
1004200c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004200e:	2300      	movs	r3, #0
10042010:	e000      	b.n	10042014 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
10042012:	2302      	movs	r3, #2
  }
}
10042014:	0018      	movs	r0, r3
10042016:	46bd      	mov	sp, r7
10042018:	b004      	add	sp, #16
1004201a:	bd80      	pop	{r7, pc}
1004201c:	fffff0ff 	.word	0xfffff0ff

10042020 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10042020:	b580      	push	{r7, lr}
10042022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10042024:	4b07      	ldr	r3, [pc, #28]	@ (10042044 <LL_RCC_HSE_IsReady+0x24>)
10042026:	681a      	ldr	r2, [r3, #0]
10042028:	2380      	movs	r3, #128	@ 0x80
1004202a:	029b      	lsls	r3, r3, #10
1004202c:	401a      	ands	r2, r3
1004202e:	2380      	movs	r3, #128	@ 0x80
10042030:	029b      	lsls	r3, r3, #10
10042032:	429a      	cmp	r2, r3
10042034:	d101      	bne.n	1004203a <LL_RCC_HSE_IsReady+0x1a>
10042036:	2301      	movs	r3, #1
10042038:	e000      	b.n	1004203c <LL_RCC_HSE_IsReady+0x1c>
1004203a:	2300      	movs	r3, #0
}
1004203c:	0018      	movs	r0, r3
1004203e:	46bd      	mov	sp, r7
10042040:	bd80      	pop	{r7, pc}
10042042:	46c0      	nop			@ (mov r8, r8)
10042044:	48400000 	.word	0x48400000

10042048 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10042048:	b580      	push	{r7, lr}
1004204a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004204c:	4b07      	ldr	r3, [pc, #28]	@ (1004206c <LL_RCC_HSI_Enable+0x24>)
1004204e:	689a      	ldr	r2, [r3, #8]
10042050:	4b06      	ldr	r3, [pc, #24]	@ (1004206c <LL_RCC_HSI_Enable+0x24>)
10042052:	2104      	movs	r1, #4
10042054:	438a      	bics	r2, r1
10042056:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10042058:	4b04      	ldr	r3, [pc, #16]	@ (1004206c <LL_RCC_HSI_Enable+0x24>)
1004205a:	689a      	ldr	r2, [r3, #8]
1004205c:	4b03      	ldr	r3, [pc, #12]	@ (1004206c <LL_RCC_HSI_Enable+0x24>)
1004205e:	2102      	movs	r1, #2
10042060:	438a      	bics	r2, r1
10042062:	609a      	str	r2, [r3, #8]
}
10042064:	46c0      	nop			@ (mov r8, r8)
10042066:	46bd      	mov	sp, r7
10042068:	bd80      	pop	{r7, pc}
1004206a:	46c0      	nop			@ (mov r8, r8)
1004206c:	48400000 	.word	0x48400000

10042070 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10042070:	b580      	push	{r7, lr}
10042072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10042074:	4b07      	ldr	r3, [pc, #28]	@ (10042094 <LL_RCC_HSI_IsReady+0x24>)
10042076:	681a      	ldr	r2, [r3, #0]
10042078:	2380      	movs	r3, #128	@ 0x80
1004207a:	00db      	lsls	r3, r3, #3
1004207c:	401a      	ands	r2, r3
1004207e:	2380      	movs	r3, #128	@ 0x80
10042080:	00db      	lsls	r3, r3, #3
10042082:	429a      	cmp	r2, r3
10042084:	d101      	bne.n	1004208a <LL_RCC_HSI_IsReady+0x1a>
10042086:	2301      	movs	r3, #1
10042088:	e000      	b.n	1004208c <LL_RCC_HSI_IsReady+0x1c>
1004208a:	2300      	movs	r3, #0
}
1004208c:	0018      	movs	r0, r3
1004208e:	46bd      	mov	sp, r7
10042090:	bd80      	pop	{r7, pc}
10042092:	46c0      	nop			@ (mov r8, r8)
10042094:	48400000 	.word	0x48400000

10042098 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10042098:	b580      	push	{r7, lr}
1004209a:	b082      	sub	sp, #8
1004209c:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004209e:	46c0      	nop			@ (mov r8, r8)
100420a0:	4b0f      	ldr	r3, [pc, #60]	@ (100420e0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100420a2:	681a      	ldr	r2, [r3, #0]
100420a4:	2380      	movs	r3, #128	@ 0x80
100420a6:	029b      	lsls	r3, r3, #10
100420a8:	4013      	ands	r3, r2
100420aa:	d0f9      	beq.n	100420a0 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100420ac:	4b0c      	ldr	r3, [pc, #48]	@ (100420e0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100420ae:	689a      	ldr	r2, [r3, #8]
100420b0:	4b0b      	ldr	r3, [pc, #44]	@ (100420e0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100420b2:	2102      	movs	r1, #2
100420b4:	430a      	orrs	r2, r1
100420b6:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
100420b8:	2300      	movs	r3, #0
100420ba:	607b      	str	r3, [r7, #4]
100420bc:	e003      	b.n	100420c6 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
100420be:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100420c0:	687b      	ldr	r3, [r7, #4]
100420c2:	3301      	adds	r3, #1
100420c4:	607b      	str	r3, [r7, #4]
100420c6:	687b      	ldr	r3, [r7, #4]
100420c8:	2b05      	cmp	r3, #5
100420ca:	ddf8      	ble.n	100420be <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100420cc:	4b04      	ldr	r3, [pc, #16]	@ (100420e0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100420ce:	689a      	ldr	r2, [r3, #8]
100420d0:	4b03      	ldr	r3, [pc, #12]	@ (100420e0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100420d2:	2104      	movs	r1, #4
100420d4:	430a      	orrs	r2, r1
100420d6:	609a      	str	r2, [r3, #8]
}
100420d8:	46c0      	nop			@ (mov r8, r8)
100420da:	46bd      	mov	sp, r7
100420dc:	b002      	add	sp, #8
100420de:	bd80      	pop	{r7, pc}
100420e0:	48400000 	.word	0x48400000

100420e4 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
100420e4:	b580      	push	{r7, lr}
100420e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
100420e8:	4b04      	ldr	r3, [pc, #16]	@ (100420fc <LL_RCC_RC64MPLL_Enable+0x18>)
100420ea:	681a      	ldr	r2, [r3, #0]
100420ec:	4b03      	ldr	r3, [pc, #12]	@ (100420fc <LL_RCC_RC64MPLL_Enable+0x18>)
100420ee:	2180      	movs	r1, #128	@ 0x80
100420f0:	0189      	lsls	r1, r1, #6
100420f2:	430a      	orrs	r2, r1
100420f4:	601a      	str	r2, [r3, #0]
}
100420f6:	46c0      	nop			@ (mov r8, r8)
100420f8:	46bd      	mov	sp, r7
100420fa:	bd80      	pop	{r7, pc}
100420fc:	48400000 	.word	0x48400000

10042100 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10042100:	b580      	push	{r7, lr}
10042102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10042104:	4b04      	ldr	r3, [pc, #16]	@ (10042118 <LL_RCC_RC64MPLL_Disable+0x18>)
10042106:	681a      	ldr	r2, [r3, #0]
10042108:	4b03      	ldr	r3, [pc, #12]	@ (10042118 <LL_RCC_RC64MPLL_Disable+0x18>)
1004210a:	4904      	ldr	r1, [pc, #16]	@ (1004211c <LL_RCC_RC64MPLL_Disable+0x1c>)
1004210c:	400a      	ands	r2, r1
1004210e:	601a      	str	r2, [r3, #0]
}
10042110:	46c0      	nop			@ (mov r8, r8)
10042112:	46bd      	mov	sp, r7
10042114:	bd80      	pop	{r7, pc}
10042116:	46c0      	nop			@ (mov r8, r8)
10042118:	48400000 	.word	0x48400000
1004211c:	ffffdfff 	.word	0xffffdfff

10042120 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10042120:	b580      	push	{r7, lr}
10042122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10042124:	4b07      	ldr	r3, [pc, #28]	@ (10042144 <LL_RCC_RC64MPLL_IsReady+0x24>)
10042126:	681a      	ldr	r2, [r3, #0]
10042128:	2380      	movs	r3, #128	@ 0x80
1004212a:	01db      	lsls	r3, r3, #7
1004212c:	401a      	ands	r2, r3
1004212e:	2380      	movs	r3, #128	@ 0x80
10042130:	01db      	lsls	r3, r3, #7
10042132:	429a      	cmp	r2, r3
10042134:	d101      	bne.n	1004213a <LL_RCC_RC64MPLL_IsReady+0x1a>
10042136:	2301      	movs	r3, #1
10042138:	e000      	b.n	1004213c <LL_RCC_RC64MPLL_IsReady+0x1c>
1004213a:	2300      	movs	r3, #0
}
1004213c:	0018      	movs	r0, r3
1004213e:	46bd      	mov	sp, r7
10042140:	bd80      	pop	{r7, pc}
10042142:	46c0      	nop			@ (mov r8, r8)
10042144:	48400000 	.word	0x48400000

10042148 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10042148:	b580      	push	{r7, lr}
1004214a:	b082      	sub	sp, #8
1004214c:	af00      	add	r7, sp, #0
1004214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10042150:	4b06      	ldr	r3, [pc, #24]	@ (1004216c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10042152:	689b      	ldr	r3, [r3, #8]
10042154:	22e0      	movs	r2, #224	@ 0xe0
10042156:	4393      	bics	r3, r2
10042158:	0019      	movs	r1, r3
1004215a:	4b04      	ldr	r3, [pc, #16]	@ (1004216c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004215c:	687a      	ldr	r2, [r7, #4]
1004215e:	430a      	orrs	r2, r1
10042160:	609a      	str	r2, [r3, #8]
}
10042162:	46c0      	nop			@ (mov r8, r8)
10042164:	46bd      	mov	sp, r7
10042166:	b002      	add	sp, #8
10042168:	bd80      	pop	{r7, pc}
1004216a:	46c0      	nop			@ (mov r8, r8)
1004216c:	48400000 	.word	0x48400000

10042170 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10042170:	b580      	push	{r7, lr}
10042172:	b084      	sub	sp, #16
10042174:	af00      	add	r7, sp, #0
10042176:	6078      	str	r0, [r7, #4]
10042178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004217a:	687b      	ldr	r3, [r7, #4]
1004217c:	2b00      	cmp	r3, #0
1004217e:	d101      	bne.n	10042184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10042180:	2301      	movs	r3, #1
10042182:	e098      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10042184:	4b4e      	ldr	r3, [pc, #312]	@ (100422c0 <HAL_RCC_ClockConfig+0x150>)
10042186:	685b      	ldr	r3, [r3, #4]
10042188:	2230      	movs	r2, #48	@ 0x30
1004218a:	4393      	bics	r3, r2
1004218c:	0019      	movs	r1, r3
1004218e:	4b4c      	ldr	r3, [pc, #304]	@ (100422c0 <HAL_RCC_ClockConfig+0x150>)
10042190:	683a      	ldr	r2, [r7, #0]
10042192:	430a      	orrs	r2, r1
10042194:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10042196:	687b      	ldr	r3, [r7, #4]
10042198:	681b      	ldr	r3, [r3, #0]
1004219a:	2b02      	cmp	r3, #2
1004219c:	d10e      	bne.n	100421bc <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004219e:	f7ff ff53 	bl	10042048 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100421a2:	f7ff ff65 	bl	10042070 <LL_RCC_HSI_IsReady>
100421a6:	1e03      	subs	r3, r0, #0
100421a8:	d101      	bne.n	100421ae <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
100421aa:	2301      	movs	r3, #1
100421ac:	e083      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
100421ae:	f7ff ffa7 	bl	10042100 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100421b2:	687b      	ldr	r3, [r7, #4]
100421b4:	685b      	ldr	r3, [r3, #4]
100421b6:	0018      	movs	r0, r3
100421b8:	f7ff ffc6 	bl	10042148 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
100421bc:	687b      	ldr	r3, [r7, #4]
100421be:	681b      	ldr	r3, [r3, #0]
100421c0:	2b00      	cmp	r3, #0
100421c2:	d124      	bne.n	1004220e <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100421c4:	f7ff ff54 	bl	10042070 <LL_RCC_HSI_IsReady>
100421c8:	1e03      	subs	r3, r0, #0
100421ca:	d101      	bne.n	100421d0 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
100421cc:	2301      	movs	r3, #1
100421ce:	e072      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
100421d0:	f7ff ff26 	bl	10042020 <LL_RCC_HSE_IsReady>
100421d4:	1e03      	subs	r3, r0, #0
100421d6:	d101      	bne.n	100421dc <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
100421d8:	2301      	movs	r3, #1
100421da:	e06c      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
100421dc:	f7ff ff82 	bl	100420e4 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100421e0:	f7fe fdf0 	bl	10040dc4 <HAL_GetTick>
100421e4:	0003      	movs	r3, r0
100421e6:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
100421e8:	e008      	b.n	100421fc <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100421ea:	f7fe fdeb 	bl	10040dc4 <HAL_GetTick>
100421ee:	0002      	movs	r2, r0
100421f0:	68fb      	ldr	r3, [r7, #12]
100421f2:	1ad3      	subs	r3, r2, r3
100421f4:	2b02      	cmp	r3, #2
100421f6:	d901      	bls.n	100421fc <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
100421f8:	2303      	movs	r3, #3
100421fa:	e05c      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
100421fc:	f7ff ff90 	bl	10042120 <LL_RCC_RC64MPLL_IsReady>
10042200:	1e03      	subs	r3, r0, #0
10042202:	d0f2      	beq.n	100421ea <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10042204:	687b      	ldr	r3, [r7, #4]
10042206:	685b      	ldr	r3, [r3, #4]
10042208:	0018      	movs	r0, r3
1004220a:	f7ff ff9d 	bl	10042148 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004220e:	687b      	ldr	r3, [r7, #4]
10042210:	681b      	ldr	r3, [r3, #0]
10042212:	2b01      	cmp	r3, #1
10042214:	d117      	bne.n	10042246 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10042216:	f7ff ff3f 	bl	10042098 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004221a:	f7ff ff29 	bl	10042070 <LL_RCC_HSI_IsReady>
1004221e:	1e03      	subs	r3, r0, #0
10042220:	d001      	beq.n	10042226 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10042222:	2301      	movs	r3, #1
10042224:	e047      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10042226:	f7ff fefb 	bl	10042020 <LL_RCC_HSE_IsReady>
1004222a:	1e03      	subs	r3, r0, #0
1004222c:	d101      	bne.n	10042232 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004222e:	2301      	movs	r3, #1
10042230:	e041      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10042232:	4b24      	ldr	r3, [pc, #144]	@ (100422c4 <HAL_RCC_ClockConfig+0x154>)
10042234:	689b      	ldr	r3, [r3, #8]
10042236:	22e0      	movs	r2, #224	@ 0xe0
10042238:	4393      	bics	r3, r2
1004223a:	0019      	movs	r1, r3
1004223c:	687b      	ldr	r3, [r7, #4]
1004223e:	685a      	ldr	r2, [r3, #4]
10042240:	4b20      	ldr	r3, [pc, #128]	@ (100422c4 <HAL_RCC_ClockConfig+0x154>)
10042242:	430a      	orrs	r2, r1
10042244:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10042246:	4b1e      	ldr	r3, [pc, #120]	@ (100422c0 <HAL_RCC_ClockConfig+0x150>)
10042248:	685b      	ldr	r3, [r3, #4]
1004224a:	2230      	movs	r2, #48	@ 0x30
1004224c:	4013      	ands	r3, r2
1004224e:	683a      	ldr	r2, [r7, #0]
10042250:	429a      	cmp	r2, r3
10042252:	d01d      	beq.n	10042290 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10042254:	4b1a      	ldr	r3, [pc, #104]	@ (100422c0 <HAL_RCC_ClockConfig+0x150>)
10042256:	685b      	ldr	r3, [r3, #4]
10042258:	2230      	movs	r2, #48	@ 0x30
1004225a:	4393      	bics	r3, r2
1004225c:	0019      	movs	r1, r3
1004225e:	4b18      	ldr	r3, [pc, #96]	@ (100422c0 <HAL_RCC_ClockConfig+0x150>)
10042260:	683a      	ldr	r2, [r7, #0]
10042262:	430a      	orrs	r2, r1
10042264:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10042266:	f7fe fdad 	bl	10040dc4 <HAL_GetTick>
1004226a:	0003      	movs	r3, r0
1004226c:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004226e:	e008      	b.n	10042282 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10042270:	f7fe fda8 	bl	10040dc4 <HAL_GetTick>
10042274:	0002      	movs	r2, r0
10042276:	68fb      	ldr	r3, [r7, #12]
10042278:	1ad3      	subs	r3, r2, r3
1004227a:	2b02      	cmp	r3, #2
1004227c:	d901      	bls.n	10042282 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004227e:	2303      	movs	r3, #3
10042280:	e019      	b.n	100422b6 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10042282:	4b0f      	ldr	r3, [pc, #60]	@ (100422c0 <HAL_RCC_ClockConfig+0x150>)
10042284:	685b      	ldr	r3, [r3, #4]
10042286:	2230      	movs	r2, #48	@ 0x30
10042288:	4013      	ands	r3, r2
1004228a:	683a      	ldr	r2, [r7, #0]
1004228c:	429a      	cmp	r2, r3
1004228e:	d1ef      	bne.n	10042270 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10042290:	2300      	movs	r3, #0
10042292:	60bb      	str	r3, [r7, #8]
10042294:	e003      	b.n	1004229e <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10042296:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10042298:	68bb      	ldr	r3, [r7, #8]
1004229a:	3301      	adds	r3, #1
1004229c:	60bb      	str	r3, [r7, #8]
1004229e:	68bb      	ldr	r3, [r7, #8]
100422a0:	2b05      	cmp	r3, #5
100422a2:	ddf8      	ble.n	10042296 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
100422a4:	f7fe fcb2 	bl	10040c0c <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
100422a8:	f7fe fd96 	bl	10040dd8 <HAL_GetTickPrio>
100422ac:	0003      	movs	r3, r0
100422ae:	0018      	movs	r0, r3
100422b0:	f7fe fd2e 	bl	10040d10 <HAL_InitTick>
100422b4:	0003      	movs	r3, r0
}
100422b6:	0018      	movs	r0, r3
100422b8:	46bd      	mov	sp, r7
100422ba:	b004      	add	sp, #16
100422bc:	bd80      	pop	{r7, pc}
100422be:	46c0      	nop			@ (mov r8, r8)
100422c0:	40001000 	.word	0x40001000
100422c4:	48400000 	.word	0x48400000

100422c8 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
100422c8:	b580      	push	{r7, lr}
100422ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
100422cc:	4b02      	ldr	r3, [pc, #8]	@ (100422d8 <HAL_RCC_GetSysClockFreq+0x10>)
100422ce:	681b      	ldr	r3, [r3, #0]
}
100422d0:	0018      	movs	r0, r3
100422d2:	46bd      	mov	sp, r7
100422d4:	bd80      	pop	{r7, pc}
100422d6:	46c0      	nop			@ (mov r8, r8)
100422d8:	2000011c 	.word	0x2000011c

100422dc <LL_RCC_LSCO_SetSource>:
{
100422dc:	b580      	push	{r7, lr}
100422de:	b082      	sub	sp, #8
100422e0:	af00      	add	r7, sp, #0
100422e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100422e4:	4b06      	ldr	r3, [pc, #24]	@ (10042300 <LL_RCC_LSCO_SetSource+0x24>)
100422e6:	689b      	ldr	r3, [r3, #8]
100422e8:	4a06      	ldr	r2, [pc, #24]	@ (10042304 <LL_RCC_LSCO_SetSource+0x28>)
100422ea:	4013      	ands	r3, r2
100422ec:	0019      	movs	r1, r3
100422ee:	4b04      	ldr	r3, [pc, #16]	@ (10042300 <LL_RCC_LSCO_SetSource+0x24>)
100422f0:	687a      	ldr	r2, [r7, #4]
100422f2:	430a      	orrs	r2, r1
100422f4:	609a      	str	r2, [r3, #8]
}
100422f6:	46c0      	nop			@ (mov r8, r8)
100422f8:	46bd      	mov	sp, r7
100422fa:	b002      	add	sp, #8
100422fc:	bd80      	pop	{r7, pc}
100422fe:	46c0      	nop			@ (mov r8, r8)
10042300:	48400000 	.word	0x48400000
10042304:	fffe7fff 	.word	0xfffe7fff

10042308 <LL_RCC_SetRFClock>:
{
10042308:	b580      	push	{r7, lr}
1004230a:	b082      	sub	sp, #8
1004230c:	af00      	add	r7, sp, #0
1004230e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10042310:	4b06      	ldr	r3, [pc, #24]	@ (1004232c <LL_RCC_SetRFClock+0x24>)
10042312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042314:	2204      	movs	r2, #4
10042316:	4393      	bics	r3, r2
10042318:	0019      	movs	r1, r3
1004231a:	4b04      	ldr	r3, [pc, #16]	@ (1004232c <LL_RCC_SetRFClock+0x24>)
1004231c:	687a      	ldr	r2, [r7, #4]
1004231e:	430a      	orrs	r2, r1
10042320:	661a      	str	r2, [r3, #96]	@ 0x60
}
10042322:	46c0      	nop			@ (mov r8, r8)
10042324:	46bd      	mov	sp, r7
10042326:	b002      	add	sp, #8
10042328:	bd80      	pop	{r7, pc}
1004232a:	46c0      	nop			@ (mov r8, r8)
1004232c:	48400000 	.word	0x48400000

10042330 <LL_RCC_SetSMPSPrescaler>:
{
10042330:	b580      	push	{r7, lr}
10042332:	b082      	sub	sp, #8
10042334:	af00      	add	r7, sp, #0
10042336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10042338:	4b06      	ldr	r3, [pc, #24]	@ (10042354 <LL_RCC_SetSMPSPrescaler+0x24>)
1004233a:	689b      	ldr	r3, [r3, #8]
1004233c:	4a06      	ldr	r2, [pc, #24]	@ (10042358 <LL_RCC_SetSMPSPrescaler+0x28>)
1004233e:	4013      	ands	r3, r2
10042340:	0019      	movs	r1, r3
10042342:	4b04      	ldr	r3, [pc, #16]	@ (10042354 <LL_RCC_SetSMPSPrescaler+0x24>)
10042344:	687a      	ldr	r2, [r7, #4]
10042346:	430a      	orrs	r2, r1
10042348:	609a      	str	r2, [r3, #8]
}
1004234a:	46c0      	nop			@ (mov r8, r8)
1004234c:	46bd      	mov	sp, r7
1004234e:	b002      	add	sp, #8
10042350:	bd80      	pop	{r7, pc}
10042352:	46c0      	nop			@ (mov r8, r8)
10042354:	48400000 	.word	0x48400000
10042358:	ffffefff 	.word	0xffffefff

1004235c <LL_RCC_SetLPUARTClockSource>:
{
1004235c:	b580      	push	{r7, lr}
1004235e:	b082      	sub	sp, #8
10042360:	af00      	add	r7, sp, #0
10042362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10042364:	4b06      	ldr	r3, [pc, #24]	@ (10042380 <LL_RCC_SetLPUARTClockSource+0x24>)
10042366:	689b      	ldr	r3, [r3, #8]
10042368:	4a06      	ldr	r2, [pc, #24]	@ (10042384 <LL_RCC_SetLPUARTClockSource+0x28>)
1004236a:	4013      	ands	r3, r2
1004236c:	0019      	movs	r1, r3
1004236e:	4b04      	ldr	r3, [pc, #16]	@ (10042380 <LL_RCC_SetLPUARTClockSource+0x24>)
10042370:	687a      	ldr	r2, [r7, #4]
10042372:	430a      	orrs	r2, r1
10042374:	609a      	str	r2, [r3, #8]
}
10042376:	46c0      	nop			@ (mov r8, r8)
10042378:	46bd      	mov	sp, r7
1004237a:	b002      	add	sp, #8
1004237c:	bd80      	pop	{r7, pc}
1004237e:	46c0      	nop			@ (mov r8, r8)
10042380:	48400000 	.word	0x48400000
10042384:	ffffdfff 	.word	0xffffdfff

10042388 <LL_RCC_SetSPI3I2SClockSource>:
{
10042388:	b580      	push	{r7, lr}
1004238a:	b082      	sub	sp, #8
1004238c:	af00      	add	r7, sp, #0
1004238e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10042390:	4b06      	ldr	r3, [pc, #24]	@ (100423ac <LL_RCC_SetSPI3I2SClockSource+0x24>)
10042392:	689b      	ldr	r3, [r3, #8]
10042394:	4a06      	ldr	r2, [pc, #24]	@ (100423b0 <LL_RCC_SetSPI3I2SClockSource+0x28>)
10042396:	4013      	ands	r3, r2
10042398:	0019      	movs	r1, r3
1004239a:	4b04      	ldr	r3, [pc, #16]	@ (100423ac <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004239c:	687a      	ldr	r2, [r7, #4]
1004239e:	430a      	orrs	r2, r1
100423a0:	609a      	str	r2, [r3, #8]
}
100423a2:	46c0      	nop			@ (mov r8, r8)
100423a4:	46bd      	mov	sp, r7
100423a6:	b002      	add	sp, #8
100423a8:	bd80      	pop	{r7, pc}
100423aa:	46c0      	nop			@ (mov r8, r8)
100423ac:	48400000 	.word	0x48400000
100423b0:	ff3fffff 	.word	0xff3fffff

100423b4 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
100423b4:	b580      	push	{r7, lr}
100423b6:	b082      	sub	sp, #8
100423b8:	af00      	add	r7, sp, #0
100423ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
100423bc:	687b      	ldr	r3, [r7, #4]
100423be:	681b      	ldr	r3, [r3, #0]
100423c0:	2201      	movs	r2, #1
100423c2:	4013      	ands	r3, r2
100423c4:	d004      	beq.n	100423d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
100423c6:	687b      	ldr	r3, [r7, #4]
100423c8:	691b      	ldr	r3, [r3, #16]
100423ca:	0018      	movs	r0, r3
100423cc:	f7ff ff9c 	bl	10042308 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
100423d0:	687b      	ldr	r3, [r7, #4]
100423d2:	681b      	ldr	r3, [r3, #0]
100423d4:	2202      	movs	r2, #2
100423d6:	4013      	ands	r3, r2
100423d8:	d004      	beq.n	100423e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
100423da:	687b      	ldr	r3, [r7, #4]
100423dc:	695b      	ldr	r3, [r3, #20]
100423de:	0018      	movs	r0, r3
100423e0:	f7ff ffa6 	bl	10042330 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
100423e4:	687b      	ldr	r3, [r7, #4]
100423e6:	681b      	ldr	r3, [r3, #0]
100423e8:	2208      	movs	r2, #8
100423ea:	4013      	ands	r3, r2
100423ec:	d004      	beq.n	100423f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
100423ee:	687b      	ldr	r3, [r7, #4]
100423f0:	685b      	ldr	r3, [r3, #4]
100423f2:	0018      	movs	r0, r3
100423f4:	f7ff ffc8 	bl	10042388 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
100423f8:	687b      	ldr	r3, [r7, #4]
100423fa:	681b      	ldr	r3, [r3, #0]
100423fc:	2210      	movs	r2, #16
100423fe:	4013      	ands	r3, r2
10042400:	d004      	beq.n	1004240c <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
10042402:	687b      	ldr	r3, [r7, #4]
10042404:	68db      	ldr	r3, [r3, #12]
10042406:	0018      	movs	r0, r3
10042408:	f7ff ffa8 	bl	1004235c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004240c:	687b      	ldr	r3, [r7, #4]
1004240e:	689b      	ldr	r3, [r3, #8]
10042410:	2220      	movs	r2, #32
10042412:	4013      	ands	r3, r2
10042414:	d004      	beq.n	10042420 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10042416:	687b      	ldr	r3, [r7, #4]
10042418:	689b      	ldr	r3, [r3, #8]
1004241a:	0018      	movs	r0, r3
1004241c:	f7ff ff5e 	bl	100422dc <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10042420:	2300      	movs	r3, #0
}
10042422:	0018      	movs	r0, r3
10042424:	46bd      	mov	sp, r7
10042426:	b002      	add	sp, #8
10042428:	bd80      	pop	{r7, pc}

1004242a <memset>:
1004242a:	0003      	movs	r3, r0
1004242c:	1882      	adds	r2, r0, r2
1004242e:	4293      	cmp	r3, r2
10042430:	d100      	bne.n	10042434 <memset+0xa>
10042432:	4770      	bx	lr
10042434:	7019      	strb	r1, [r3, #0]
10042436:	3301      	adds	r3, #1
10042438:	e7f9      	b.n	1004242e <memset+0x4>
	...

Disassembly of section .init:

1004243c <_init>:
1004243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004243e:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10042440 <_fini>:
10042440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10042442:	46c0      	nop			@ (mov r8, r8)
